local GUIModule = {}
GUIModule.__index = GUIModule

function GUIModule:CreateMenu(title)
    local menu = {}
    menu.Tabs = {}
    menu.Visible = false

    local Players = game:GetService("Players")
    local UserInputService = game:GetService("UserInputService")
    local player = Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = title:gsub("%s+", "") .. "Menu"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 400, 0, 300)
    mainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui

    local tabButtonsFrame = Instance.new("Frame")
    tabButtonsFrame.Size = UDim2.new(1, 0, 0, 30)
    tabButtonsFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    tabButtonsFrame.BorderSizePixel = 0
    tabButtonsFrame.Parent = mainFrame

    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, 0, 1, -30)
    contentFrame.Position = UDim2.new(0, 0, 0, 30)
    contentFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    contentFrame.BorderSizePixel = 0
    contentFrame.Parent = mainFrame

    menu.ScreenGui = screenGui
    menu.MainFrame = mainFrame
    menu.TabButtonsFrame = tabButtonsFrame
    menu.ContentFrame = contentFrame
    menu.TabFrames = {}
    menu.CurrentTab = nil

    function menu:AddTab(name)
        local tab = {}
        tab.Name = name
        tab.Controls = {}

        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(0, 100, 1, 0)
        tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabButton.Text = name
        tabButton.Parent = tabButtonsFrame

        local tabContent = Instance.new("Frame")
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.Visible = false
        tabContent.Parent = contentFrame

        menu.TabFrames[name] = tabContent

        tabButton.MouseButton1Click:Connect(function()
            for _, frame in pairs(menu.TabFrames) do
                frame.Visible = false
            end
            tabContent.Visible = true
            menu.CurrentTab = name
            for _, btn in pairs(tabButtonsFrame:GetChildren()) do
                if btn:IsA("TextButton") then
                    btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                end
            end
            tabButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end)

        function tab:AddButton(text, callback)
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(0, 150, 0, 30)
            btn.Position = UDim2.new(0, 10, 0, #tab.Controls * 35 + 10)
            btn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            btn.TextColor3 = Color3.fromRGB(255, 255, 255)
            btn.Text = text
            btn.Parent = tabContent
            btn.MouseButton1Click:Connect(callback)
            table.insert(tab.Controls, btn)
            return btn
        end

        function tab:AddToggle(text, default, callback)
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Size = UDim2.new(0, 150, 0, 30)
            toggleFrame.Position = UDim2.new(0, 10, 0, #tab.Controls * 35 + 10)
            toggleFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            toggleFrame.Parent = tabContent

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.7, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.Text = text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = toggleFrame

            local toggleBtn = Instance.new("TextButton")
            toggleBtn.Size = UDim2.new(0.3, -5, 0.8, 0)
            toggleBtn.Position = UDim2.new(0.7, 5, 0.1, 0)
            toggleBtn.BackgroundColor3 = default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            toggleBtn.Text = default and "ON" or "OFF"
            toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            toggleBtn.Parent = toggleFrame

            local state = default
            toggleBtn.MouseButton1Click:Connect(function()
                state = not state
                toggleBtn.BackgroundColor3 = state and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                toggleBtn.Text = state and "ON" or "OFF"
                callback(state)
            end)
            table.insert(tab.Controls, toggleFrame)
            return toggleFrame
        end

        function tab:AddSlider(text, min, max, default, callback)
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Size = UDim2.new(0, 150, 0, 40)
            sliderFrame.Position = UDim2.new(0, 10, 0, #tab.Controls * 45 + 10)
            sliderFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            sliderFrame.Parent = tabContent

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, 0, 0, 20)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.Text = text .. ": " .. tostring(math.floor(default))
            label.Parent = sliderFrame

            local sliderBar = Instance.new("Frame")
            sliderBar.Size = UDim2.new(1, -20, 0, 10)
            sliderBar.Position = UDim2.new(0, 10, 0, 25)
            sliderBar.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            sliderBar.Parent = sliderFrame

            local sliderHandle = Instance.new("TextButton")
            sliderHandle.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            sliderHandle.Position = UDim2.new(0, 0, 0, 0)
            sliderHandle.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
            sliderHandle.Text = ""
            sliderHandle.Parent = sliderBar

            local dragging = false
            local UserInputService = game:GetService("UserInputService")

            sliderHandle.MouseButton1Down:Connect(function()
                dragging = true
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local relativeX = math.clamp(input.Position.X - sliderBar.AbsolutePosition.X, 0, sliderBar.AbsoluteSize.X)
                    local value = min + (relativeX / sliderBar.AbsoluteSize.X) * (max - min)
                    sliderHandle.Size = UDim2.new(relativeX / sliderBar.AbsoluteSize.X, 0, 1, 0)
                    label.Text = text .. ": " .. math.floor(value)
                    callback(value)
                end
            end)

            table.insert(tab.Controls, sliderFrame)
            return sliderFrame
        end

        table.insert(menu.Tabs, tab)
        return tab
    end

    function menu:Show()
        self.Visible = true
        self.ScreenGui.Enabled = true
        if #self.Tabs > 0 then
            local firstTab = self.Tabs[1]
            for _, frame in pairs(self.TabFrames) do
                frame.Visible = false
            end
            self.TabFrames[firstTab.Name].Visible = true
            for _, btn in pairs(self.TabButtonsFrame:GetChildren()) do
                if btn:IsA("TextButton") then
                    btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                end
            end
            for _, btn in pairs(self.TabButtonsFrame:GetChildren()) do
                if btn:IsA("TextButton") and btn.Text == firstTab.Name then
                    btn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                end
            end
            self.CurrentTab = firstTab.Name
        end
    end

    function menu:Hide()
        self.Visible = false
        self.ScreenGui.Enabled = false
    end

    return menu
end

return GUIModule
