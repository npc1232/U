local GUIModule = {}
GUIModule.__index = GUIModule

local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")

function GUIModule:CreateMenu(title, description)
    local menu = {}
    menu.Tabs = {}
    menu.Visible = false

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = title:gsub("%s+", "") .. "Menu"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = CoreGui

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 460, 0, 380)
    mainFrame.Position = UDim2.new(0.5, -230, 0.5, -190)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    mainFrame.BorderSizePixel = 0
    mainFrame.Visible = false
    mainFrame.Parent = screenGui

    local topBar = Instance.new("Frame")
    topBar.Size = UDim2.new(1, 0, 0, 30)
    topBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    topBar.BorderSizePixel = 0
    topBar.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(0.5, 0, 1, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Text = title or "Menu"
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 18
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.Parent = topBar

    local descriptionLabel = Instance.new("TextLabel")
    descriptionLabel.Size = UDim2.new(0.5, 0, 1, 0)
    descriptionLabel.BackgroundTransparency = 1
    descriptionLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    descriptionLabel.Text = description or ""
    descriptionLabel.Font = Enum.Font.SourceSans
    descriptionLabel.TextSize = 14
    descriptionLabel.TextXAlignment = Enum.TextXAlignment.Left
    descriptionLabel.Position = UDim2.new(0.5, 10, 0, 0)
    descriptionLabel.Parent = topBar

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0, 30, 1, 0)
    closeButton.Position = UDim2.new(1, -60, 0, 0)
    closeButton.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Text = "X"
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextSize = 20
    closeButton.Parent = topBar

    local configButton = Instance.new("TextButton")
    configButton.Size = UDim2.new(0, 30, 1, 0)
    configButton.Position = UDim2.new(1, -30, 0, 0)
    configButton.BackgroundColor3 = Color3.fromRGB(50, 150, 180)
    configButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    configButton.Text = "⚙"
    configButton.Font = Enum.Font.SourceSansBold
    configButton.TextSize = 20
    configButton.Parent = topBar

    local tabButtonsFrame = Instance.new("ScrollingFrame")
    tabButtonsFrame.Size = UDim2.new(1, 0, 0, 40)
    tabButtonsFrame.Position = UDim2.new(0, 0, 0, 30)
    tabButtonsFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    tabButtonsFrame.BorderSizePixel = 0
    tabButtonsFrame.ScrollBarThickness = 6
    tabButtonsFrame.HorizontalScrollBarInset = Enum.ScrollBarInset.Always
    tabButtonsFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    tabButtonsFrame.Parent = mainFrame

    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Size = UDim2.new(1, 0, 1, -70)
    contentFrame.Position = UDim2.new(0, 0, 0, 70)
    contentFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    contentFrame.BorderSizePixel = 0
    contentFrame.ScrollBarThickness = 8
    contentFrame.CanvasSize = UDim2.new(0, 0, 10, 0)
    contentFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    contentFrame.Parent = mainFrame

    menu.ScreenGui = screenGui
    menu.MainFrame = mainFrame
    menu.TopBar = topBar
    menu.TitleLabel = titleLabel
    menu.DescriptionLabel = descriptionLabel
    menu.CloseButton = closeButton
    menu.ConfigButton = configButton
    menu.TabButtonsFrame = tabButtonsFrame
    menu.ContentFrame = contentFrame
    menu.TabFrames = {}
    menu.CurrentTab = nil
    menu.TabButtons = {}

    closeButton.MouseButton1Click:Connect(function()
        menu:Hide()
    end)

    local currentColor = mainFrame.BackgroundColor3

    local function applyColorToAll(color)
        currentColor = color
        mainFrame.BackgroundColor3 = color
        topBar.BackgroundColor3 = color:lerp(Color3.new(0,0,0),0.7)
        tabButtonsFrame.BackgroundColor3 = color:lerp(Color3.new(0,0,0),0.5)
        for _, btn in pairs(menu.TabButtons) do
            btn.BackgroundColor3 = color:lerp(Color3.new(0.15,0.15,0.15), 0.7)
        end
        for _, tab in pairs(menu.Tabs) do
            for _, ctrl in pairs(tab.Controls) do
                if ctrl:IsA("TextButton") or ctrl:IsA("Frame") then
                    ctrl.BackgroundColor3 = color:lerp(Color3.new(0.2,0.2,0.2), 0.5)
                end
            end
        end
    end

    local colorPickerFrame
    local function createColorPicker()
        if colorPickerFrame then
            colorPickerFrame:Destroy()
        end
        colorPickerFrame = Instance.new("Frame")
        colorPickerFrame.Size = UDim2.new(0, 200, 0, 220)
        colorPickerFrame.Position = UDim2.new(1, 10, 0, 30)
        colorPickerFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        colorPickerFrame.BorderSizePixel = 0
        colorPickerFrame.Parent = mainFrame

        local huePicker = Instance.new("ImageLabel")
        huePicker.Size = UDim2.new(0, 180, 0, 20)
        huePicker.Position = UDim2.new(0, 10, 0, 10)
        huePicker.BackgroundTransparency = 1
        huePicker.Image = "rbxassetid://3926305904"
        huePicker.Parent = colorPickerFrame

        local saturationValuePicker = Instance.new("ImageLabel")
        saturationValuePicker.Size = UDim2.new(0, 180, 0, 180)
        saturationValuePicker.Position = UDim2.new(0, 10, 0, 40)
        saturationValuePicker.BackgroundTransparency = 1
        saturationValuePicker.Image = "rbxassetid://3926307971"
        saturationValuePicker.Parent = colorPickerFrame

        local selectedColorPreview = Instance.new("Frame")
        selectedColorPreview.Size = UDim2.new(0, 180, 0, 20)
        selectedColorPreview.Position = UDim2.new(0, 10, 1, -30)
        selectedColorPreview.BackgroundColor3 = currentColor
        selectedColorPreview.BorderSizePixel = 0
        selectedColorPreview.Parent = colorPickerFrame

        local hue = 0
        local saturation = 1
        local value = 1

        local function updateColor()
            local c = Color3.fromHSV(hue, saturation, value)
            selectedColorPreview.BackgroundColor3 = c
            applyColorToAll(c)
        end

        local draggingHue = false
        local draggingSatVal = false

        local function inputEnded(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                draggingHue = false
                draggingSatVal = false
            end
        end

        local function inputChanged(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                if draggingHue then
                    local pos = math.clamp(input.Position.X - huePicker.AbsolutePosition.X, 0, huePicker.AbsoluteSize.X)
                    hue = pos / huePicker.AbsoluteSize.X
                    updateColor()
                elseif draggingSatVal then
                    local x = math.clamp(input.Position.X - saturationValuePicker.AbsolutePosition.X, 0, saturationValuePicker.AbsoluteSize.X)
                    local y = math.clamp(input.Position.Y - saturationValuePicker.AbsolutePosition.Y, 0, saturationValuePicker.AbsoluteSize.Y)
                    saturation = x / saturationValuePicker.AbsoluteSize.X
                    value = 1 - y / saturationValuePicker.AbsoluteSize.Y
                    updateColor()
                end
            end
        end

        huePicker.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                draggingHue = true
                inputChanged(input)
            end
        end)

        saturationValuePicker.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                draggingSatVal = true
                inputChanged(input)
            end
        end)

        UserInputService.InputChanged:Connect(inputChanged)
        UserInputService.InputEnded:Connect(inputEnded)

        return colorPickerFrame
    end

    configButton.MouseButton1Click:Connect(function()
        if colorPickerFrame and colorPickerFrame.Parent then
            colorPickerFrame:Destroy()
            colorPickerFrame = nil
        else
            colorPickerFrame = createColorPicker()
        end
    end)

    function menu:AddTab(name, imageId)
        local tab = {}
        tab.Name = name
        tab.Controls = {}

        local tabButton = Instance.new("TextButton")
        tabButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabButton.Text = name
        tabButton.Size = UDim2.new(0, 120, 1, 0)
        tabButton.Parent = tabButtonsFrame
        tabButton.AutoButtonColor = false

        if imageId then
            local icon = Instance.new("ImageLabel")
            icon.Size = UDim2.new(0, 20, 0, 20)
            icon.Position = UDim2.new(1, -25, 0.5, -10)
            icon.BackgroundTransparency = 1
            icon.Image = "rbxassetid://" .. tostring(imageId)
            icon.Parent = tabButton
        end

        local tabContent = Instance.new("Frame")
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.Visible = false
        tabContent.Parent = contentFrame

        menu.TabFrames[name] = tabContent
        menu.TabButtons[#menu.TabButtons+1] = tabButton

        -- Ajuste canvas para scroll horizontal pestañas
        local function updateCanvas()
            local totalWidth = 0
            for _, btn in ipairs(menu.TabButtons) do
                totalWidth = totalWidth + btn.AbsoluteSize.X + 5
            end
            tabButtonsFrame.CanvasSize = UDim2.new(0, totalWidth, 0, 40)
        end

        tabButtonsFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateCanvas)
        tabButton:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateCanvas)
        updateCanvas()

        tabButton.MouseButton1Click:Connect(function()
            for _, frame in pairs(menu.TabFrames) do
                frame.Visible = false
            end
            tabContent.Visible = true
            menu.CurrentTab = name
            for _, btn in pairs(menu.TabButtons) do
                btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            end
            tabButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        end)

        function tab:AddButton(text, callback)
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(0, 150, 0, 30)
            btn.Position = UDim2.new(0, 10, 0, #tab.Controls * 35 + 10)
            btn.BackgroundColor3 = currentColor:lerp(Color3.new(0.15,0.15,0.15), 0.7)
            btn.TextColor3 = Color3.fromRGB(255, 255, 255)
            btn.Text = text
            btn.Parent = tabContent
            btn.MouseButton1Click:Connect(callback)
            table.insert(tab.Controls, btn)
            return btn
        end

        function tab:AddToggle(text, default, callback)
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Size = UDim2.new(0, 150, 0, 30)
            toggleFrame.Position = UDim2.new(0, 10, 0, #tab.Controls * 35 + 10)
            toggleFrame.BackgroundColor3 = currentColor:lerp(Color3.new(0.15,0.15,0.15), 0.7)
            toggleFrame.Parent = tabContent

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.7, 0, 1, 0)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.Text = text
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = toggleFrame

            local toggleBtn = Instance.new("TextButton")
            toggleBtn.Size = UDim2.new(0.3, -5, 0.8, 0)
            toggleBtn.Position = UDim2.new(0.7, 5, 0.1, 0)
            toggleBtn.BackgroundColor3 = default and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            toggleBtn.Text = default and "ON" or "OFF"
            toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
            toggleBtn.Parent = toggleFrame

            local state = default
            toggleBtn.MouseButton1Click:Connect(function()
                state = not state
                toggleBtn.BackgroundColor3 = state and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
                toggleBtn.Text = state and "ON" or "OFF"
                callback(state)
            end)
            table.insert(tab.Controls, toggleFrame)
            return toggleFrame
        end

        function tab:AddSlider(text, min, max, default, callback)
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Size = UDim2.new(0, 150, 0, 40)
            sliderFrame.Position = UDim2.new(0, 10, 0, #tab.Controls * 45 + 10)
            sliderFrame.BackgroundColor3 = currentColor:lerp(Color3.new(0.15,0.15,0.15), 0.7)
            sliderFrame.Parent = tabContent

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, 0, 0, 20)
            label.BackgroundTransparency = 1
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.Text = text .. ": " .. tostring(math.floor(default))
            label.Parent = sliderFrame

            local sliderBar = Instance.new("Frame")
            sliderBar.Size = UDim2.new(1, -20, 0, 10)
            sliderBar.Position = UDim2.new(0, 10, 0, 25)
            sliderBar.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            sliderBar.Parent = sliderFrame

            local sliderHandle = Instance.new("TextButton")
            sliderHandle.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
            sliderHandle.Position = UDim2.new(0, 0, 0, 0)
            sliderHandle.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
            sliderHandle.Text = ""
            sliderHandle.Parent = sliderBar

            local dragging = false

            sliderHandle.MouseButton1Down:Connect(function()
                dragging = true
            end)

            UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    local relativeX = math.clamp(input.Position.X - sliderBar.AbsolutePosition.X, 0, sliderBar.AbsoluteSize.X)
                    local value = min + (relativeX / sliderBar.AbsoluteSize.X) * (max - min)
                    sliderHandle.Size = UDim2.new(relativeX / sliderBar.AbsoluteSize.X, 0, 1, 0)
                    label.Text = text .. ": " .. math.floor(value)
                    callback(value)
                end
            end)

            table.insert(tab.Controls, sliderFrame)
            return sliderFrame
        end

        table.insert(menu.Tabs, tab)
        return tab
    end

    function menu:Show()
        self.Visible = true
        self.MainFrame.Visible = true
        if #self.Tabs > 0 then
            local firstTab = self.Tabs[1]
            for _, frame in pairs(self.TabFrames) do
                frame.Visible = false
            end
            self.TabFrames[firstTab.Name].Visible = true
            for _, btn in pairs(self.TabButtons) do
                btn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            end
            for _, btn in pairs(self.TabButtons) do
                if btn.Text == firstTab.Name then
                    btn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
                end
            end
            self.CurrentTab = firstTab.Name
        end
    end

    function menu:Hide()
        self.Visible = false
        self.MainFrame.Visible = false
        if colorPickerFrame then
            colorPickerFrame:Destroy()
            colorPickerFrame = nil
        end
    end

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 40, 0, 100)
    toggleButton.Position = UDim2.new(0, 0, 0.5, -50)
    toggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleButton.Text = "Menu"
    toggleButton.Font = Enum.Font.SourceSansBold
    toggleButton.TextSize = 16
    toggleButton.Parent = screenGui
    toggleButton.ZIndex = 10

    toggleButton.MouseButton1Click:Connect(function()
        if menu.Visible then
            menu:Hide()
        else
            menu:Show()
        end
    end)

    menu.ToggleButton = toggleButton

    return menu
end

return GUIModule
